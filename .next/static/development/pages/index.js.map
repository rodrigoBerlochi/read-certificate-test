{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///./components/FileInput.jsx","webpack:///./components/Input.jsx","webpack:///./modules/certh-auth.js","webpack:///delegated ./node_modules/object-assign/index.js from dll-reference dll_5d62d38be3592dca3a42","webpack:///delegated ./node_modules/prop-types/checkPropTypes.js from dll-reference dll_5d62d38be3592dca3a42","webpack:///./node_modules/prop-types/factoryWithTypeCheckers.js","webpack:///./node_modules/prop-types/index.js","webpack:///delegated ./node_modules/prop-types/lib/ReactPropTypesSecret.js from dll-reference dll_5d62d38be3592dca3a42","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_5d62d38be3592dca3a42","webpack:///(webpack)/buildin/harmony-module.js","webpack:///./pages/index.js","webpack:///./pkijs/pkijs.js","webpack:///external \"dll_5d62d38be3592dca3a42\""],"sourcesContent":["import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport {Input} from './Input';\r\n\r\n/**\r\n * \r\n */\r\nexport class FileInput extends React.Component{\r\n    \r\n    static EnumReadingsType = {\r\n        text: 'readAsText',\r\n        binaryString: 'readAsBinaryString',\r\n        arrayBuffer: 'readAsArrayBuffer',\r\n        dataURL: 'readAsDataURL'\r\n    } \r\n\r\n    state = {\r\n        isFileAPISupported: true,\r\n        progress: 0\r\n    }\r\n    \r\n    reader = null;\r\n\r\n    componentDidMount () {\r\n        if (!(window.File &&\r\n            window.FileReader &&\r\n            window.FileList &&\r\n            window.Blob)) {\r\n                this.setState({\r\n                    isFileAPISupported: false\r\n                });\r\n\r\n                return;\r\n        }\r\n\r\n        this.reader = new FileReader();\r\n\r\n    }\r\n\r\n    onFileInputChange = (e) => {\r\n        const file = e.target.files[0];\r\n\r\n        this.reader.onload = (e) => {\r\n            const result = e.currentTarget.result;\r\n            this.props.getResult(result);\r\n        };\r\n\r\n        this.reader.onprogress = (e) => {\r\n            const pgs = Math.round((e.loaded / e.total) * 100);\r\n            this.setState({\r\n                progress: pgs\r\n            });\r\n        };\r\n\r\n        this.reader[this.props.readingType](file);\r\n    }\r\n\r\n    render () {\r\n        const {isFileAPISupported, progress} = this.state;\r\n        const {messageNoBrowserSupport} = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isFileAPISupported ? <Input\r\n                    id={this.props.id}\r\n                    type={'file'}\r\n                    onInputChange={this.onFileInputChange}\r\n                /> : messageNoBrowserSupport}\r\n                <progress max={100} value={progress}></progress>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst readings = Object.values(FileInput.EnumReadingsType);\r\n\r\nFileInput.propsTypes = {\r\n    messageNoBrowserSupport: PropsTypes.string,\r\n    getResult: PropsTypes.func.isRequired,\r\n    readingType: PropsTypes.oneOf(readings).isRequired\r\n}\r\n\r\nFileInput.defaultProps = {\r\n    messageNoBrowserSupport: 'Your browser has no support for Uploading Files. Use another browser.',\r\n    getResult: (val) => {\r\n        console.log(val);\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const Input = (props) => {\r\n    return (\r\n        <input\r\n            type={props.type}\r\n            id={props.id}\r\n            name={props.name || props.id}\r\n            onChange={props.onInputChange}\r\n        />\r\n    );\r\n};\r\n\r\nInput.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string,\r\n    onInputChange: PropTypes.func\r\n};\r\n\r\nInput.defaultProps = {\r\n    onInputChange: (e) => {console.dir(e)}\r\n}","import { org } from '../pkijs/pkijs';\r\n//pki\r\nconsole.dir(org);\r\n\r\nexport const readPrivateKeyFromCert = (value) => {\r\n    return value;\r\n}","module.exports = (__webpack_require__(/*! dll-reference dll_5d62d38be3592dca3a42 */ \"dll-reference dll_5d62d38be3592dca3a42\"))(\"./node_modules/object-assign/index.js\");","module.exports = (__webpack_require__(/*! dll-reference dll_5d62d38be3592dca3a42 */ \"dll-reference dll_5d62d38be3592dca3a42\"))(\"./node_modules/prop-types/checkPropTypes.js\");","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","module.exports = (__webpack_require__(/*! dll-reference dll_5d62d38be3592dca3a42 */ \"dll-reference dll_5d62d38be3592dca3a42\"))(\"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");","module.exports = (__webpack_require__(/*! dll-reference dll_5d62d38be3592dca3a42 */ \"dll-reference dll_5d62d38be3592dca3a42\"))(\"./node_modules/react/index.js\");","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import {FileInput} from '../components/FileInput';\r\nimport {readPrivateKeyFromCert} from '../modules/certh-auth'; // todo review this\r\n\r\nconst handleReadResult = (value) => {\r\n    console.log(value);\r\n    const pk = readPrivateKeyFromCert(value);\r\n};\r\n\r\nexport default () => {\r\n    return (\r\n        <FileInput\r\n            id={'cert-input'}\r\n            readingType={FileInput.EnumReadingsType.text}\r\n            getResult={handleReadResult}\r\n        />)\r\n};","//common.js\r\n/*\r\n * Copyright (c) 2014, GMO GlobalSign\r\n * Copyright (c) 2015, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2014-2015, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, \r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors \r\n *    may be used to endorse or promote products derived from this software without \r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT \r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \r\n * OF SUCH DAMAGE. \r\n *\r\n */\r\n(\r\nfunction(in_window)\r\n{\r\n    //**************************************************************************************\r\n    // #region Declaration of global variables \r\n    //**************************************************************************************\r\n    // #region \"org\" namespace \r\n    if(typeof in_window.org === \"undefined\")\r\n        in_window.org = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org !== \"object\")\r\n            throw new Error(\"Name org already exists and it's not an object\");\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs\" namespace \r\n    if(typeof in_window.org.pkijs === \"undefined\")\r\n        in_window.org.pkijs = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs !== \"object\")\r\n            throw new Error(\"Name org.pkijs already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"local\" namespace \r\n    var local = {};\r\n    // #endregion   \r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Settings for \"crypto engine\" \r\n    //**************************************************************************************\r\n    local.engine = {\r\n        name: \"none\",\r\n        crypto: null,\r\n        subtle: null\r\n    };\r\n\r\n    if(typeof window != \"undefined\")\r\n    {\r\n        if(\"crypto\" in window)\r\n        {\r\n            var engineName = \"webcrypto\";\r\n            var cryptoObject = window.crypto;\r\n            var subtleObject = null;\r\n\r\n            // Apple Safari support\r\n            if(\"webkitSubtle\" in window.crypto)\r\n                subtleObject = window.crypto.webkitSubtle;\r\n\r\n            if(\"subtle\" in window.crypto)\r\n                subtleObject = window.crypto.subtle;\r\n\r\n            local.engine = {\r\n                name: engineName,\r\n                crypto: cryptoObject,\r\n                subtle: subtleObject\r\n            };\r\n        }\r\n    }\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.setEngine =\r\n    function(name, crypto, subtle)\r\n    {\r\n        /// <summary>Setting the global \"crypto engine\" parameters</summary>\r\n        /// <param name=\"name\" type=\"String\">Auxiliary name for \"crypto engine\"</param>\r\n        /// <param name=\"crypto\" type=\"Object\">Object handling all root cryptographic requests (in fact currently it must handle only \"getRandomValues\")</param>\r\n        /// <param name=\"subtle\" type=\"Object\">Object handling all main cryptographic requests</param>\r\n\r\n        local.engine = {\r\n            name: name,\r\n            crypto: crypto,\r\n            subtle: subtle\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getEngine =\r\n    function()\r\n    {\r\n        return local.engine;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of common functions \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.emptyObject =\r\n    function()\r\n    {\r\n        this.toJSON = function()\r\n        {\r\n            return {};\r\n        };\r\n        this.toSchema = function()\r\n        {\r\n            return {};\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getNames =\r\n    function(arg)\r\n    {\r\n        /// <summary>Get correct \"names\" array for all \"schema\" objects</summary>\r\n\r\n        var names = {};\r\n\r\n        if(arg instanceof Object)\r\n            names = (arg.names || {});\r\n\r\n        return names;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.inheriteObjectFields =\r\n    function(from)\r\n    {\r\n        for(var i in from.prototype)\r\n        {\r\n            if(typeof from.prototype[i] === \"function\")\r\n                continue;\r\n\r\n            this[i] = from.prototype[i];\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getUTCDate =\r\n    function(date)\r\n    {\r\n        /// <summary>Making UTC date from local date</summary>\r\n        /// <param name=\"date\" type=\"Date\">Date to convert from</param>\r\n\r\n        var current_date = date;\r\n        return new Date(current_date.getTime() + (current_date.getTimezoneOffset() * 60000));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.padNumber =\r\n    function(input_number, full_length)\r\n    {\r\n        var str = input_number.toString(10);\r\n        var dif = full_length - str.length;\r\n\r\n        var padding = new Array(dif);\r\n        for(var i = 0; i < dif; i++)\r\n            padding[i] = '0';\r\n\r\n        var padding_string = padding.join('');\r\n\r\n        return padding_string.concat(str);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getValue =\r\n    function(args, item, default_value)\r\n    {\r\n        if(item in args)\r\n            return args[item];\r\n        else\r\n            return default_value;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.isEqual_view =\r\n    function(input_view1, input_view2)\r\n    {\r\n        /// <summary>Compare two Uint8Arrays</summary>\r\n        /// <param name=\"input_view1\" type=\"Uint8Array\">First Uint8Array for comparision</param>\r\n        /// <param name=\"input_view2\" type=\"Uint8Array\">Second Uint8Array for comparision</param>\r\n\r\n        if(input_view1.length !== input_view2.length)\r\n            return false;\r\n\r\n        for(var i = 0; i < input_view1.length; i++)\r\n        {\r\n            if(input_view1[i] != input_view2[i])\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.isEqual_buffer =\r\n    function(input_buffer1, input_buffer2)\r\n    {\r\n        /// <summary>Compare two array buffers</summary>\r\n        /// <param name=\"input_buffer1\" type=\"ArrayBuffer\">First ArrayBuffer for comparision</param>\r\n        /// <param name=\"input_buffer2\" type=\"ArrayBuffer\">Second ArrayBuffer for comparision</param>\r\n\r\n        if(input_buffer1.byteLength != input_buffer2.byteLength)\r\n            return false;\r\n\r\n        var view1 = new Uint8Array(input_buffer1);\r\n        var view2 = new Uint8Array(input_buffer2);\r\n\r\n        return in_window.org.pkijs.isEqual_view(view1, view2);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.concat_buffers =\r\n    function(input_buf1, input_buf2)\r\n    {\r\n        /// <summary>Concatenate two ArrayBuffers</summary>\r\n        /// <param name=\"input_buf1\" type=\"ArrayBuffer\">First ArrayBuffer (first part of concatenated array)</param>\r\n        /// <param name=\"input_buf2\" type=\"ArrayBuffer\">Second ArrayBuffer (second part of concatenated array)</param>\r\n\r\n        var input_view1 = new Uint8Array(input_buf1);\r\n        var input_view2 = new Uint8Array(input_buf2);\r\n\r\n        var ret_buf = new ArrayBuffer(input_buf1.byteLength + input_buf2.byteLength);\r\n        var ret_view = new Uint8Array(ret_buf);\r\n\r\n        for(var i = 0; i < input_buf1.byteLength; i++)\r\n            ret_view[i] = input_view1[i];\r\n\r\n        for(var j = 0; j < input_buf2.byteLength; j++)\r\n            ret_view[input_buf1.byteLength + j] = input_view2[j];\r\n\r\n        return ret_buf;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.copyBuffer =\r\n    function(input_buffer)\r\n    {\r\n        var result = new ArrayBuffer(input_buffer.byteLength);\r\n\r\n        var resultView = new Uint8Array(result);\r\n        var inputView = new Uint8Array(input_buffer);\r\n\r\n        for(var i = 0; i < inputView.length; i++)\r\n            resultView[i] = inputView[i];\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getCrypto =\r\n    function()\r\n    {\r\n        var crypto_temp;\r\n\r\n        if(local.engine.subtle !== null)\r\n            crypto_temp = local.engine.subtle;\r\n\r\n        return crypto_temp;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.stringPrep =\r\n    function(input_string)\r\n    {\r\n        /// <summary>String preparation function. In a future here will be realization of algorithm from RFC4518.</summary>\r\n        /// <param name=\"input_string\" type=\"String\">JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string</param>\r\n        /// <returns type=\"String\">Formated string</returns>\r\n\r\n        var result = input_string.replace(/^\\s+|\\s+$/g, \"\"); // Trim input string\r\n        result = result.replace(/\\s+/g, \" \"); // Change all sequence of SPACE down to SPACE char\r\n        result = result.toLowerCase();\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.bufferToHexCodes =\r\n    function(input_buffer, input_offset, input_lenght)\r\n    {\r\n        var result = \"\";\r\n\r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_lenght);\r\n\r\n        for(var i = 0; i < int_buffer.length; i++)\r\n        {\r\n            var str = int_buffer[i].toString(16).toUpperCase();\r\n            result = result + ((str.length === 1) ? \"0\" : \"\") + str;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.bufferFromHexCodes =\r\n    function(hexString)\r\n    {\r\n        /// <summary>Create an ArrayBuffer from string having hexdecimal codes</summary>\r\n        /// <param name=\"hexString\" type=\"String\">String to create ArrayBuffer from</param>\r\n\r\n        // #region Initial variables \r\n        var stringLength = hexString.length;\r\n\r\n        var resultBuffer = new ArrayBuffer(stringLength >> 1);\r\n        var resultView = new Uint8Array(resultBuffer);\r\n\r\n        var hex_map = {};\r\n\r\n        hex_map['0'] = 0x00;\r\n        hex_map['1'] = 0x01;\r\n        hex_map['2'] = 0x02;\r\n        hex_map['3'] = 0x03;\r\n        hex_map['4'] = 0x04;\r\n        hex_map['5'] = 0x05;\r\n        hex_map['6'] = 0x06;\r\n        hex_map['7'] = 0x07;\r\n        hex_map['8'] = 0x08;\r\n        hex_map['9'] = 0x09;\r\n        hex_map['A'] = 0x0A;\r\n        hex_map['a'] = 0x0A;\r\n        hex_map['B'] = 0x0B;\r\n        hex_map['b'] = 0x0B;\r\n        hex_map['C'] = 0x0C;\r\n        hex_map['c'] = 0x0C;\r\n        hex_map['D'] = 0x0D;\r\n        hex_map['d'] = 0x0D;\r\n        hex_map['E'] = 0x0E;\r\n        hex_map['e'] = 0x0E;\r\n        hex_map['F'] = 0x0F;\r\n        hex_map['f'] = 0x0F;\r\n\r\n        var j = 0;\r\n        var temp = 0x00;\r\n        // #endregion \r\n\r\n        // #region Convert char-by-char \r\n        for(var i = 0; i < stringLength; i++)\r\n        {\r\n            if(!(i % 2))\r\n                temp = hex_map[hexString.charAt(i)] << 4;\r\n            else\r\n            {\r\n                temp |= hex_map[hexString.charAt(i)];\r\n\r\n                resultView[j] = temp;\r\n                j++;\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        return resultBuffer;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getRandomValues =\r\n    function(view)\r\n    {\r\n        /// <param name=\"view\" type=\"Uint8Array\">New array which gives a length for random value</param>\r\n\r\n        if(local.engine.crypto !== null)\r\n            return local.engine.crypto.getRandomValues(view);\r\n        else\r\n            throw new Error(\"No support for Web Cryptography API\");\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getAlgorithmParameters =\r\n    function(algorithmName, operation)\r\n    {\r\n        /// <param name=\"algorithmName\" type=\"String\">Algorithm name to get common parameters for</param>\r\n        /// <param name=\"operation\" type=\"String\">Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"</param>\r\n\r\n        var result = {\r\n            algorithm: {},\r\n            usages: []\r\n        };\r\n\r\n        switch(algorithmName.toUpperCase())\r\n        {\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSASSA-PKCS1-v1_5\",\r\n                                modulusLength: 2048,\r\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"verify\":\r\n                    case \"sign\":\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSASSA-PKCS1-v1_5\",\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n                        };\r\n                        break;\r\n                    case \"exportkey\":\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"RSASSA-PKCS1-v1_5\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"RSA-PSS\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"sign\":\r\n                    case \"verify\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\",\r\n                                hash: {\r\n                                    name: \"SHA-1\"\r\n                                },\r\n                                saltLength: 20\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\",\r\n                                modulusLength: 2048,\r\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n                                hash: {\r\n                                    name: \"SHA-1\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\",\r\n                                hash: {\r\n                                    name: \"SHA-1\"\r\n                                }\r\n                            },\r\n                            usages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n                        };\r\n                        break;\r\n                    case \"exportkey\":\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"RSA-OAEP\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"encrypt\":\r\n                    case \"decrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\"\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                        break;\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\",\r\n                                modulusLength: 2048,\r\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\",\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n                        };\r\n                        break;\r\n                    case \"exportkey\":\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"ECDSA\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDSA\",\r\n                                namedCurve: \"P-256\"\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDSA\",\r\n                                namedCurve: \"P-256\"\r\n                            },\r\n                            usages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n                        };\r\n                        break;\r\n                    case \"verify\":\r\n                    case \"sign\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDSA\",\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"ECDSA\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"ECDH\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"exportkey\":\r\n                    case \"importkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDH\",\r\n                                namedCurve: \"P-256\"\r\n                            },\r\n                            usages: [\"deriveKey\", \"deriveBits\"]\r\n                        };\r\n                        break;\r\n                    case \"derivekey\":\r\n                    case \"derivebits\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDH\",\r\n                                namedCurve: \"P-256\",\r\n                                public: [] // Must be a \"publicKey\"\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"ECDH\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-CTR\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CTR\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"decrypt\":\r\n                    case \"encrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CTR\",\r\n                                counter: new Uint8Array(16),\r\n                                length: 10\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-CTR\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-CBC\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CBC\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"decrypt\":\r\n                    case \"encrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CBC\",\r\n                                iv: in_window.org.pkijs.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-CBC\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-GCM\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-GCM\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"decrypt\":\r\n                    case \"encrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-GCM\",\r\n                                iv: in_window.org.pkijs.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-GCM\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-KW\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                    case \"wrapkey\":\r\n                    case \"unwrapkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-KW\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-KW\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"HMAC\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"sign\":\r\n                    case \"verify\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"HMAC\"\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"HMAC\",\r\n                                length: 32,\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"HMAC\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"HKDF\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"derivekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"HKDF\",\r\n                                hash: \"SHA-256\",\r\n                                salt: new Uint8Array(),\r\n                                info: new Uint8Array()\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"HKDF\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"PBKDF2\":\r\n                switch(operation.toLowerCase())\r\n                {\r\n                    case \"derivekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"PBKDF2\",\r\n                                hash: { name: \"SHA-256\" },\r\n                                salt: new Uint8Array(),\r\n                                iterations: 1000\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"PBKDF2\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            default:\r\n                ;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getOIDByAlgorithm =\r\n    function(algorithm)\r\n    {\r\n        /// <summary>Get OID for each specific WebCrypto algorithm</summary>\r\n        /// <param name=\"algorithm\" type=\"Object\">WebCrypto algorithm</param>\r\n\r\n        var result = \"\";\r\n\r\n        switch(algorithm.name.toUpperCase())\r\n        {\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                switch(algorithm.hash.name.toUpperCase())\r\n                {\r\n                    case \"SHA-1\":\r\n                        result = \"1.2.840.113549.1.1.5\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.2.840.113549.1.1.11\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.2.840.113549.1.1.12\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.2.840.113549.1.1.13\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"RSA-PSS\":\r\n                result = \"1.2.840.113549.1.1.10\";\r\n                break;\r\n            case \"RSA-OAEP\":\r\n                result = \"1.2.840.113549.1.1.7\";\r\n                break;\r\n            case \"ECDSA\":\r\n                switch(algorithm.hash.name.toUpperCase())\r\n                {\r\n                    case \"SHA-1\":\r\n                        result = \"1.2.840.10045.4.1\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.2.840.10045.4.3.2\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.2.840.10045.4.3.3\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.2.840.10045.4.3.4\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"ECDH\":\r\n                switch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n                {\r\n                    case \"SHA-1\":\r\n                        result = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme \r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"AES-CTR\":\r\n                break;\r\n            case \"AES-CBC\":\r\n                switch(algorithm.length)\r\n                {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.2\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.22\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.42\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"AES-CMAC\":\r\n                break;\r\n            case \"AES-GCM\":\r\n                switch(algorithm.length)\r\n                {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.6\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.26\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.46\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"AES-CFB\":\r\n                switch(algorithm.length)\r\n                {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.4\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.24\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.44\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"AES-KW\":\r\n                switch(algorithm.length)\r\n                {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.5\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.25\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.45\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"HMAC\":\r\n                switch(algorithm.hash.name.toUpperCase())\r\n                {\r\n                    case \"SHA-1\":\r\n                        result = \"1.2.840.113549.2.7\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.2.840.113549.2.9\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.2.840.113549.2.10\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.2.840.113549.2.11\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"DH\":\r\n                result = \"1.2.840.113549.1.9.16.3.5\";\r\n                break;\r\n            case \"SHA-1\":\r\n                result = \"1.3.14.3.2.26\";\r\n                break;\r\n            case \"SHA-256\":\r\n                result = \"2.16.840.1.101.3.4.2.1\";\r\n                break;\r\n            case \"SHA-384\":\r\n                result = \"2.16.840.1.101.3.4.2.2\";\r\n                break;\r\n            case \"SHA-512\":\r\n                result = \"2.16.840.1.101.3.4.2.3\";\r\n                break;\r\n            case \"CONCAT\":\r\n                break;\r\n            case \"HKDF\":\r\n                break;\r\n            case \"PBKDF2\":\r\n                result = \"1.2.840.113549.1.5.12\";\r\n                break;\r\n            // #region Special case - OIDs for ECC curves \r\n            case \"P-256\":\r\n                result = \"1.2.840.10045.3.1.7\";\r\n                break;\r\n            case \"P-384\":\r\n                result = \"1.3.132.0.34\";\r\n                break;\r\n            case \"P-521\":\r\n                result = \"1.3.132.0.35\";\r\n                break;\r\n            // #endregion \r\n            default:;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getAlgorithmByOID =\r\n    function(oid)\r\n    {\r\n        /// <summary>Get WebCrypto algorithm by wel-known OID</summary>\r\n        /// <param name=\"oid\" type=\"String\">Wel-known OID to search for</param>\r\n\r\n        var result = {};\r\n\r\n        switch(oid)\r\n        {\r\n            case \"1.2.840.113549.1.1.5\":\r\n                result = {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-1\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.1.11\":\r\n                result = {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-256\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.1.12\":\r\n                result = {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-384\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.1.13\":\r\n                result = {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-512\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.1.10\":\r\n                result = {\r\n                    name: \"RSA-PSS\"\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.1.7\":\r\n                result = {\r\n                    name: \"RSA-OAEP\"\r\n                };\r\n                break;\r\n            case \"1.2.840.10045.4.1\":\r\n                result = {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-1\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.10045.4.3.2\":\r\n                result = {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-256\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.10045.4.3.3\":\r\n                result = {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-384\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.10045.4.3.4\":\r\n                result = {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-512\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.3.133.16.840.63.0.2\":\r\n                result = {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-1\"\r\n                };\r\n                break;\r\n            case \"1.3.132.1.11.1\":\r\n                result = {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-256\"\r\n                };\r\n                break;\r\n            case \"1.3.132.1.11.2\":\r\n                result = {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-384\"\r\n                };\r\n                break;\r\n            case \"1.3.132.1.11.3\":\r\n                result = {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-512\"\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.2\":\r\n                result = {\r\n                    name: \"AES-CBC\",\r\n                    length: 128\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.22\":\r\n                result = {\r\n                    name: \"AES-CBC\",\r\n                    length: 192\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.42\":\r\n                result = {\r\n                    name: \"AES-CBC\",\r\n                    length: 256\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.6\":\r\n                result = {\r\n                    name: \"AES-GCM\",\r\n                    length: 128\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.26\":\r\n                result = {\r\n                    name: \"AES-GCM\",\r\n                    length: 192\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.46\":\r\n                result = {\r\n                    name: \"AES-GCM\",\r\n                    length: 256\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.4\":\r\n                result = {\r\n                    name: \"AES-CFB\",\r\n                    length: 128\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.24\":\r\n                result = {\r\n                    name: \"AES-CFB\",\r\n                    length: 192\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.44\":\r\n                result = {\r\n                    name: \"AES-CFB\",\r\n                    length: 256\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.5\":\r\n                result = {\r\n                    name: \"AES-KW\",\r\n                    length: 128\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.25\":\r\n                result = {\r\n                    name: \"AES-KW\",\r\n                    length: 192\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.45\":\r\n                result = {\r\n                    name: \"AES-KW\",\r\n                    length: 256\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.2.7\":\r\n                result = {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-1\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.2.9\":\r\n                result = {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-256\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.2.10\":\r\n                result = {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-384\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.2.11\":\r\n                result = {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-512\"\r\n                    }\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.9.16.3.5\":\r\n                result = {\r\n                    name: \"DH\"\r\n                };\r\n                break;\r\n            case \"1.3.14.3.2.26\":\r\n                result = {\r\n                    name: \"SHA-1\"\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.2.1\":\r\n                result = {\r\n                    name: \"SHA-256\"\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.2.2\":\r\n                result = {\r\n                    name: \"SHA-384\"\r\n                };\r\n                break;\r\n            case \"2.16.840.1.101.3.4.2.3\":\r\n                result = {\r\n                    name: \"SHA-512\"\r\n                };\r\n                break;\r\n            case \"1.2.840.113549.1.5.12\":\r\n                result = {\r\n                    name: \"PBKDF2\"\r\n                };\r\n                break;\r\n            // #region Special case - OIDs for ECC curves \r\n            case \"1.2.840.10045.3.1.7\":\r\n                result = {\r\n                    name: \"P-256\",\r\n                    size: 32\r\n                };\r\n                break;\r\n            case \"1.3.132.0.34\":\r\n                result = {\r\n                    name: \"P-384\",\r\n                    size: 48\r\n                };\r\n                break;\r\n            case \"1.3.132.0.35\":\r\n                result = {\r\n                    name: \"P-521\",\r\n                    size: 66\r\n                };\r\n                break;\r\n            // #endregion \r\n            default:;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getHashAlgorithm =\r\n    function(signatureAlgorithm)\r\n    {\r\n        /// <summary>Getting hash algorithm by signature algorithm</summary>\r\n        /// <param name=\"signatureAlgorithm\" type=\"in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER\">Signature algorithm</param>\r\n\r\n        var result = \"\";\r\n\r\n        switch(signatureAlgorithm.algorithm_id)\r\n        {\r\n            case \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n            case \"1.2.840.113549.1.1.5\":\r\n                result = \"SHA-1\";\r\n                break;\r\n            case \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n            case \"1.2.840.113549.1.1.11\":\r\n                result = \"SHA-256\";\r\n                break;\r\n            case \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n            case \"1.2.840.113549.1.1.12\":\r\n                result = \"SHA-384\";\r\n                break;\r\n            case \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n            case \"1.2.840.113549.1.1.13\":\r\n                result = \"SHA-512\";\r\n                break;\r\n            case \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n                {\r\n                    var params;\r\n\r\n                    try\r\n                    {\r\n                        params = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params({ schema: signatureAlgorithm.algorithm_params });\r\n                        if(\"hashAlgorithm\" in params)\r\n                        {\r\n                            var algorithm = in_window.org.pkijs.getAlgorithmByOID(params.hashAlgorithm.algorithm_id);\r\n                            if((\"name\" in algorithm) === false)\r\n                                return \"\";\r\n\r\n                            result = algorithm.name;\r\n                        }\r\n                        else\r\n                            result = \"SHA-1\";\r\n                    }\r\n                    catch(ex)\r\n                    {\r\n                    }\r\n                }\r\n                break;\r\n            default:;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.createCMSECDSASignature =\r\n    function(signatureBuffer)\r\n    {\r\n        // #region Initial check for correct length \r\n        if((signatureBuffer.byteLength % 2) != 0)\r\n            return new ArrayBuffer(0);\r\n        // #endregion \r\n\r\n        // #region Initial variables \r\n        var i = 0;\r\n        var length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\r\n\r\n        var signatureView = new Uint8Array(signatureBuffer);\r\n\r\n        var r_buffer = new ArrayBuffer(length);\r\n        var r_view = new Uint8Array(r_buffer);\r\n        r_view.set(new Uint8Array(signatureBuffer, 0, length));\r\n        var r_corrected_buffer;\r\n        var r_corrected_view;\r\n\r\n        var s_buffer = new ArrayBuffer(length);\r\n        var s_view = new Uint8Array(s_buffer);\r\n        s_view.set(new Uint8Array(signatureBuffer, length, length));\r\n        var s_corrected_buffer;\r\n        var s_corrected_view;\r\n        // #endregion   \r\n\r\n        // #region Get \"r\" part of ECDSA signature \r\n        switch(true)\r\n        {\r\n            case ((r_view[0] & 0x80) !== 0):\r\n                r_corrected_buffer = new ArrayBuffer(length + 1);\r\n                r_corrected_view = new Uint8Array(r_corrected_buffer);\r\n\r\n                r_corrected_view[0] = 0x00;\r\n\r\n                r_corrected_view.set(r_view, 1);\r\n                break;\r\n            case ((r_view[0] === 0x00) && ((r_view[1] & 0x80) === 0)):\r\n                r_corrected_buffer = new ArrayBuffer(length - 1);\r\n                r_corrected_view = new Uint8Array(r_corrected_buffer);\r\n\r\n                r_corrected_view.set(new Uint8Array(signatureBuffer, 1, length - 1));\r\n                break;\r\n            default:\r\n                r_corrected_buffer = r_buffer;\r\n                r_corrected_view = r_view;\r\n        }\r\n        // #endregion   \r\n\r\n        // #region Get \"s\" part of ECDSA signature \r\n        switch(true)\r\n        {\r\n            case ((s_view[0] & 0x80) !== 0):\r\n                s_corrected_buffer = new ArrayBuffer(length + 1);\r\n                s_corrected_view = new Uint8Array(s_corrected_buffer);\r\n\r\n                s_corrected_view[0] = 0x00;\r\n\r\n                s_corrected_view.set(s_view, 1);\r\n                break;\r\n            case ((s_view[0] === 0x00) && ((s_view[1] & 0x80) === 0)):\r\n                s_corrected_buffer = new ArrayBuffer(length - 1);\r\n                s_corrected_view = new Uint8Array(s_corrected_buffer);\r\n\r\n                s_corrected_view.set(new Uint8Array(signatureBuffer, 1, length - 1));\r\n                break;\r\n            default:\r\n                s_corrected_buffer = s_buffer;\r\n                s_corrected_view = s_view;\r\n        }\r\n        // #endregion   \r\n\r\n        // #region Create ASN.1 structure of CMS ECDSA signature \r\n        var r_integer = new in_window.org.pkijs.asn1.INTEGER();\r\n        r_integer.value_block.is_hex_only = true;\r\n        r_integer.value_block.value_hex = in_window.org.pkijs.copyBuffer(r_corrected_buffer);\r\n\r\n        var s_integer = new in_window.org.pkijs.asn1.INTEGER();\r\n        s_integer.value_block.is_hex_only = true;\r\n        s_integer.value_block.value_hex = in_window.org.pkijs.copyBuffer(s_corrected_buffer);\r\n\r\n        var asn1 = new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                r_integer,\r\n                s_integer\r\n            ]\r\n        });\r\n        // #endregion   \r\n\r\n        return asn1.toBER(false);\r\n    }\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.createECDSASignatureFromCMS =\r\n    function(cmsSignature)\r\n    {\r\n        // #region Initial variables \r\n        var sBuffer;\r\n        var rBuffer;\r\n        // #endregion \r\n\r\n        // #region Check input variables \r\n        if((cmsSignature instanceof in_window.org.pkijs.asn1.SEQUENCE) === false)\r\n            return new ArrayBuffer(0);\r\n\r\n        if(cmsSignature.value_block.value.length !== 2)\r\n            return new ArrayBuffer(0);\r\n\r\n        if((cmsSignature.value_block.value[0] instanceof in_window.org.pkijs.asn1.INTEGER) === false)\r\n            return new ArrayBuffer(0);\r\n\r\n        if((cmsSignature.value_block.value[1] instanceof in_window.org.pkijs.asn1.INTEGER) === false)\r\n            return new ArrayBuffer(0);\r\n        // #endregion \r\n\r\n        // #region Aux functions \r\n        function transformINTEGER(integer)\r\n        {\r\n            var view = new Uint8Array(integer.value_block.value_hex);\r\n\r\n            switch(integer.value_block.value_hex.byteLength)\r\n            {\r\n                case 32:\r\n                case 48:\r\n                case 66:\r\n                    return integer.value_block.value_hex;\r\n                    break;\r\n                case 33:\r\n                case 49:\r\n                case 67:\r\n                    return (view.slice(1)).buffer;\r\n                    break;\r\n                case 31:\r\n                case 47:\r\n                case 65:\r\n                    {\r\n                        var updatedBuffer = new ArrayBuffer(integer.value_block.value_hex.byteLength + 1);\r\n                        var updatedView = new Uint8Array(updatedBuffer);\r\n\r\n                        updatedView.set(view, 1);\r\n\r\n                        return updatedBuffer;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return new ArrayBuffer(0);\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        rBuffer = transformINTEGER(cmsSignature.value_block.value[0]);\r\n        sBuffer = transformINTEGER(cmsSignature.value_block.value[1]);\r\n\r\n        return in_window.org.pkijs.concat_buffers(rBuffer, sBuffer);\r\n    }\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getEncryptionAlgorithm =\r\n    function(algorithm)\r\n    {\r\n        /// <summary>Get encryption algorithm OID by WebCrypto algorithm's object</summary>\r\n        /// <param name=\"algorithm\" type=\"WebCryptoAlgorithm\">WebCrypto algorithm object</param>\r\n\r\n        var result = \"\";\r\n\r\n        switch(algorithm.name.toUpperCase())\r\n        {\r\n            case \"AES-CBC\":\r\n                switch(algorithm.length)\r\n                {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.2\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.22\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.42\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            case \"AES-GCM\":\r\n                switch(algorithm.length)\r\n                {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.6\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.26\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.46\";\r\n                        break;\r\n                    default:;\r\n                }\r\n                break;\r\n            default:;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.getAlgorithmByEncryptionOID =\r\n    function(oid)\r\n    {\r\n        /// <summary>Get encryption algorithm name by OID</summary>\r\n        /// <param name=\"oid\" type=\"String\">OID of encryption algorithm</param>\r\n\r\n        var result = \"\";\r\n\r\n        switch(oid)\r\n        {\r\n            case \"2.16.840.1.101.3.4.1.2\":\r\n            case \"2.16.840.1.101.3.4.1.22\":\r\n            case \"2.16.840.1.101.3.4.1.42\":\r\n                result = \"AES-CBC\";\r\n                break;\r\n            case \"2.16.840.1.101.3.4.1.6\":\r\n            case \"2.16.840.1.101.3.4.1.26\":\r\n            case \"2.16.840.1.101.3.4.1.46\":\r\n                result = \"AES-GCM\";\r\n                break;\r\n            default:;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n}\r\n)(typeof exports !== \"undefined\" ? exports : window);\r\n\r\n//asn1.js\r\n/*\r\n * Copyright (c) 2014, GMO GlobalSign\r\n * Copyright (c) 2015, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2014-2015, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, \r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors \r\n *    may be used to endorse or promote products derived from this software without \r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT \r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \r\n * OF SUCH DAMAGE. \r\n *\r\n */\r\n(\r\nfunction(in_window)\r\n{\r\n    //**************************************************************************************\r\n    // #region Declaration of global variables \r\n    //**************************************************************************************\r\n    // #region \"org\" namespace \r\n    if(typeof in_window.org === \"undefined\")\r\n        in_window.org = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org !== \"object\")\r\n            throw new Error(\"Name org already exists and it's not an object\");\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs\" namespace \r\n    if(typeof in_window.org.pkijs === \"undefined\")\r\n        in_window.org.pkijs = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs !== \"object\")\r\n            throw new Error(\"Name org.pkijs already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs.asn1\" namespace \r\n    if(typeof in_window.org.pkijs.asn1 === \"undefined\")\r\n        in_window.org.pkijs.asn1 = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs.asn1 !== \"object\")\r\n            throw new Error(\"Name org.pkijs.asn1 already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs.asn1));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"local\" namespace \r\n    var local = {};\r\n    // #endregion   \r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Aux-functions \r\n    //**************************************************************************************\r\n    function util_frombase(input_buffer, input_base)\r\n    {\r\n        /// <summary>Convert number from 2^base to 2^10</summary>\r\n        /// <param name=\"input_buffer\" type=\"Uint8Array\">Array of bytes representing the number to convert</param>\r\n        /// <param name=\"input_base\" type=\"Number\">The base of initial number</param>\r\n\r\n        var result = 0; \r\n\r\n        for(var i = (input_buffer.length - 1); i >= 0; i-- )\r\n            result += input_buffer[(input_buffer.length - 1) - i] * Math.pow(2, input_base * i);\r\n\r\n        return result;\r\n    }\r\n    //**************************************************************************************\r\n    function util_tobase(value, base, reserved)\r\n    {\r\n        /// <summary>Convert number from 2^10 to 2^base</summary>\r\n        /// <param name=\"value\" type=\"Number\">The number to convert</param>\r\n        /// <param name=\"base\" type=\"Number\">The base for 2^base</param>\r\n        /// <param name=\"reserved\" type=\"Number\">Pre-defined number of bytes in output array (-1 = limited by function itself)</param>\r\n\r\n        reserved = reserved || (-1);\r\n\r\n        var result = 0;\r\n        var biggest = Math.pow(2, base);\r\n\r\n        for(var i = 1; i < 8; i++)\r\n        {\r\n            if(value < biggest)\r\n            {\r\n                var ret_buf;\r\n\r\n                if( reserved < 0 )\r\n                {\r\n                    ret_buf = new ArrayBuffer(i);\r\n                    result = i;\r\n                }\r\n                else\r\n                {\r\n                    if(reserved < i)\r\n                        return (new ArrayBuffer(0));\r\n\r\n                    ret_buf = new ArrayBuffer(reserved);\r\n\r\n                    result = reserved;\r\n                }\r\n\r\n                var ret_view = new Uint8Array(ret_buf);\r\n\r\n                for(var j = ( i - 1 ); j >= 0; j-- )\r\n                {\r\n                    var basis = Math.pow(2, j * base);\r\n\r\n                    ret_view[ result - j - 1 ] = Math.floor( value / basis );\r\n                    value -= ( ret_view[ result - j - 1 ] ) * basis;\r\n                }\r\n\r\n                return ret_buf;\r\n            }\r\n\r\n            biggest *= Math.pow(2, base);\r\n        }\r\n    }\r\n    //**************************************************************************************\r\n    function util_encode_tc(value)\r\n    {\r\n        /// <summary>Encode integer value to \"two complement\" format</summary>\r\n        /// <param name=\"value\" type=\"Number\">Value to encode</param>\r\n\r\n        var mod_value = (value < 0) ? (value * (-1)) : value;\r\n        var big_int = 128;\r\n\r\n        for(var i = 1; i < 8; i++) \r\n        {\r\n            if( mod_value <= big_int )\r\n            {\r\n                if( value < 0 )\r\n                {\r\n                    var small_int = big_int - mod_value;\r\n\r\n                    var ret_buf = util_tobase( small_int, 8, i );\r\n                    var ret_view = new Uint8Array(ret_buf);\r\n\r\n                    ret_view[ 0 ] |= 0x80;\r\n\r\n                    return ret_buf;\r\n                }\r\n                else\r\n                {\r\n                    var ret_buf = util_tobase( mod_value, 8, i );\r\n                    var ret_view = new Uint8Array(ret_buf);\r\n\r\n                    if( ret_view[ 0 ] & 0x80 )\r\n                    {\r\n                        var temp_buf = util_copybuf(ret_buf);\r\n                        var temp_view = new Uint8Array(temp_buf);\r\n\r\n                        ret_buf = new ArrayBuffer( ret_buf.byteLength + 1 );\r\n                        ret_view = new Uint8Array(ret_buf);\r\n\r\n                        for(var k = 0; k < temp_buf.byteLength; k++)\r\n                            ret_view[k + 1] = temp_view[k];\r\n\r\n                        ret_view[0] = 0x00;\r\n                    }\r\n\r\n                    return ret_buf;\r\n                }\r\n            }\r\n\r\n            big_int *= Math.pow(2, 8);\r\n        }\r\n\r\n        return (new ArrayBuffer(0));\r\n    }\r\n    //**************************************************************************************\r\n    function util_decode_tc()\r\n    {\r\n        /// <summary>Decoding of \"two complement\" values</summary>\r\n        /// <remarks>The function must be called in scope of instance of \"hex_block\" class (\"value_hex\" and \"warnings\" properties must be present)</remarks>\r\n\r\n        var buf = new Uint8Array(this.value_hex);\r\n\r\n        if(this.value_hex.byteLength >= 2)\r\n        {\r\n            var condition_1 = (buf[0] == 0xFF) && (buf[1] & 0x80);\r\n            var condition_2 = (buf[0] == 0x00) && ((buf[1] & 0x80) == 0x00);\r\n\r\n            if(condition_1 || condition_2)\r\n                this.warnings.push(\"Needlessly long format\");\r\n        }\r\n\r\n        // #region Create big part of the integer\r\n        var big_int_buffer = new ArrayBuffer(this.value_hex.byteLength);\r\n        var big_int_view = new Uint8Array(big_int_buffer);\r\n        for(var i = 0; i < this.value_hex.byteLength; i++)\r\n            big_int_view[i] = 0;\r\n\r\n        big_int_view[0] = (buf[0] & 0x80); // mask only the biggest bit\r\n\r\n        var big_int = util_frombase(big_int_view, 8);\r\n        // #endregion   \r\n\r\n        // #region Create small part of the integer \r\n        var small_int_buffer = new ArrayBuffer(this.value_hex.byteLength);\r\n        var small_int_view = new Uint8Array(small_int_buffer);\r\n        for(var j = 0; j < this.value_hex.byteLength; j++)\r\n            small_int_view[j] = buf[j];\r\n\r\n        small_int_view[0] &= 0x7F; // mask biggest bit\r\n\r\n        var small_int = util_frombase(small_int_view, 8);\r\n        // #endregion \r\n\r\n        return (small_int - big_int);\r\n    }\r\n    //**************************************************************************************\r\n    function util_copybuf(input_buffer)\r\n    {\r\n        /// <summary>Creating a copy of input ArrayBuffer</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ArrayBuffer for coping</param>\r\n\r\n        if(check_buffer_params(input_buffer, 0, input_buffer.byteLength) === false)\r\n            return (new ArrayBuffer(0));\r\n\r\n        var input_view = new Uint8Array(input_buffer);\r\n\r\n        var ret_buf = new ArrayBuffer(input_buffer.byteLength);\r\n        var ret_view = new Uint8Array(ret_buf);\r\n\r\n        for(var i = 0; i < input_buffer.byteLength; i++)\r\n            ret_view[i] = input_view[i];\r\n\r\n        return ret_buf;\r\n    }\r\n    //**************************************************************************************\r\n    function util_copybuf_offset(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Creating a copy of input ArrayBuffer</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ArrayBuffer for coping</param>\r\n\r\n        if(check_buffer_params(input_buffer, input_offset, input_length) === false)\r\n            return (new ArrayBuffer(0));\r\n\r\n        var input_view = new Uint8Array(input_buffer, input_offset, input_length);\r\n\r\n        var ret_buf = new ArrayBuffer(input_length);\r\n        var ret_view = new Uint8Array(ret_buf);\r\n\r\n        for(var i = 0; i < input_length; i++)\r\n            ret_view[i] = input_view[i];\r\n\r\n        return ret_buf;\r\n    }\r\n    //**************************************************************************************\r\n    function util_concatbuf(input_buf1, input_buf2)\r\n    {\r\n        /// <summary>Concatenate two ArrayBuffers</summary>\r\n        /// <param name=\"input_buf1\" type=\"ArrayBuffer\">First ArrayBuffer (first part of concatenated array)</param>\r\n        /// <param name=\"input_buf2\" type=\"ArrayBuffer\">Second ArrayBuffer (second part of concatenated array)</param>\r\n\r\n        var input_view1 = new Uint8Array(input_buf1);\r\n        var input_view2 = new Uint8Array(input_buf2);\r\n\r\n        var ret_buf = new ArrayBuffer(input_buf1.byteLength + input_buf2.byteLength);\r\n        var ret_view = new Uint8Array(ret_buf);\r\n\r\n        for(var i = 0; i < input_buf1.byteLength; i++)\r\n            ret_view[i] = input_view1[i];\r\n\r\n        for(var j = 0; j < input_buf2.byteLength; j++)\r\n            ret_view[input_buf1.byteLength + j] = input_view2[j];\r\n\r\n        return ret_buf;\r\n    }\r\n    //**************************************************************************************\r\n    function check_buffer_params(input_buffer, input_offset, input_length)\r\n    {\r\n        if((input_buffer instanceof ArrayBuffer) === false)\r\n        {\r\n            this.error = \"Wrong parameter: input_buffer must be \\\"ArrayBuffer\\\"\";\r\n            return false;\r\n        }\r\n\r\n        if(input_buffer.byteLength === 0)\r\n        {\r\n            this.error = \"Wrong parameter: input_buffer has zero length\";\r\n            return false;\r\n        }\r\n\r\n        if(input_offset < 0)\r\n        {\r\n            this.error = \"Wrong parameter: input_offset less than zero\";\r\n            return false;\r\n        }\r\n\r\n        if(input_length < 0)\r\n        {\r\n            this.error = \"Wrong parameter: input_length less than zero\";\r\n            return false;\r\n        }\r\n\r\n        if((input_buffer.byteLength - input_offset - input_length) < 0)\r\n        {\r\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    //**************************************************************************************\r\n    function to_hex_codes(input_buffer, input_offset, input_lenght)\r\n    {\r\n        if(check_buffer_params(input_buffer, input_offset, input_lenght) === false)\r\n            return \"\";\r\n\r\n        var result = \"\";\r\n\r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_lenght);\r\n        \r\n        for(var i = 0; i < int_buffer.length; i++)\r\n        {\r\n            var str = int_buffer[i].toString(16).toUpperCase();\r\n            result = result + ((str.length === 1) ? \" 0\" : \" \") + str;\r\n        }\r\n\r\n        return result;\r\n    }\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of base block class \r\n    //**************************************************************************************\r\n    local.base_block =\r\n    function()\r\n    {\r\n        /// <summary>General class of all ASN.1 blocks</summary>\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.block_length = in_window.org.pkijs.getValue(arguments[0], \"block_length\", 0);\r\n            this.error = in_window.org.pkijs.getValue(arguments[0], \"error\", new String());\r\n            this.warnings = in_window.org.pkijs.getValue(arguments[0], \"warnings\", new Array());\r\n            if(\"value_before_decode\" in arguments[0])\r\n                this.value_before_decode = util_copybuf(arguments[0].value_before_decode);\r\n            else\r\n                this.value_before_decode = new ArrayBuffer(0);\r\n        }\r\n        else\r\n        {\r\n            this.block_length = 0;\r\n            this.error = new String();\r\n            this.warnings = new Array();\r\n            /// <field>Copy of the value of incoming ArrayBuffer done before decoding</field>\r\n            this.value_before_decode = new ArrayBuffer(0);\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.base_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"base_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.base_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        return {\r\n            block_name: local.base_block.prototype.block_name.call(this),\r\n            block_length: this.block_length,\r\n            error: this.error,\r\n            warnings: this.warnings,\r\n            value_before_decode: in_window.org.pkijs.bufferToHexCodes(this.value_before_decode, 0, this.value_before_decode.byteLength)\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of hex block class \r\n    //**************************************************************************************\r\n    local.hex_block =\r\n    function()\r\n    {\r\n        /// <summary>Descendant of \"base_block\" with internal ArrayBuffer. Need to have it in case it is not possible to store ASN.1 value in native formats</summary>\r\n\r\n        local.base_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.is_hex_only = in_window.org.pkijs.getValue(arguments[0], \"is_hex_only\", false);\r\n            if(\"value_hex\" in arguments[0])\r\n                this.value_hex = util_copybuf(arguments[0].value_hex);\r\n            else\r\n                this.value_hex = new ArrayBuffer(0);\r\n        }\r\n        else\r\n        {\r\n            this.is_hex_only = false;\r\n            this.value_hex = new ArrayBuffer(0);\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.hex_block.prototype = new local.base_block();\r\n    local.hex_block.constructor = local.hex_block;\r\n    //**************************************************************************************\r\n    local.hex_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"hex_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.hex_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(int_buffer.length == 0)\r\n        {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return input_offset;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Copy input buffer to internal buffer \r\n        this.value_hex = new ArrayBuffer(input_length);\r\n        var view = new Uint8Array(this.value_hex);\r\n\r\n        for(var i = 0; i < int_buffer.length; i++)\r\n            view[i] = int_buffer[i];\r\n        // #endregion \r\n\r\n        this.block_length = input_length;\r\n\r\n        return (input_offset + input_length);\r\n    };\r\n    //**************************************************************************************\r\n    local.hex_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        if(this.is_hex_only !== true)\r\n        {\r\n            this.error = \"Flag \\\"is_hex_only\\\" is not set, abort\";\r\n            return (new ArrayBuffer(0));\r\n        }\r\n\r\n        var ret_buf = new ArrayBuffer(this.value_hex.byteLength);\r\n\r\n        if(size_only === true)\r\n            return ret_buf;\r\n\r\n        var ret_view = new Uint8Array(ret_buf);\r\n        var cur_view = new Uint8Array(this.value_hex);\r\n\r\n        for(var i = 0; i < cur_view.length; i++)\r\n            ret_view[i] = cur_view[i];\r\n\r\n        return ret_buf;\r\n    };\r\n    //**************************************************************************************\r\n    local.hex_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.base_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.hex_block.prototype.block_name.call(this);\r\n        _object.is_hex_only = this.is_hex_only;\r\n        _object.value_hex = in_window.org.pkijs.bufferToHexCodes(this.value_hex, 0, this.value_hex.byteLength);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of identification block class \r\n    //**************************************************************************************\r\n    local.identification_block =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 \"identification block\"</summary>\r\n\r\n        local.hex_block.call(this, arguments[0]);\r\n\r\n        this.tag_class = (-1);\r\n        this.tag_number = (-1);\r\n        this.is_constructed = false;\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"id_block\" in arguments[0])\r\n            {\r\n                // #region Properties from hex_block class \r\n                this.is_hex_only = in_window.org.pkijs.getValue(arguments[0].id_block, \"is_hex_only\", false);\r\n                this.value_hex = in_window.org.pkijs.getValue(arguments[0].id_block, \"value_hex\", new ArrayBuffer(0));\r\n                // #endregion   \r\n\r\n                this.tag_class = in_window.org.pkijs.getValue(arguments[0].id_block, \"tag_class\", (-1));\r\n                this.tag_number = in_window.org.pkijs.getValue(arguments[0].id_block, \"tag_number\", (-1));\r\n                this.is_constructed = in_window.org.pkijs.getValue(arguments[0].id_block, \"is_constructed\", false);\r\n            }\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.identification_block.prototype = new local.hex_block();\r\n    local.identification_block.constructor = local.identification_block;\r\n    //**************************************************************************************\r\n    local.identification_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"identification_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.identification_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        var first_octet = 0;\r\n\r\n        switch(this.tag_class)\r\n        {\r\n            case 1:\r\n                first_octet |= 0x00; // UNIVERSAL\r\n                break;\r\n            case 2:\r\n                first_octet |= 0x40; // APPLICATION\r\n                break;\r\n            case 3:\r\n                first_octet |= 0x80; // CONTEXT-SPECIFIC\r\n                break;\r\n            case 4:\r\n                first_octet |= 0xC0; // PRIVATE\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return (new ArrayBuffer(0));\r\n        }\r\n\r\n        if(this.is_constructed)\r\n            first_octet |= 0x20;\r\n\r\n        if((this.tag_number < 31) && (!this.is_hex_only))\r\n        {\r\n            var ret_buf = new ArrayBuffer(1);\r\n            var ret_view = new Uint8Array(ret_buf);\r\n\r\n            if(!size_only)\r\n            {\r\n                var number = this.tag_number;\r\n                number &= 0x1F;\r\n                first_octet |= number;\r\n\r\n                ret_view[0] = first_octet;\r\n            }\r\n\r\n            return ret_buf;\r\n        }\r\n        else\r\n        {\r\n            if(this.is_hex_only === false)\r\n            {\r\n                var encoded_buf = util_tobase(this.tag_number, 7);\r\n                var encoded_view = new Uint8Array(encoded_buf);\r\n                var size = encoded_buf.byteLength;\r\n\r\n                var ret_buf = new ArrayBuffer(size + 1);\r\n                var ret_view = new Uint8Array(ret_buf);\r\n\r\n                ret_view[0] = (first_octet | 0x1F);\r\n\r\n                if(!size_only)\r\n                {\r\n                    for(var i = 0; i < (size - 1) ; i++)\r\n                        ret_view[i + 1] = encoded_view[i] | 0x80;\r\n\r\n                    ret_view[size] = encoded_view[size - 1];\r\n                }\r\n\r\n                return ret_buf;\r\n            }\r\n            else\r\n            {\r\n                var ret_buf = new ArrayBuffer(this.value_hex.byteLength + 1);\r\n                var ret_view = new Uint8Array(ret_buf);\r\n\r\n                ret_view[0] = (first_octet | 0x1F);\r\n\r\n                if(size_only === false)\r\n                {\r\n                    var cur_view = new Uint8Array(this.value_hex);\r\n\r\n                    for(var i = 0; i < (cur_view.length - 1); i++)\r\n                        ret_view[i + 1] = cur_view[i] | 0x80;\r\n\r\n                    ret_view[this.value_hex.byteLength] = cur_view[cur_view.length - 1];\r\n                }\r\n\r\n                return ret_buf;\r\n            }\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.identification_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(int_buffer.length == 0)\r\n        {\r\n            this.error = \"Zero buffer length\";\r\n            return (-1);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Find tag class \r\n        var tag_class_mask = int_buffer[0] & 0xC0;\r\n\r\n        switch(tag_class_mask)\r\n        {\r\n            case 0x00:\r\n                this.tag_class = (1); // UNIVERSAL\r\n                break;\r\n            case 0x40:\r\n                this.tag_class = (2); // APPLICATION\r\n                break;\r\n            case 0x80:\r\n                this.tag_class = (3); // CONTEXT-SPECIFIC\r\n                break;\r\n            case 0xC0:\r\n                this.tag_class = (4); // PRIVATE\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return ( -1 );\r\n        }\r\n        // #endregion \r\n\r\n        // #region Find it's constructed or not \r\n        this.is_constructed = (int_buffer[0] & 0x20) == 0x20;\r\n        // #endregion \r\n\r\n        // #region Find tag number \r\n        this.is_hex_only = false;\r\n\r\n        var tag_number_mask = int_buffer[0] & 0x1F;\r\n\r\n        // #region Simple case (tag number < 31)\r\n        if(tag_number_mask != 0x1F) \r\n        {\r\n            this.tag_number = (tag_number_mask);\r\n            this.block_length = 1;\r\n        }\r\n            // #endregion \r\n        // #region Tag number bigger or equal to 31 \r\n        else\r\n        {\r\n            var count = 1;\r\n\r\n            this.value_hex = new ArrayBuffer(255);\r\n            var tag_number_buffer_max_length = 255;\r\n            var int_tag_number_buffer = new Uint8Array(this.value_hex);\r\n\r\n            while(int_buffer[count] & 0x80)\r\n            {\r\n                int_tag_number_buffer[count - 1] = int_buffer[count] & 0x7F;\r\n                count++;\r\n\r\n                if(count >= int_buffer.length)\r\n                {\r\n                    this.error = \"End of input reached before message was fully decoded\";\r\n                    return (-1);\r\n                }\r\n\r\n                // #region In case if tag number length is greater than 255 bytes (rare but possible case)\r\n                if(count == tag_number_buffer_max_length)\r\n                {\r\n                    tag_number_buffer_max_length += 255;\r\n\r\n                    var temp_buffer = new ArrayBuffer(tag_number_buffer_max_length);\r\n                    var temp_buffer_view = new Uint8Array(temp_buffer);\r\n\r\n                    for(var i = 0; i < int_tag_number_buffer.length; i++)\r\n                        temp_buffer_view[i] = int_tag_number_buffer[i];\r\n\r\n                    this.value_hex = new ArrayBuffer(tag_number_buffer_max_length);\r\n                    int_tag_number_buffer = new Uint8Array(this.value_hex);\r\n                }\r\n                // #endregion \r\n            }\r\n\r\n            this.block_length = (count + 1);\r\n            int_tag_number_buffer[count - 1] = int_buffer[count] & 0x7F; // Write last byte to buffer\r\n\r\n            // #region Cut buffer \r\n            var temp_buffer = new ArrayBuffer(count);\r\n            var temp_buffer_view = new Uint8Array(temp_buffer);\r\n            for(var i = 0; i < count; i++)\r\n                temp_buffer_view[i] = int_tag_number_buffer[i];\r\n\r\n            this.value_hex = new ArrayBuffer(count);\r\n            int_tag_number_buffer = new Uint8Array(this.value_hex);\r\n            int_tag_number_buffer.set(temp_buffer_view);\r\n            // #endregion \r\n\r\n            // #region Try to convert long tag number to short form \r\n            if(this.block_length <= 9)\r\n                this.tag_number = util_frombase(int_tag_number_buffer, 7);\r\n            else\r\n            {\r\n                this.is_hex_only = true;\r\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\r\n            }\r\n            // #endregion \r\n        }\r\n        // #endregion \r\n        // #endregion \r\n\r\n        // #region Check if constructed encoding was using for primitive type \r\n        if(((this.tag_class == 1)) &&\r\n            (this.is_constructed))\r\n        {\r\n            switch(this.tag_number)\r\n            {\r\n                case 1:  // BOOLEAN\r\n                case 2:  // REAL\r\n                case 5:  // NULL\r\n                case 6:  // OBJECT IDENTIFIER\r\n                case 9:  // REAL\r\n                case 14: // TIME\r\n                case 23:\r\n                case 24:\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                case 34:\r\n                    this.error = \"Constructed encoding used for primitive type\";\r\n                    return (-1);\r\n                default:\r\n                    ;\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        return ( input_offset + this.block_length ); // Return current offset in input buffer\r\n    };\r\n    //**************************************************************************************\r\n    local.identification_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.hex_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.identification_block.prototype.block_name.call(this);\r\n        _object.tag_class = this.tag_class;\r\n        _object.tag_number = this.tag_number;\r\n        _object.is_constructed = this.is_constructed;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of length block class \r\n    //**************************************************************************************\r\n    local.length_block =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 \"length block\"</summary>\r\n\r\n        local.base_block.call(this, arguments[0]);\r\n\r\n        this.is_indefinite_form = false;\r\n        this.long_form_used = false;\r\n        this.length = (0);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"len_block\" in arguments[0])\r\n            {\r\n                this.is_indefinite_form = in_window.org.pkijs.getValue(arguments[0].len_block, \"is_indefinite_form\", false);\r\n                this.long_form_used = in_window.org.pkijs.getValue(arguments[0].len_block, \"long_form_used\", false);\r\n                this.length = in_window.org.pkijs.getValue(arguments[0].len_block, \"length\", 0);\r\n            }\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.length_block.prototype = new local.base_block();\r\n    local.length_block.constructor = local.length_block;\r\n    //**************************************************************************************\r\n    local.length_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"length_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.length_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(int_buffer.length == 0)\r\n        {\r\n            this.error = \"Zero buffer length\";\r\n            return (-1);\r\n        }\r\n\r\n        if(int_buffer[0] == 0xFF)\r\n        {\r\n            this.error = \"Length block 0xFF is reserved by standard\";\r\n            return (-1);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Check for length form type \r\n        this.is_indefinite_form = int_buffer[0] == 0x80;\r\n        // #endregion \r\n\r\n        // #region Stop working in case of indefinite length form \r\n        if(this.is_indefinite_form == true)\r\n        {\r\n            this.block_length = 1;\r\n            return (input_offset + this.block_length);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Check is long form of length encoding using \r\n        this.long_form_used = !!(int_buffer[0] & 0x80);\r\n        // #endregion \r\n\r\n        // #region Stop working in case of short form of length value \r\n        if(this.long_form_used == false)\r\n        {\r\n            this.length = (int_buffer[0]);\r\n            this.block_length = 1;\r\n            return (input_offset + this.block_length);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Calculate length value in case of long form \r\n        var count = int_buffer[0] & 0x7F;\r\n\r\n        if(count > 8) // Too big length value\r\n        {\r\n            this.error = \"Too big integer\";\r\n            return (-1);\r\n        }\r\n\r\n        if((count + 1) > int_buffer.length)\r\n        {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return (-1);\r\n        }\r\n\r\n        var length_buffer_view = new Uint8Array(count);\r\n\r\n        for(var i = 0; i < count; i++)\r\n            length_buffer_view[i] = int_buffer[i + 1];\r\n\r\n        if(length_buffer_view[count - 1] == 0x00)\r\n            this.warnings.push(\"Needlessly long encoded length\");\r\n\r\n        this.length = util_frombase(length_buffer_view, 8);\r\n\r\n        if(this.long_form_used && (this.length <= 127))\r\n            this.warnings.push(\"Unneccesary usage of long length form\");\r\n\r\n        this.block_length = count + 1;\r\n        // #endregion \r\n\r\n        return (input_offset + this.block_length); // Return current offset in input buffer\r\n    };\r\n    //**************************************************************************************\r\n    local.length_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        if(this.length > 127)\r\n            this.long_form_used = true;\r\n\r\n        if(this.is_indefinite_form)\r\n        {\r\n            var ret_buf = new ArrayBuffer(1);\r\n\r\n            if(size_only === false)\r\n            {\r\n                var ret_view = new Uint8Array(ret_buf);\r\n                ret_view[0] = 0x80;\r\n            }\r\n\r\n            return ret_buf;\r\n        }\r\n\r\n        if(this.long_form_used === true)\r\n        {\r\n            var encoded_buf = util_tobase(this.length, 8);\r\n\r\n            if(encoded_buf.byteLength > 127)\r\n            {\r\n                this.error = \"Too big length\";\r\n                return (new ArrayBuffer(0));\r\n            }\r\n\r\n            var ret_buf = new ArrayBuffer(encoded_buf.byteLength + 1);\r\n\r\n            if(size_only === true)\r\n                return ret_buf;\r\n\r\n            var encoded_view = new Uint8Array(encoded_buf);\r\n            var ret_view = new Uint8Array(ret_buf);\r\n\r\n            ret_view[0] = encoded_buf.byteLength | 0x80;\r\n\r\n            for(var i = 0; i < encoded_buf.byteLength; i++)\r\n                ret_view[i + 1] = encoded_view[i];\r\n\r\n            return ret_buf;\r\n        }\r\n        else\r\n        {\r\n            var ret_buf = new ArrayBuffer(1);\r\n\r\n            if(size_only === false)\r\n            {\r\n                var ret_view = new Uint8Array(ret_buf);\r\n\r\n                ret_view[0] = this.length;\r\n            }\r\n\r\n            return ret_buf;\r\n        }\r\n\r\n        return (new ArrayBuffer(0));\r\n    };\r\n    //**************************************************************************************\r\n    local.length_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.base_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.length_block.prototype.block_name.call(this);\r\n        _object.is_indefinite_form = this.is_indefinite_form;\r\n        _object.long_form_used = this.long_form_used;\r\n        _object.length = this.length;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of value block class \r\n    //**************************************************************************************\r\n    local.value_block =\r\n    function()\r\n    {\r\n        /// <summary>Generic class of ASN.1 \"value block\"</summary>\r\n        local.base_block.call(this, arguments[0]);\r\n    };\r\n    //**************************************************************************************\r\n    local.value_block.prototype = new local.base_block();\r\n    local.value_block.constructor = local.value_block;\r\n    //**************************************************************************************\r\n    local.value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.base_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.value_block.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of basic ASN.1 block class \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_block =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 block (identification block + length block + value block)</summary>\r\n\r\n        local.base_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.name = in_window.org.pkijs.getValue(arguments[0], \"name\", \"\");\r\n            this.optional = in_window.org.pkijs.getValue(arguments[0], \"optional\", false);\r\n\r\n            if(\"primitive_schema\" in arguments[0])\r\n                this.primitive_schema = arguments[0].primitive_schema;\r\n        }\r\n\r\n        this.id_block = new local.identification_block(arguments[0]);\r\n        this.len_block = new local.length_block(arguments[0]);\r\n        this.value_block = new local.value_block(arguments[0]);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_block.prototype = new local.base_block();\r\n    in_window.org.pkijs.asn1.ASN1_block.constructor = in_window.org.pkijs.asn1.ASN1_block;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"ASN1_block\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        var ret_buf;\r\n\r\n        var id_block_buf = this.id_block.toBER(size_only);\r\n        var value_block_size_buf = this.value_block.toBER(true);\r\n\r\n        this.len_block.length = value_block_size_buf.byteLength;\r\n        var len_block_buf = this.len_block.toBER(size_only);\r\n\r\n        ret_buf = util_concatbuf(id_block_buf, len_block_buf);\r\n\r\n        var value_block_buf;\r\n\r\n        if(size_only === false)\r\n            value_block_buf = this.value_block.toBER(size_only);\r\n        else\r\n            value_block_buf = new ArrayBuffer(this.len_block.length);\r\n\r\n        ret_buf = util_concatbuf(ret_buf, value_block_buf);\r\n\r\n        if(this.len_block.is_indefinite_form === true)\r\n        {\r\n            var indef_buf = new ArrayBuffer(2);\r\n\r\n            if(size_only === false)\r\n            {\r\n                var indef_view = new Uint8Array(indef_buf);\r\n\r\n                indef_view[0] = 0x00;\r\n                indef_view[1] = 0x00;\r\n            }\r\n\r\n            ret_buf = util_concatbuf(ret_buf, indef_buf);\r\n        }\r\n\r\n        return ret_buf;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.base_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.ASN1_block.prototype.block_name.call(this);\r\n        _object.id_block = this.id_block.toJSON();\r\n        _object.len_block = this.len_block.toJSON();\r\n        _object.value_block = this.value_block.toJSON();\r\n\r\n        if(\"name\" in this)\r\n            _object.name = this.name;\r\n        if(\"optional\" in this)\r\n            _object.optional = this.optional;\r\n        if(\"primitive_schema\" in this)\r\n            _object.primitive_schema = this.primitive_schema.toJSON();\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of basic block for all PRIMITIVE types \r\n    //**************************************************************************************\r\n    local.ASN1_PRIMITIVE_value_block =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 value block for primitive values (non-constructive encoding)</summary>\r\n\r\n        local.value_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            // #region Variables from \"hex_block\" class \r\n            if(\"value_hex\" in arguments[0])\r\n                this.value_hex = util_copybuf(arguments[0].value_hex);\r\n            else\r\n                this.value_hex = new ArrayBuffer(0);\r\n\r\n            this.is_hex_only = in_window.org.pkijs.getValue(arguments[0], \"is_hex_only\", true);\r\n            // #endregion \r\n        }\r\n        else\r\n        {\r\n            // #region Variables from \"hex_block\" class \r\n            this.value_hex = new ArrayBuffer(0);\r\n            this.is_hex_only = true;\r\n            // #endregion \r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_PRIMITIVE_value_block.prototype = new local.value_block();\r\n    local.ASN1_PRIMITIVE_value_block.constructor = local.ASN1_PRIMITIVE_value_block;\r\n    //**************************************************************************************\r\n    local.ASN1_PRIMITIVE_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(int_buffer.length == 0)\r\n        {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return input_offset;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Copy input buffer into internal buffer \r\n        this.value_hex = new ArrayBuffer(int_buffer.length);\r\n        var value_hex_view = new Uint8Array(this.value_hex);\r\n\r\n        for(var i = 0; i < int_buffer.length; i++)\r\n            value_hex_view[i] = int_buffer[i];\r\n        // #endregion \r\n\r\n        this.block_length = input_length;\r\n\r\n        return (input_offset + input_length);\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_PRIMITIVE_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        return util_copybuf(this.value_hex);\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_PRIMITIVE_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"ASN1_PRIMITIVE_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_PRIMITIVE_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.ASN1_PRIMITIVE_value_block.prototype.block_name.call(this);\r\n        _object.value_hex = in_window.org.pkijs.bufferToHexCodes(this.value_hex, 0, this.value_hex.byteLength);\r\n        _object.is_hex_only = this.is_hex_only;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_PRIMITIVE =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 block for primitive values (non-constructive encoding)</summary>\r\n\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.id_block.is_constructed = false;\r\n        this.value_block = new local.ASN1_PRIMITIVE_value_block(arguments[0]);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_PRIMITIVE.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.ASN1_PRIMITIVE.constructor = in_window.org.pkijs.asn1.ASN1_PRIMITIVE;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_PRIMITIVE.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"PRIMITIVE\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_PRIMITIVE.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.ASN1_PRIMITIVE.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of basic block for all CONSTRUCTED types \r\n    //**************************************************************************************\r\n    local.ASN1_CONSTRUCTED_value_block =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 value block for constructive values (constructive encoding)</summary>\r\n\r\n        local.value_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.value = in_window.org.pkijs.getValue(arguments[0], \"value\", new Array());\r\n            this.is_indefinite_form = in_window.org.pkijs.getValue(arguments[0], \"is_indefinite_form\", false);\r\n        }\r\n        else\r\n        {\r\n            this.value = new Array();\r\n            this.is_indefinite_form = false;\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_CONSTRUCTED_value_block.prototype = new local.value_block();\r\n    local.ASN1_CONSTRUCTED_value_block.constructor = local.ASN1_CONSTRUCTED_value_block;\r\n    //**************************************************************************************\r\n    local.ASN1_CONSTRUCTED_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Store initial offset and length \r\n        var initial_offset = input_offset;\r\n        var initial_length = input_length;\r\n        // #endregion \r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(int_buffer.length == 0)\r\n        {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return input_offset;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Aux function \r\n        function check_len(_indefinite_length, _length)\r\n        {\r\n            if(_indefinite_length == true)\r\n                return 1;\r\n\r\n            return _length;\r\n        }\r\n        // #endregion \r\n\r\n        var current_offset = input_offset;\r\n\r\n        while(check_len(this.is_indefinite_form, input_length) > 0)\r\n        {\r\n            var return_object = fromBER_raw(input_buffer, current_offset, input_length);\r\n            if(return_object.offset == (-1))\r\n            {\r\n                this.error = return_object.result.error;\r\n                this.warnings.concat(return_object.result.warnings);\r\n                return (-1);\r\n            }\r\n\r\n            current_offset = return_object.offset;\r\n\r\n            this.block_length += return_object.result.block_length;\r\n            input_length -= return_object.result.block_length;\r\n\r\n            this.value.push(return_object.result);\r\n\r\n            if((this.is_indefinite_form == true) && (return_object.result.block_name() == in_window.org.pkijs.asn1.EOC.prototype.block_name()))\r\n                break;\r\n        }\r\n\r\n        if(this.is_indefinite_form == true)\r\n        {\r\n            if(this.value[this.value.length - 1].block_name() == in_window.org.pkijs.asn1.EOC.prototype.block_name())\r\n                this.value.pop();\r\n            else\r\n                this.warnings.push(\"No EOC block encoded\");\r\n        }\r\n\r\n        // #region Copy \"input_buffer\" to \"value_before_decode\" \r\n        this.value_before_decode = util_copybuf_offset(input_buffer, initial_offset, initial_length);\r\n        // #endregion \r\n\r\n        return current_offset;\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_CONSTRUCTED_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        var ret_buf = new ArrayBuffer(0);\r\n\r\n        for(var i = 0; i < this.value.length; i++)\r\n        {\r\n            var value_buf = this.value[i].toBER(size_only);\r\n            ret_buf = util_concatbuf(ret_buf, value_buf);\r\n        }\r\n\r\n        return ret_buf;\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_CONSTRUCTED_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"ASN1_CONSTRUCTED_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.ASN1_CONSTRUCTED_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.ASN1_CONSTRUCTED_value_block.prototype.block_name.call(this);\r\n        _object.is_indefinite_form = this.is_indefinite_form;\r\n        _object.value = new Array();\r\n        for(var i = 0; i < this.value.length; i++)\r\n            _object.value.push(this.value[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_CONSTRUCTED =\r\n    function()\r\n    {\r\n        /// <summary>Base class of ASN.1 block for constructive values (constructive encoding)</summary>\r\n\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.id_block.is_constructed = true;\r\n        this.value_block = new local.ASN1_CONSTRUCTED_value_block(arguments[0]);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.constructor = in_window.org.pkijs.asn1.ASN1_CONSTRUCTED;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"CONSTRUCTED\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        this.value_block.is_indefinite_form = this.len_block.is_indefinite_form;\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 EOC type class\r\n    //**************************************************************************************\r\n    local.EOC_value_block =\r\n    function()\r\n    {\r\n        local.value_block.call(this, arguments[0]);\r\n    };\r\n    //**************************************************************************************\r\n    local.EOC_value_block.prototype = new local.value_block();\r\n    local.EOC_value_block.constructor = local.EOC_value_block;\r\n    //**************************************************************************************\r\n    local.EOC_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region There is no \"value block\" for EOC type and we need to return the same offset \r\n        return input_offset;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    local.EOC_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        return (new ArrayBuffer(0));\r\n    };\r\n    //**************************************************************************************\r\n    local.EOC_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"EOC_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.EOC_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.EOC_value_block.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.EOC =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.EOC_value_block();\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 0; // EOC\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.EOC.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.EOC.constructor = local.EOC_value_block;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.EOC.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"END_OF_CONTENT\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.EOC.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.EOC.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 BOOLEAN type class\r\n    //**************************************************************************************\r\n    local.BOOLEAN_value_block =\r\n    function()\r\n    {\r\n        local.value_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.value = in_window.org.pkijs.getValue(arguments[0], \"value\", false);\r\n\r\n            // #region Variables from hex_block class \r\n            this.is_hex_only = in_window.org.pkijs.getValue(arguments[0], \"is_hex_only\", false);\r\n            if(\"value_hex\" in arguments[0])\r\n                this.value_hex = util_copybuf(arguments[0].value_hex);\r\n            else\r\n            {\r\n                this.value_hex = new ArrayBuffer(1);\r\n                if(this.value === true)\r\n                {\r\n                    var view = new Uint8Array(this.value_hex);\r\n                    view[0] = 0xFF;\r\n                }\r\n            }\r\n            // #endregion \r\n        }\r\n        else\r\n        {\r\n            this.value = false;\r\n\r\n            // #region Variables from hex_block class \r\n            this.is_hex_only = false;\r\n            this.value_hex = new ArrayBuffer(1);\r\n            // #endregion \r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.BOOLEAN_value_block.prototype = new local.value_block();\r\n    local.BOOLEAN_value_block.constructor = local.BOOLEAN_value_block;\r\n    //**************************************************************************************\r\n    local.BOOLEAN_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        if(input_length > 1)\r\n            this.warnings.push(\"BOOLEAN value encoded in more then 1 octet\");\r\n\r\n        this.value = int_buffer[0] != 0x00;\r\n\r\n        this.is_hex_only = true;\r\n\r\n        // #region Copy input buffer to internal array \r\n        this.value_hex = new ArrayBuffer(int_buffer.length);\r\n        var view = new Uint8Array(this.value_hex);\r\n\r\n        for(var i = 0; i < int_buffer.length; i++)\r\n            view[i] = int_buffer[i];\r\n        // #endregion \r\n\r\n        this.block_length = input_length;\r\n\r\n        return (input_offset + input_length);\r\n    };\r\n    //**************************************************************************************\r\n    local.BOOLEAN_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        return this.value_hex;\r\n    };\r\n    //**************************************************************************************\r\n    local.BOOLEAN_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"BOOLEAN_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.BOOLEAN_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.BOOLEAN_value_block.prototype.block_name.call(this);\r\n        _object.value = this.value;\r\n        _object.is_hex_only = this.is_hex_only;\r\n        _object.value_hex = in_window.org.pkijs.bufferToHexCodes(this.value_hex, 0, this.value_hex.byteLength);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BOOLEAN =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.BOOLEAN_value_block(arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 1; // BOOLEAN\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BOOLEAN.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.BOOLEAN.constructor = local.BOOLEAN_value_block;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BOOLEAN.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"BOOLEAN\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BOOLEAN.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.BOOLEAN.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 SEQUENCE and SET type classes\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SEQUENCE =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 16; // SEQUENCE\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SEQUENCE.prototype = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED();\r\n    in_window.org.pkijs.asn1.SEQUENCE.constructor = in_window.org.pkijs.asn1.SEQUENCE;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SEQUENCE.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"SEQUENCE\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SEQUENCE.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.SEQUENCE.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SET =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 17; // SET\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SET.prototype = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED();\r\n    in_window.org.pkijs.asn1.SET.constructor = in_window.org.pkijs.asn1.SET;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SET.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"SET\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.SET.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_CONSTRUCTED.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.SET.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 NULL type class \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NULL =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 5; // NULL\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NULL.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.NULL.constructor = in_window.org.pkijs.asn1.NULL;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NULL.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"NULL\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NULL.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        if(this.len_block.length > 0)\r\n            this.warnings.push(\"Non-zero length of value block for NULL type\");\r\n\r\n        if(this.id_block.error.length === 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length === 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        this.block_length += input_length;\r\n\r\n        return (input_offset + input_length);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NULL.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        var ret_buf = new ArrayBuffer(2);\r\n\r\n        if(size_only === true)\r\n            return ret_buf;\r\n\r\n        var ret_view = new Uint8Array(ret_buf);\r\n        ret_view[0] = 0x05;\r\n        ret_view[1] = 0x00;\r\n\r\n        return ret_buf;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NULL.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.NULL.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 OCTETSTRING type class \r\n    //**************************************************************************************\r\n    local.OCTETSTRING_value_block =\r\n    function()\r\n    {\r\n        /// <param name=\"input_value_hex\" type=\"ArrayBuffer\"></param>\r\n        /// <param name=\"input_value\" type=\"Array\"></param>\r\n        /// <param name=\"input_constructed\" type=\"Boolean\"></param>\r\n        /// <remarks>Value for the OCTETSTRING may be as hex, as well as a constructed value.</remarks>\r\n        /// <remarks>Constructed values consists of other OCTETSTRINGs</remarks>\r\n\r\n        local.ASN1_CONSTRUCTED_value_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.is_constructed = in_window.org.pkijs.getValue(arguments[0], \"is_constructed\", false);\r\n\r\n            // #region Variables from hex_block type \r\n            this.is_hex_only = in_window.org.pkijs.getValue(arguments[0], \"is_hex_only\", false);\r\n            if(\"value_hex\" in arguments[0])\r\n                this.value_hex = util_copybuf(arguments[0].value_hex);\r\n            else\r\n                this.value_hex = new ArrayBuffer(0);\r\n            // #endregion \r\n        }\r\n        else\r\n        {\r\n            this.is_constructed = false;\r\n\r\n            // #region Variables from hex_block type \r\n            this.is_hex_only = false;\r\n            this.value_hex = new ArrayBuffer(0);\r\n            // #endregion \r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.OCTETSTRING_value_block.prototype = new local.ASN1_CONSTRUCTED_value_block();\r\n    local.OCTETSTRING_value_block.constructor = local.OCTETSTRING_value_block;\r\n    //**************************************************************************************\r\n    local.OCTETSTRING_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = 0;\r\n\r\n        if(this.is_constructed == true)\r\n        {\r\n            this.is_hex_only = false;\r\n\r\n            result_offset = local.ASN1_CONSTRUCTED_value_block.prototype.fromBER.call(this, input_buffer, input_offset, input_length);\r\n            if(result_offset == (-1))\r\n                return result_offset;\r\n\r\n            for(var i = 0; i < this.value.length; i++)\r\n            {\r\n                var current_block_name = this.value[i].block_name();\r\n\r\n                if(current_block_name == in_window.org.pkijs.asn1.EOC.prototype.block_name())\r\n                {\r\n                    if(this.is_indefinite_form == true)\r\n                        break;\r\n                    else\r\n                    {\r\n                        this.error = \"EOC is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n                        return (-1);\r\n                    }\r\n                }\r\n\r\n                if(current_block_name != in_window.org.pkijs.asn1.OCTETSTRING.prototype.block_name())\r\n                {\r\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n                    return (-1);\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.is_hex_only = true;\r\n\r\n            result_offset = local.hex_block.prototype.fromBER.call(this, input_buffer, input_offset, input_length);\r\n            this.block_length = input_length;\r\n        }\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    local.OCTETSTRING_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        if(this.is_constructed === true)\r\n            return local.ASN1_CONSTRUCTED_value_block.prototype.toBER.call(this, size_only);\r\n        else\r\n        {\r\n            var ret_buf = new ArrayBuffer(this.value_hex.byteLength);\r\n\r\n            if(size_only === true)\r\n                return ret_buf;\r\n\r\n            if(this.value_hex.byteLength == 0)\r\n                return ret_buf;\r\n\r\n            ret_buf = util_copybuf(this.value_hex);\r\n\r\n            return ret_buf;\r\n        }\r\n\r\n        return (new ArrayBuffer(0));\r\n    };\r\n    //**************************************************************************************\r\n    local.OCTETSTRING_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"OCTETSTRING_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.OCTETSTRING_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.ASN1_CONSTRUCTED_value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.OCTETSTRING_value_block.prototype.block_name.call(this);\r\n        _object.is_constructed = this.is_constructed;\r\n        _object.is_hex_only = this.is_hex_only;\r\n        _object.value_hex = in_window.org.pkijs.bufferToHexCodes(this.value_hex, 0, this.value_hex.byteLength);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OCTETSTRING =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.OCTETSTRING_value_block(arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 4; // OCTETSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OCTETSTRING.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.OCTETSTRING.constructor = in_window.org.pkijs.asn1.OCTETSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OCTETSTRING.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        this.value_block.is_constructed = this.id_block.is_constructed;\r\n        this.value_block.is_indefinite_form = this.len_block.is_indefinite_form;\r\n\r\n        // #region Ability to encode empty OCTET STRING \r\n        if(input_length == 0)\r\n        {\r\n            if(this.id_block.error.length == 0)\r\n                this.block_length += this.id_block.block_length;\r\n\r\n            if(this.len_block.error.length == 0)\r\n                this.block_length += this.len_block.block_length;\r\n\r\n            return input_offset;\r\n        }\r\n        // #endregion \r\n\r\n        return in_window.org.pkijs.asn1.ASN1_block.prototype.fromBER.call(this, input_buffer, input_offset, input_length);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OCTETSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        return \"OCTETSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OCTETSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.OCTETSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OCTETSTRING.prototype.isEqual =\r\n    function(octetString)\r\n    {\r\n        /// <summaryChecking that two OCTETSTRINGs are equal></summary>\r\n        /// <param name=\"octetString\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">The OCTETSTRING to compare with</param>\r\n\r\n        // #region Check input type \r\n        if((octetString instanceof in_window.org.pkijs.asn1.OCTETSTRING) == false)\r\n            return false;\r\n        // #endregion \r\n\r\n        // #region Compare two JSON strings \r\n        if(JSON.stringify(this) != JSON.stringify(octetString))\r\n            return false;\r\n        // #endregion \r\n\r\n        return true;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 BITSTRING type class\r\n    //**************************************************************************************\r\n    local.BITSTRING_value_block =\r\n    function()\r\n    {\r\n        local.ASN1_CONSTRUCTED_value_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.unused_bits = in_window.org.pkijs.getValue(arguments[0], \"unused_bits\", 0);\r\n            this.is_constructed = in_window.org.pkijs.getValue(arguments[0], \"is_constructed\", false);\r\n\r\n            // #region Variables from hex_block type \r\n            this.is_hex_only = in_window.org.pkijs.getValue(arguments[0], \"is_hex_only\", false);\r\n\r\n            if(\"value_hex\" in arguments[0])\r\n                this.value_hex = util_copybuf(arguments[0].value_hex);\r\n            else\r\n                this.value_hex = new ArrayBuffer(0);\r\n\r\n            this.block_length = this.value_hex.byteLength;\r\n            // #endregion \r\n        }\r\n        else\r\n        {\r\n            this.unused_bits = 0;\r\n            this.is_constructed = false;\r\n\r\n            // #region Variables from hex_block type \r\n            this.is_hex_only = false;\r\n            this.value_hex = new ArrayBuffer(0);\r\n            // #endregion \r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.BITSTRING_value_block.prototype = new local.ASN1_CONSTRUCTED_value_block();\r\n    local.BITSTRING_value_block.constructor = local.BITSTRING_value_block;\r\n    //**************************************************************************************\r\n    local.BITSTRING_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Ability to decode zero-length BITSTRING value \r\n        if(input_length == 0)\r\n            return input_offset;\r\n        // #endregion \r\n\r\n        var result_offset = (-1);\r\n\r\n        // #region If the BISTRING supposed to be a constructed value \r\n        if(this.is_constructed == true)\r\n        {\r\n            result_offset = local.ASN1_CONSTRUCTED_value_block.prototype.fromBER.call(this, input_buffer, input_offset, input_length);\r\n            if(result_offset == (-1))\r\n                return result_offset;\r\n\r\n            for(var i = 0; i < this.value.length; i++)\r\n            {\r\n                var current_block_name = this.value[i].block_name();\r\n\r\n                if(current_block_name == in_window.org.pkijs.asn1.EOC.prototype.block_name())\r\n                {\r\n                    if(this.is_indefinite_form == true)\r\n                        break;\r\n                    else\r\n                    {\r\n                        this.error = \"EOC is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n                        return (-1);\r\n                    }\r\n                }\r\n\r\n                if(current_block_name != in_window.org.pkijs.asn1.BITSTRING.prototype.block_name())\r\n                {\r\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n                    return (-1);\r\n                }\r\n\r\n                if((this.unused_bits > 0) && (this.value[i].unused_bits > 0))\r\n                {\r\n                    this.error = \"Usign of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n                    return (-1);\r\n                }\r\n                else\r\n                {\r\n                    this.unused_bits = this.value[i].unused_bits;\r\n                    if(this.unused_bits > 7)\r\n                    {\r\n                        this.error = \"Unused bits for BITSTRING must be in range 0-7\";\r\n                        return (-1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result_offset;\r\n        }\r\n            // #endregion \r\n        // #region If the BITSTRING supposed to be a primitive value\r\n        else\r\n        {\r\n            // #region Basic check for parameters \r\n            if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n                return (-1);\r\n            // #endregion \r\n\r\n            var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n\r\n            this.unused_bits = int_buffer[0];\r\n            if(this.unused_bits > 7)\r\n            {\r\n                this.error = \"Unused bits for BITSTRING must be in range 0-7\";\r\n                return (-1);\r\n            }\r\n\r\n            // #region Copy input buffer to internal buffer \r\n            this.value_hex = new ArrayBuffer(int_buffer.length - 1);\r\n            var view = new Uint8Array(this.value_hex);\r\n            for(var i = 0; i < (input_length - 1) ; i++)\r\n                view[i] = int_buffer[i + 1];\r\n            // #endregion \r\n\r\n            this.block_length = int_buffer.length;\r\n\r\n            return (input_offset + input_length);\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    local.BITSTRING_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        if(this.is_constructed === true)\r\n            return local.ASN1_CONSTRUCTED_value_block.prototype.toBER.call(this, size_only);\r\n        else\r\n        {\r\n            if(size_only === true)\r\n                return (new ArrayBuffer(this.value_hex.byteLength + 1));\r\n\r\n            if(this.value_hex.byteLength == 0)\r\n                return (new ArrayBuffer(0));\r\n\r\n            var cur_view = new Uint8Array(this.value_hex);\r\n\r\n            var ret_buf = new ArrayBuffer(this.value_hex.byteLength + 1);\r\n            var ret_view = new Uint8Array(ret_buf);\r\n\r\n            ret_view[0] = this.unused_bits;\r\n\r\n            for(var i = 0; i < this.value_hex.byteLength; i++)\r\n                ret_view[i + 1] = cur_view[i];\r\n\r\n            return ret_buf;\r\n        }\r\n\r\n        return (new ArrayBuffer(0));\r\n    };\r\n    //**************************************************************************************\r\n    local.BITSTRING_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"BITSTRING_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.BITSTRING_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.ASN1_CONSTRUCTED_value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.BITSTRING_value_block.prototype.block_name.call(this);\r\n        _object.unused_bits = this.unused_bits;\r\n        _object.is_constructed = this.is_constructed;\r\n        _object.is_hex_only = this.is_hex_only;\r\n        _object.value_hex = in_window.org.pkijs.bufferToHexCodes(this.value_hex, 0, this.value_hex.byteLength);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BITSTRING =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.BITSTRING_value_block(arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 3; // BITSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BITSTRING.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.BITSTRING.constructor = in_window.org.pkijs.asn1.BITSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BITSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"BITSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BITSTRING.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        // #region Ability to encode empty BITSTRING \r\n        if(input_length == 0)\r\n            return input_offset;\r\n        // #endregion \r\n\r\n        this.value_block.is_constructed = this.id_block.is_constructed;\r\n        this.value_block.is_indefinite_form = this.len_block.is_indefinite_form;\r\n\r\n        return in_window.org.pkijs.asn1.ASN1_block.prototype.fromBER.call(this, input_buffer, input_offset, input_length);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BITSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.BITSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 INTEGER type class \r\n    //**************************************************************************************\r\n    local.INTEGER_value_block =\r\n    function()\r\n    {\r\n        local.value_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.value_dec = in_window.org.pkijs.getValue(arguments[0], \"value\", 0);\r\n\r\n            // #region Variables from hex_block type \r\n            this.is_hex_only = in_window.org.pkijs.getValue(arguments[0], \"is_hex_only\", false);\r\n            if(\"value_hex\" in arguments[0])\r\n            {\r\n                this.value_hex = util_copybuf(arguments[0].value_hex);\r\n\r\n                if(this.value_hex.byteLength >= 4) // Dummy's protection\r\n                    this.is_hex_only = true;\r\n                else\r\n                    this.value_dec = util_decode_tc.call(this);\r\n            }\r\n            else\r\n                this.value_hex = util_encode_tc(this.value_dec);\r\n            // #endregion \r\n        }\r\n        else\r\n        {\r\n            this.value_dec = 0;\r\n\r\n            // #region Variables from hex_block type \r\n            this.is_hex_only = false;\r\n            this.value_hex = new ArrayBuffer(0);\r\n            // #endregion \r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.INTEGER_value_block.prototype = new local.value_block();\r\n    local.INTEGER_value_block.constructor = local.INTEGER_value_block;\r\n    //**************************************************************************************\r\n    local.INTEGER_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = local.hex_block.prototype.fromBER.call(this, input_buffer, input_offset, input_length);\r\n        if(result_offset == (-1))\r\n            return result_offset;\r\n\r\n        if(this.value_hex.byteLength > 4) // In JavaScript we can effectively work with 32-bit integers only\r\n        {\r\n            this.warnings.push(\"Too big INTEGER for decoding, hex only\");\r\n            this.is_hex_only = true;\r\n        }\r\n        else\r\n            this.value_dec = util_decode_tc.call(this);\r\n\r\n        this.block_length = input_length;\r\n\r\n        return (input_offset + input_length);\r\n    };\r\n    //**************************************************************************************\r\n    local.INTEGER_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        if(this.is_hex_only === false)\r\n        {\r\n            var encoded_buf = util_encode_tc(this.value_dec);\r\n            if(encoded_buf.byteLength == 0)\r\n            {\r\n                this.error = \"Error during encoding INTEGER value\";\r\n                return (new ArrayBuffer(0));\r\n            }\r\n\r\n            return util_copybuf(encoded_buf);\r\n        }\r\n        else\r\n            return util_copybuf(this.value_hex);\r\n\r\n        return (new ArrayBuffer(0));\r\n    };\r\n    //**************************************************************************************\r\n    local.INTEGER_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"INTEGER_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.INTEGER_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.INTEGER_value_block.prototype.block_name.call(this);\r\n        _object.value_dec = this.value_dec;\r\n        _object.is_hex_only = this.is_hex_only;\r\n        _object.value_hex = in_window.org.pkijs.bufferToHexCodes(this.value_hex, 0, this.value_hex.byteLength);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.INTEGER =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.INTEGER_value_block(arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 2; // INTEGER\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.INTEGER.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.INTEGER.constructor = in_window.org.pkijs.asn1.INTEGER;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.INTEGER.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"INTEGER\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.INTEGER.prototype.isEqual =\r\n    function()\r\n    {\r\n        /// <summary>Compare two INTEGER object, or INTEGER and ArrayBuffer objects</summary>\r\n        /// <returns type=\"Boolean\"></returns>\r\n\r\n        if(arguments[0] instanceof in_window.org.pkijs.asn1.INTEGER)\r\n        {\r\n            if(this.value_block.is_hex_only && arguments[0].value_block.is_hex_only) // Compare two ArrayBuffers\r\n                return in_window.org.pkijs.isEqual_buffer(this.value_block.value_hex, arguments[0].value_block.value_hex);\r\n            else\r\n            {\r\n                if(this.value_block.is_hex_only === arguments[0].value_block.is_hex_only)\r\n                    return (this.value_block.value_dec == arguments[0].value_block.value_dec);\r\n                else\r\n                    return false;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(arguments[0] instanceof ArrayBuffer)\r\n                return in_window.org.pkijs.isEqual_buffer(this.value_block.value_hex, arguments[0]);\r\n            else\r\n                return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.INTEGER.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.INTEGER.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 ENUMERATED type class \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ENUMERATED =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.INTEGER.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 10; // ENUMERATED\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ENUMERATED.prototype = new in_window.org.pkijs.asn1.INTEGER();\r\n    in_window.org.pkijs.asn1.ENUMERATED.constructor = in_window.org.pkijs.asn1.ENUMERATED;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ENUMERATED.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"ENUMERATED\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ENUMERATED.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.INTEGER.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.ENUMERATED.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of ASN.1 OBJECT IDENTIFIER type class \r\n    //**************************************************************************************\r\n    local.SID_value_block =\r\n    function()\r\n    {\r\n        local.hex_block.call(this, arguments[0]);\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.value_dec = in_window.org.pkijs.getValue(arguments[0], \"value_dec\", -1);\r\n            this.is_first_sid = in_window.org.pkijs.getValue(arguments[0], \"is_first_sid\", false);\r\n        }\r\n        else\r\n        {\r\n            this.value_dec = (-1);\r\n            this.is_first_sid = false;\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.SID_value_block.prototype = new local.hex_block();\r\n    local.SID_value_block.constructor = local.SID_value_block;\r\n    //**************************************************************************************\r\n    local.SID_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"sid_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.SID_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        if(input_length == 0)\r\n            return input_offset;\r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params.call(this, input_buffer, input_offset, input_length) === false)\r\n            return (-1);\r\n        // #endregion \r\n\r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n\r\n        this.value_hex = new ArrayBuffer(input_length);\r\n        var view = new Uint8Array(this.value_hex);\r\n\r\n        for(var i = 0; i < input_length; i++)\r\n        {\r\n            view[i] = int_buffer[i] & 0x7F;\r\n\r\n            this.block_length++;\r\n\r\n            if((int_buffer[i] & 0x80) == 0x00)\r\n                break;\r\n        }\r\n\r\n        // #region Ajust size of value_hex buffer \r\n        var temp_value_hex = new ArrayBuffer(this.block_length);\r\n        var temp_view = new Uint8Array(temp_value_hex);\r\n\r\n        for(var i = 0; i < this.block_length; i++)\r\n            temp_view[i] = view[i];\r\n\r\n        this.value_hex = util_copybuf(temp_value_hex);\r\n        view = new Uint8Array(this.value_hex);\r\n        // #endregion   \r\n\r\n        if((int_buffer[this.block_length - 1] & 0x80) != 0x00)\r\n        {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return (-1);\r\n        }\r\n\r\n        if(view[0] == 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n\r\n        if(this.block_length <= 8)\r\n            this.value_dec = util_frombase(view, 7);\r\n        else\r\n        {\r\n            this.is_hex_only = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n\r\n        return (input_offset + this.block_length);\r\n    };\r\n    //**************************************************************************************\r\n    local.SID_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        if(this.is_hex_only)\r\n        {\r\n            if(size_only === true)\r\n                return (new ArrayBuffer(this.value_hex.byteLength));\r\n\r\n            var cur_view = new Uint8Array(this.value_hex);\r\n\r\n            var ret_buf = new ArrayBuffer(this.block_length);\r\n            var ret_view = new Uint8Array(ret_buf);\r\n\r\n            for(var i = 0; i < (this.block_length - 1) ; i++)\r\n                ret_view[i] = cur_view[i] | 0x80;\r\n\r\n            ret_view[this.block_length - 1] = cur_view[this.block_length - 1];\r\n\r\n            return ret_buf;\r\n        }\r\n        else\r\n        {\r\n            var encoded_buf = util_tobase(this.value_dec, 7);\r\n            if(encoded_buf.byteLength === 0)\r\n            {\r\n                this.error = \"Error during encoding SID value\";\r\n                return (new ArrayBuffer(0));\r\n            }\r\n\r\n            var ret_buf = new ArrayBuffer(encoded_buf.byteLength);\r\n\r\n            if(size_only === false)\r\n            {\r\n                var encoded_view = new Uint8Array(encoded_buf);\r\n                var ret_view = new Uint8Array(ret_buf);\r\n\r\n                for(var i = 0; i < (encoded_buf.byteLength - 1) ; i++)\r\n                    ret_view[i] = encoded_view[i] | 0x80;\r\n\r\n                ret_view[encoded_buf.byteLength - 1] = encoded_view[encoded_buf.byteLength - 1];\r\n            }\r\n\r\n            return ret_buf;\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.SID_value_block.prototype.toString =\r\n    function()\r\n    {\r\n        var result = \"\";\r\n\r\n        if(this.is_hex_only === true)\r\n            result = to_hex_codes(this.value_hex);\r\n        else\r\n        {\r\n            if(this.is_first_sid)\r\n            {\r\n                var sid_value = this.value_dec;\r\n\r\n                if(this.value_dec <= 39)\r\n                    result = \"0.\";\r\n                else\r\n                {\r\n                    if(this.value_dec <= 79)\r\n                    {\r\n                        result = \"1.\";\r\n                        sid_value -= 40;\r\n                    }\r\n                    else\r\n                    {\r\n                        result = \"2.\";\r\n                        sid_value -= 80;\r\n                    }\r\n                }\r\n\r\n                result = result + sid_value.toString();\r\n            }\r\n            else\r\n                result = this.value_dec.toString();\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    local.SID_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.hex_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.SID_value_block.prototype.block_name.call(this);\r\n        _object.value_dec = this.value_dec;\r\n        _object.is_first_sid = this.is_first_sid;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block =\r\n    function()\r\n    {\r\n        local.value_block.call(this, arguments[0]);\r\n\r\n        this.value = new Array();\r\n\r\n        if(arguments[0] instanceof Object)\r\n            this.fromString(in_window.org.pkijs.getValue(arguments[0], \"value\", \"\"));\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype = new local.value_block();\r\n    local.OID_value_block.constructor = local.OID_value_block;\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = input_offset;\r\n\r\n        while(input_length > 0)\r\n        {\r\n            var sid_block = new local.SID_value_block();\r\n            result_offset = sid_block.fromBER(input_buffer, result_offset, input_length);\r\n            if(result_offset == (-1))\r\n            {\r\n                this.block_length = 0;\r\n                this.error = sid_block.error;\r\n                return result_offset;\r\n            }\r\n\r\n            if(this.value.length == 0)\r\n                sid_block.is_first_sid = true;\r\n\r\n            this.block_length += sid_block.block_length;\r\n            input_length -= sid_block.block_length;\r\n\r\n            this.value.push(sid_block);\r\n        }\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype.toBER =\r\n    function(size_only)\r\n    {\r\n        /// <summary>Encoding of current ASN.1 block into ASN.1 encoded array (BER rules)</summary>\r\n        /// <param name=\"size_only\" type=\"Boolean\">Flag that we need only a size of encoding, not a real array of bytes</param>\r\n\r\n        if(typeof size_only === \"undefined\")\r\n            size_only = false;\r\n\r\n        var ret_buf = new ArrayBuffer(0);\r\n\r\n        for(var i = 0; i < this.value.length; i++)\r\n        {\r\n            var value_buf = this.value[i].toBER(size_only);\r\n            if(value_buf.byteLength === 0)\r\n            {\r\n                this.error = this.value[i].error;\r\n                return (new ArrayBuffer(0));\r\n            }\r\n\r\n            ret_buf = util_concatbuf(ret_buf, value_buf);\r\n        }\r\n\r\n        return ret_buf;\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype.fromString =\r\n    function(str)\r\n    {\r\n        this.value = new Array(); // Clear existing SID values\r\n\r\n        var pos1 = 0;\r\n        var pos2 = 0;\r\n\r\n        var sid = \"\";\r\n\r\n        var flag = false;\r\n\r\n        do\r\n        {\r\n            pos2 = str.indexOf('.', pos1);\r\n            if(pos2 === (-1))\r\n                sid = str.substr(pos1);\r\n            else\r\n                sid = str.substr(pos1, pos2 - pos1);\r\n\r\n            pos1 = pos2 + 1;\r\n\r\n            if(flag)\r\n            {\r\n                var sid_block = this.value[0];\r\n\r\n                var plus = 0;\r\n\r\n                switch(sid_block.value_dec)\r\n                {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        plus = 40;\r\n                        break;\r\n                    case 2:\r\n                        plus = 80;\r\n                        break;\r\n                    default:\r\n                        this.value = new Array(); // clear SID array\r\n                        return false; // ???\r\n                }\r\n\r\n                var parsedSID = parseInt(sid, 10);\r\n                if(isNaN(parsedSID))\r\n                    return true;\r\n\r\n                sid_block.value_dec = parsedSID + plus;\r\n\r\n                flag = false;\r\n            }\r\n            else\r\n            {\r\n                var sid_block = new local.SID_value_block();\r\n                sid_block.value_dec = parseInt(sid, 10);\r\n                if(isNaN(sid_block.value_dec))\r\n                    return true;\r\n\r\n                if(this.value.length === 0)\r\n                {\r\n                    sid_block.is_first_sid = true;\r\n                    flag = true;\r\n                }\r\n\r\n                this.value.push(sid_block);\r\n            }\r\n\r\n        } while(pos2 !== (-1));\r\n\r\n        return true;\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype.toString =\r\n    function()\r\n    {\r\n        var result = \"\";\r\n        var is_hex_only = false;\r\n\r\n        for(var i = 0; i < this.value.length; i++)\r\n        {\r\n            is_hex_only = this.value[i].is_hex_only;\r\n\r\n            var sid_str = this.value[i].toString();\r\n\r\n            if(i !== 0)\r\n                result = result + \".\";\r\n\r\n            if(is_hex_only)\r\n            {\r\n                sid_str = \"{\" + sid_str + \"}\";\r\n\r\n                if(this.value[i].is_first_sid)\r\n                    result = \"2.{\" + sid_str + \" - 80}\";\r\n                else\r\n                    result = result + sid_str;\r\n            }\r\n            else\r\n                result = result + sid_str;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"OID_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.OID_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.value_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.OID_value_block.prototype.block_name.call(this);\r\n        _object.value = local.OID_value_block.prototype.toString.call(this);\r\n        _object.sid_array = new Array();\r\n        for(var i = 0; i < this.value.length; i++)\r\n            _object.sid_array.push(this.value[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OID =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.OID_value_block(arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 6; // OBJECT IDENTIFIER\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OID.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.OID.constructor = in_window.org.pkijs.asn1.OID;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OID.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"OID\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.OID.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.OID.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion   \r\n    //**************************************************************************************\r\n    // #region Declaration of all string's classes \r\n    //**************************************************************************************\r\n    local.UTF8STRING_value_block =\r\n    function()\r\n    {\r\n        local.hex_block.call(this, arguments[0]);\r\n\r\n        this.is_hex_only = true;\r\n        this.value = \"\"; // String representation of decoded ArrayBuffer\r\n    };\r\n    //**************************************************************************************\r\n    local.UTF8STRING_value_block.prototype = new local.hex_block();\r\n    local.UTF8STRING_value_block.constructor = local.UTF8STRING_value_block;\r\n    //**************************************************************************************\r\n    local.UTF8STRING_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"UTF8STRING_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.UTF8STRING_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.hex_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.UTF8STRING_value_block.prototype.block_name.call(this);\r\n        _object.value = this.value;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.UTF8STRING_value_block();\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"value\" in arguments[0])\r\n                in_window.org.pkijs.asn1.UTF8STRING.prototype.fromString.call(this,arguments[0].value);\r\n        }\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 12; // UTF8STRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.UTF8STRING.constructor = in_window.org.pkijs.asn1.UTF8STRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"UTF8STRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        in_window.org.pkijs.asn1.UTF8STRING.prototype.fromBuffer.call(this, this.value_block.value_hex);\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING.prototype.fromBuffer =\r\n    function(input_buffer)\r\n    {\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">Array with encoded string</param>\r\n        this.value_block.value = String.fromCharCode.apply(null, new Uint8Array(input_buffer));\r\n\r\n        try\r\n        {\r\n            this.value_block.value = decodeURIComponent(escape(this.value_block.value));\r\n        }\r\n        catch(ex)\r\n        {\r\n            this.warnings.push(\"Error during \\\"decodeURIComponent\\\": \" + ex + \", using raw string\");\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING.prototype.fromString =\r\n    function(input_string)\r\n    {\r\n        /// <param name=\"input_string\" type=\"String\">String with UNIVERSALSTRING value</param>\r\n\r\n        var str = unescape(encodeURIComponent(input_string));\r\n        var str_len = str.length;\r\n\r\n        this.value_block.value_hex = new ArrayBuffer(str_len);\r\n        var view = new Uint8Array(this.value_block.value_hex);\r\n\r\n        for(var i = 0; i < str_len; i++)\r\n            view[i] = str.charCodeAt(i);\r\n\r\n        this.value_block.value = input_string;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTF8STRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.UTF8STRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    local.BMPSTRING_value_block =\r\n    function()\r\n    {\r\n        local.hex_block.call(this, arguments[0]);\r\n\r\n        this.is_hex_only = true;\r\n        this.value = \"\";\r\n    };\r\n    //**************************************************************************************\r\n    local.BMPSTRING_value_block.prototype = new local.hex_block();\r\n    local.BMPSTRING_value_block.constructor = local.BMPSTRING_value_block;\r\n    //**************************************************************************************\r\n    local.BMPSTRING_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"BMPSTRING_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.BMPSTRING_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.hex_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.BMPSTRING_value_block.prototype.block_name.call(this);\r\n        _object.value = this.value;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.BMPSTRING_value_block();\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"value\" in arguments[0])\r\n                in_window.org.pkijs.asn1.BMPSTRING.prototype.fromString.call(this, arguments[0].value);\r\n        }\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 30; // BMPSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.BMPSTRING.constructor = in_window.org.pkijs.asn1.BMPSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"BMPSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        in_window.org.pkijs.asn1.BMPSTRING.prototype.fromBuffer.call(this, this.value_block.value_hex);\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING.prototype.fromBuffer =\r\n    function(input_buffer)\r\n    {\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">Array with encoded string</param>\r\n\r\n        var copy_buffer = in_window.org.pkijs.copyBuffer(input_buffer);\r\n\r\n        var value_view = new Uint8Array(copy_buffer);\r\n\r\n        for(var i = 0; i < value_view.length; i = i + 2)\r\n        {\r\n            var temp = value_view[i];\r\n\r\n            value_view[i] = value_view[i + 1];\r\n            value_view[i + 1] = temp;\r\n        }\r\n\r\n        this.value_block.value = String.fromCharCode.apply(null, new Uint16Array(copy_buffer));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING.prototype.fromString =\r\n    function(input_string)\r\n    {\r\n        /// <param name=\"input_string\" type=\"String\">String with UNIVERSALSTRING value</param>\r\n\r\n        var str_length = input_string.length;\r\n\r\n        this.value_block.value_hex = new ArrayBuffer(str_length * 2);\r\n        var value_hex_view = new Uint8Array(this.value_block.value_hex);\r\n\r\n        for(var i = 0; i < str_length; i++)\r\n        {\r\n            var code_buf = util_tobase(input_string.charCodeAt(i), 8);\r\n            var code_view = new Uint8Array(code_buf);\r\n            if(code_view.length > 2)\r\n                continue;\r\n\r\n            var dif = 2 - code_view.length;\r\n\r\n            for(var j = (code_view.length - 1) ; j >= 0; j--)\r\n                value_hex_view[i * 2 + j + dif] = code_view[j];\r\n        }\r\n\r\n        this.value_block.value = input_string;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.BMPSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.BMPSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    local.UNIVERSALSTRING_value_block =\r\n    function()\r\n    {\r\n        local.hex_block.call(this, arguments[0]);\r\n\r\n        this.is_hex_only = true;\r\n        this.value = \"\";\r\n    };\r\n    //**************************************************************************************\r\n    local.UNIVERSALSTRING_value_block.prototype = new local.hex_block();\r\n    local.UNIVERSALSTRING_value_block.constructor = local.UNIVERSALSTRING_value_block;\r\n    //**************************************************************************************\r\n    local.UNIVERSALSTRING_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"UNIVERSALSTRING_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.UNIVERSALSTRING_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.hex_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.UNIVERSALSTRING_value_block.prototype.block_name.call(this);\r\n        _object.value = this.value;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.UNIVERSALSTRING_value_block();\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"value\" in arguments[0])\r\n                in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.fromString.call(this, arguments[0].value);\r\n        }\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 28; // UNIVERSALSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.constructor = in_window.org.pkijs.asn1.UNIVERSALSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"UNIVERSALSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.fromBuffer.call(this, this.value_block.value_hex);\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.fromBuffer =\r\n    function(input_buffer)\r\n    {\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">Array with encoded string</param>\r\n\r\n        var copy_buffer = in_window.org.pkijs.copyBuffer(input_buffer);\r\n\r\n        var value_view = new Uint8Array(copy_buffer);\r\n\r\n        for(var i = 0; i < value_view.length; i = i + 4)\r\n        {\r\n            value_view[i] = value_view[i + 3];\r\n            value_view[i + 1] = value_view[i + 2];\r\n            value_view[i + 2] = 0x00;\r\n            value_view[i + 3] = 0x00;\r\n        }\r\n\r\n        this.value_block.value = String.fromCharCode.apply(null, new Uint32Array(copy_buffer));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.fromString =\r\n    function(input_string)\r\n    {\r\n        /// <param name=\"input_string\" type=\"String\">String with UNIVERSALSTRING value</param>\r\n\r\n        var str_length = input_string.length;\r\n\r\n        this.value_block.value_hex = new ArrayBuffer(str_length * 4);\r\n        var value_hex_view = new Uint8Array(this.value_block.value_hex);\r\n\r\n        for(var i = 0; i < str_length; i++)\r\n        {\r\n            var code_buf = util_tobase(input_string.charCodeAt(i), 8);\r\n            var code_view = new Uint8Array(code_buf);\r\n            if(code_view.length > 4)\r\n                continue;\r\n\r\n            var dif = 4 - code_view.length;\r\n\r\n            for(var j = (code_view.length - 1) ; j >= 0; j--)\r\n                value_hex_view[i*4 + j + dif] = code_view[j];\r\n        }\r\n\r\n        this.value_block.value = input_string;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.UNIVERSALSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_value_block =\r\n    function()\r\n    {\r\n        local.hex_block.call(this, arguments[0]);\r\n\r\n        /// <field type=\"String\">Native string representation</field>\r\n        this.value = \"\";\r\n        this.is_hex_only = true;\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_value_block.prototype = new local.hex_block();\r\n    local.SIMPLESTRING_value_block.constructor = local.SIMPLESTRING_value_block;\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_value_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"SIMPLESTRING_value_block\";\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_value_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.hex_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.SIMPLESTRING_value_block.prototype.block_name.call(this);\r\n        _object.value = this.value;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.ASN1_block.call(this, arguments[0]);\r\n\r\n        this.value_block = new local.SIMPLESTRING_value_block();\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"value\" in arguments[0])\r\n                local.SIMPLESTRING_block.prototype.fromString.call(this, arguments[0].value);\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block.prototype = new in_window.org.pkijs.asn1.ASN1_block();\r\n    local.SIMPLESTRING_block.constructor = local.SIMPLESTRING_block;\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"SIMPLESTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        local.SIMPLESTRING_block.prototype.fromBuffer.call(this, this.value_block.value_hex);\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block.prototype.fromBuffer =\r\n    function(input_buffer)\r\n    {\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">Array with encoded string</param>\r\n\r\n        this.value_block.value = String.fromCharCode.apply(null, new Uint8Array(input_buffer));\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block.prototype.fromString =\r\n    function(input_string)\r\n    {\r\n        /// <param name=\"input_string\" type=\"String\">String with UNIVERSALSTRING value</param>\r\n        var str_len = input_string.length;\r\n\r\n        this.value_block.value_hex = new ArrayBuffer(str_len);\r\n        var view = new Uint8Array(this.value_block.value_hex);\r\n\r\n        for(var i = 0; i < str_len; i++)\r\n            view[i] = input_string.charCodeAt(i);\r\n\r\n        this.value_block.value = input_string;\r\n    };\r\n    //**************************************************************************************\r\n    local.SIMPLESTRING_block.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.ASN1_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = local.SIMPLESTRING_block.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NUMERICSTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 18; // NUMERICSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NUMERICSTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.NUMERICSTRING.constructor = in_window.org.pkijs.asn1.NUMERICSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NUMERICSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"NUMERICSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.NUMERICSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.NUMERICSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.PRINTABLESTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 19; // PRINTABLESTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.PRINTABLESTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.PRINTABLESTRING.constructor = in_window.org.pkijs.asn1.PRINTABLESTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.PRINTABLESTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"PRINTABLESTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.PRINTABLESTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.PRINTABLESTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TELETEXSTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 20; // TELETEXSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TELETEXSTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.TELETEXSTRING.constructor = in_window.org.pkijs.asn1.TELETEXSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TELETEXSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"TELETEXSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TELETEXSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.TELETEXSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VIDEOTEXSTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 21; // VIDEOTEXSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VIDEOTEXSTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.VIDEOTEXSTRING.constructor = in_window.org.pkijs.asn1.VIDEOTEXSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VIDEOTEXSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"VIDEOTEXSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VIDEOTEXSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.VIDEOTEXSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.IA5STRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 22; // IA5STRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.IA5STRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.IA5STRING.constructor = in_window.org.pkijs.asn1.IA5STRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.IA5STRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"IA5STRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.IA5STRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.IA5STRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GRAPHICSTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 25; // GRAPHICSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GRAPHICSTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.GRAPHICSTRING.constructor = in_window.org.pkijs.asn1.GRAPHICSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GRAPHICSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"GRAPHICSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GRAPHICSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.GRAPHICSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VISIBLESTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 26; // VISIBLESTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VISIBLESTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.VISIBLESTRING.constructor = in_window.org.pkijs.asn1.VISIBLESTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VISIBLESTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"VISIBLESTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.VISIBLESTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.VISIBLESTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALSTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 27; // GENERALSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALSTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.GENERALSTRING.constructor = in_window.org.pkijs.asn1.GENERALSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"GENERALSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.GENERALSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.CHARACTERSTRING =\r\n    function()\r\n    {\r\n        local.SIMPLESTRING_block.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 29; // CHARACTERSTRING\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.CHARACTERSTRING.prototype = new local.SIMPLESTRING_block();\r\n    in_window.org.pkijs.asn1.CHARACTERSTRING.constructor = in_window.org.pkijs.asn1.CHARACTERSTRING;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.CHARACTERSTRING.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"CHARACTERSTRING\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.CHARACTERSTRING.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = local.SIMPLESTRING_block.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.CHARACTERSTRING.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of all date and time classes \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.VISIBLESTRING.call(this, arguments[0]);\r\n\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n\r\n        // #region Create UTCTIME from ASN.1 UTC string value \r\n        if((arguments[0] instanceof Object) && (\"value\" in arguments[0]))\r\n        {\r\n            in_window.org.pkijs.asn1.UTCTIME.prototype.fromString.call(this, arguments[0].value);\r\n\r\n            this.value_block.value_hex = new ArrayBuffer(arguments[0].value.length);\r\n            var view = new Uint8Array(this.value_block.value_hex);\r\n\r\n            for(var i = 0; i < arguments[0].value.length; i++)\r\n                view[i] = arguments[0].value.charCodeAt(i);\r\n        }\r\n        // #endregion \r\n        // #region Create UTCTIME from JavaScript Date type \r\n        if((arguments[0] instanceof Object) && (\"value_date\" in arguments[0]))\r\n        {\r\n            in_window.org.pkijs.asn1.UTCTIME.prototype.fromDate.call(this, arguments[0].value_date);\r\n            this.value_block.value_hex = in_window.org.pkijs.asn1.UTCTIME.prototype.toBuffer.call(this);\r\n        }\r\n        // #endregion \r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 23; // UTCTIME\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype = new in_window.org.pkijs.asn1.VISIBLESTRING();\r\n    in_window.org.pkijs.asn1.UTCTIME.constructor = in_window.org.pkijs.asn1.UTCTIME;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        in_window.org.pkijs.asn1.UTCTIME.prototype.fromBuffer.call(this, this.value_block.value_hex);\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.fromBuffer =\r\n    function(input_buffer)\r\n    {\r\n        in_window.org.pkijs.asn1.UTCTIME.prototype.fromString.call(this, String.fromCharCode.apply(null, new Uint8Array(input_buffer)));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.toBuffer =\r\n    function()\r\n    {\r\n        var str = in_window.org.pkijs.asn1.UTCTIME.prototype.toString.call(this);\r\n\r\n        var buffer = new ArrayBuffer(str.length);\r\n        var view = new Uint8Array(buffer);\r\n\r\n        for(var i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n\r\n        return buffer;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.fromDate =\r\n    function(input_date)\r\n    {\r\n        /// <summary>Create \"UTCTime\" ASN.1 type from JavaScript \"Date\" type</summary>\r\n\r\n        this.year = input_date.getUTCFullYear();\r\n        this.month = input_date.getUTCMonth() + 1;\r\n        this.day = input_date.getUTCDate();\r\n        this.hour = input_date.getUTCHours();\r\n        this.minute = input_date.getUTCMinutes();\r\n        this.second = input_date.getUTCSeconds();\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.toDate =\r\n    function()\r\n    {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.fromString =\r\n    function(input_string)\r\n    {\r\n        /// <summary>Create \"UTCTime\" ASN.1 type from JavaScript \"String\" type</summary>\r\n\r\n        // #region Parse input string \r\n        var parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n        var parser_array = parser.exec(input_string);\r\n        if(parser_array === null)\r\n        {\r\n            this.error = \"Wrong input string for convertion\";\r\n            return;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Store parsed values \r\n        var year = parseInt(parser_array[1], 10);\r\n        if(year >= 50)\r\n            this.year = 1900 + year;\r\n        else\r\n            this.year = 2000 + year;\r\n\r\n        this.month = parseInt(parser_array[2], 10);\r\n        this.day = parseInt(parser_array[3], 10);\r\n        this.hour = parseInt(parser_array[4], 10);\r\n        this.minute = parseInt(parser_array[5], 10);\r\n        this.second = parseInt(parser_array[6], 10);\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.toString =\r\n    function()\r\n    {\r\n        var output_array = new Array(7);\r\n\r\n        output_array[0] = in_window.org.pkijs.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n        output_array[1] = in_window.org.pkijs.padNumber(this.month, 2);\r\n        output_array[2] = in_window.org.pkijs.padNumber(this.day, 2);\r\n        output_array[3] = in_window.org.pkijs.padNumber(this.hour, 2);\r\n        output_array[4] = in_window.org.pkijs.padNumber(this.minute, 2);\r\n        output_array[5] = in_window.org.pkijs.padNumber(this.second, 2);\r\n        output_array[6] = \"Z\";\r\n\r\n        return output_array.join('');\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"UTCTIME\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.UTCTIME.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.VISIBLESTRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.UTCTIME.prototype.block_name.call(this);\r\n        _object.year = this.year;\r\n        _object.month = this.month;\r\n        _object.day = this.day;\r\n        _object.hour = this.hour;\r\n        _object.minute = this.minute;\r\n        _object.second = this.second;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.VISIBLESTRING.call(this, arguments[0]);\r\n\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n        this.millisecond = 0;\r\n\r\n        // #region Create GeneralizedTime from ASN.1 string value \r\n        if((arguments[0] instanceof Object) && (\"value\" in arguments[0]))\r\n        {\r\n            in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromString.call(this, arguments[0].value);\r\n\r\n            this.value_block.value_hex = new ArrayBuffer(arguments[0].value.length);\r\n            var view = new Uint8Array(this.value_block.value_hex);\r\n\r\n            for(var i = 0; i < arguments[0].value.length; i++)\r\n                view[i] = arguments[0].value.charCodeAt(i);\r\n        }\r\n        // #endregion \r\n        // #region Create GeneralizedTime from JavaScript Date type \r\n        if((arguments[0] instanceof Object) && (\"value_date\" in arguments[0]))\r\n        {\r\n            in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromDate.call(this, arguments[0].value_date);\r\n            this.value_block.value_hex = in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.toBuffer.call(this);\r\n        }\r\n        // #endregion \r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 24; // GENERALIZEDTIME\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype = new in_window.org.pkijs.asn1.VISIBLESTRING();\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.constructor = in_window.org.pkijs.asn1.GENERALIZEDTIME;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromBER =\r\n    function(input_buffer, input_offset, input_length)\r\n    {\r\n        /// <summary>Base function for converting block from BER encoded array of bytes</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array</param>\r\n        /// <param name=\"input_offset\" type=\"Number\">Offset in ASN.1 BER encoded array where decoding should be started</param>\r\n        /// <param name=\"input_length\" type=\"Number\">Maximum length of array of bytes which can be using in this function</param>\r\n\r\n        var result_offset = this.value_block.fromBER(input_buffer, input_offset, (this.len_block.is_indefinite_form == true) ? input_length : this.len_block.length);\r\n        if(result_offset == (-1))\r\n        {\r\n            this.error = this.value_block.error;\r\n            return result_offset;\r\n        }\r\n\r\n        in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromBuffer.call(this, this.value_block.value_hex);\r\n\r\n        if(this.id_block.error.length == 0)\r\n            this.block_length += this.id_block.block_length;\r\n\r\n        if(this.len_block.error.length == 0)\r\n            this.block_length += this.len_block.block_length;\r\n\r\n        if(this.value_block.error.length == 0)\r\n            this.block_length += this.value_block.block_length;\r\n\r\n        return result_offset;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromBuffer =\r\n    function(input_buffer)\r\n    {\r\n        in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromString.call(this, String.fromCharCode.apply(null, new Uint8Array(input_buffer)));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.toBuffer =\r\n    function()\r\n    {\r\n        var str = in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.toString.call(this);\r\n\r\n        var buffer = new ArrayBuffer(str.length);\r\n        var view = new Uint8Array(buffer);\r\n\r\n        for(var i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n\r\n        return buffer;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromDate =\r\n    function(input_date)\r\n    {\r\n        /// <summary>Create \"GeneralizedTime\" ASN.1 type from JavaScript \"Date\" type</summary>\r\n\r\n        this.year = input_date.getUTCFullYear();\r\n        this.month = input_date.getUTCMonth() + 1;\r\n        this.day = input_date.getUTCDate();\r\n        this.hour = input_date.getUTCHours();\r\n        this.minute = input_date.getUTCMinutes();\r\n        this.second = input_date.getUTCSeconds();\r\n        this.millisecond = input_date.getUTCMilliseconds();\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.toDate =\r\n    function()\r\n    {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.fromString =\r\n    function(input_string)\r\n    {\r\n        /// <summary>Create \"GeneralizedTime\" ASN.1 type from JavaScript \"String\" type</summary>\r\n\r\n        // #region Initial variables \r\n        var isUTC = false;\r\n\r\n        var timeString = \"\";\r\n        var dateTimeString = \"\";\r\n        var fractionPart = 0;\r\n\r\n        var parser;\r\n\r\n        var hourDifference = 0;\r\n        var minuteDifference = 0;\r\n        // #endregion \r\n\r\n        // #region Convert as UTC time \r\n        if(input_string[input_string.length - 1] == \"Z\")\r\n        {\r\n            timeString = input_string.substr(0, input_string.length - 1);\r\n\r\n            isUTC = true;\r\n        }\r\n        // #endregion \r\n        // #region Convert as local time \r\n        else\r\n        {\r\n            var number = new Number(input_string[input_string.length - 1]);\r\n\r\n            if(isNaN(number.valueOf()))\r\n                throw new Error(\"Wrong input string for convertion\");\r\n\r\n            timeString = input_string;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Check that we do not have a \"+\" and \"-\" symbols inside UTC time \r\n        if(isUTC)\r\n        {\r\n            if(timeString.indexOf(\"+\") != (-1))\r\n                throw new Error(\"Wrong input string for convertion\");\r\n\r\n            if(timeString.indexOf(\"-\") != (-1))\r\n                throw new Error(\"Wrong input string for convertion\");\r\n        }\r\n        // #endregion \r\n        // #region Get \"UTC time difference\" in case of local time\r\n        else\r\n        {\r\n            var multiplier = 1;\r\n            var differencePosition = timeString.indexOf(\"+\");\r\n            var differenceString = \"\";\r\n\r\n            if(differencePosition == (-1))\r\n            {\r\n                differencePosition = timeString.indexOf(\"-\");\r\n                multiplier = (-1);\r\n            }\r\n\r\n            if(differencePosition != (-1))\r\n            {\r\n                differenceString = timeString.substr(differencePosition + 1);\r\n                timeString = timeString.substr(0, differencePosition);\r\n\r\n                if((differenceString.length != 2) && (differenceString.length != 4))\r\n                    throw new Error(\"Wrong input string for convertion\");\r\n\r\n                var number = new Number(differenceString.substr(0, 2));\r\n\r\n                if(isNaN(number.valueOf()))\r\n                    throw new Error(\"Wrong input string for convertion\");\r\n\r\n                hourDifference = multiplier * number;\r\n\r\n                if(differenceString.length == 4)\r\n                {\r\n                    number = new Number(differenceString.substr(2, 2));\r\n\r\n                    if(isNaN(number.valueOf()))\r\n                        throw new Error(\"Wrong input string for convertion\");\r\n\r\n                    minuteDifference = multiplier * number;\r\n                }\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        // #region Get position of fraction point \r\n        var fractionPointPosition = timeString.indexOf(\".\"); // Check for \"full stop\" symbol\r\n        if(fractionPointPosition == (-1))\r\n            fractionPointPosition = timeString.indexOf(\",\"); // Check for \"comma\" symbol\r\n        // #endregion \r\n\r\n        // #region Get fraction part \r\n        if(fractionPointPosition != (-1))\r\n        {\r\n            var fractionPartCheck = new Number(\"0\" + timeString.substr(fractionPointPosition));\r\n\r\n            if(isNaN(fractionPartCheck.valueOf()))\r\n                throw new Error(\"Wrong input string for convertion\");\r\n\r\n            fractionPart = fractionPartCheck.valueOf();\r\n\r\n            dateTimeString = timeString.substr(0, fractionPointPosition);\r\n        }\r\n        else\r\n            dateTimeString = timeString;\r\n        // #endregion \r\n\r\n        // #region Parse internal date \r\n        switch(true)\r\n        {\r\n            case (dateTimeString.length == 8): // \"YYYYMMDD\"\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n                if(fractionPointPosition !== (-1))\r\n                    throw new Error(\"Wrong input string for convertion\"); // Here we should not have a \"fraction point\"\r\n                break;\r\n            case (dateTimeString.length == 10): // \"YYYYMMDDHH\"\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n                if(fractionPointPosition !== (-1))\r\n                {\r\n                    var fractionResult = 60 * fractionPart;\r\n                    this.minute = Math.floor(fractionResult);\r\n\r\n                    fractionResult = 60 * (fractionResult - this.minute);\r\n                    this.second = Math.floor(fractionResult);\r\n\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length == 12): // \"YYYYMMDDHHMM\"\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n                if(fractionPointPosition !== (-1))\r\n                {\r\n                    var fractionResult = 60 * fractionPart;\r\n                    this.second = Math.floor(fractionResult);\r\n\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length == 14): // \"YYYYMMDDHHMMSS\"\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n\r\n                if(fractionPointPosition !== (-1))\r\n                {\r\n                    var fractionResult = 1000 * fractionPart;\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong input string for convertion\");\r\n        }\r\n        // #endregion \r\n\r\n        // #region Put parsed values at right places \r\n        var parser_array = parser.exec(dateTimeString);\r\n        if(parser_array == null)\r\n            throw new Error(\"Wrong input string for convertion\");\r\n\r\n        for(var j = 1; j < parser_array.length; j++)\r\n        {\r\n            switch(j)\r\n            {\r\n                case 1:\r\n                    this.year = parseInt(parser_array[j], 10);\r\n                    break;\r\n                case 2:\r\n                    this.month = parseInt(parser_array[j], 10); \r\n                    break;\r\n                case 3:\r\n                    this.day = parseInt(parser_array[j], 10);\r\n                    break;\r\n                case 4:\r\n                    this.hour = parseInt(parser_array[j], 10) + hourDifference;\r\n                    break;\r\n                case 5:\r\n                    this.minute = parseInt(parser_array[j], 10) + minuteDifference;\r\n                    break;\r\n                case 6:\r\n                    this.second = parseInt(parser_array[j], 10);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Wrong input string for convertion\");\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        // #region Get final date \r\n        if(isUTC == false)\r\n        {\r\n            var tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n\r\n            this.year = tempDate.getUTCFullYear();\r\n            this.month = tempDate.getUTCMonth();\r\n            this.day = tempDate.getUTCDay();\r\n            this.hour = tempDate.getUTCHours();\r\n            this.minute = tempDate.getUTCMinutes();\r\n            this.second = tempDate.getUTCSeconds();\r\n            this.millisecond = tempDate.getUTCMilliseconds();\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.toString =\r\n    function()\r\n    {\r\n        var output_array = new Array();\r\n\r\n        output_array.push(in_window.org.pkijs.padNumber(this.year, 4));\r\n        output_array.push(in_window.org.pkijs.padNumber(this.month, 2));\r\n        output_array.push(in_window.org.pkijs.padNumber(this.day, 2));\r\n        output_array.push(in_window.org.pkijs.padNumber(this.hour, 2));\r\n        output_array.push(in_window.org.pkijs.padNumber(this.minute, 2));\r\n        output_array.push(in_window.org.pkijs.padNumber(this.second, 2));\r\n        if(this.millisecond != 0)\r\n        {\r\n            output_array.push(\".\");\r\n            output_array.push(in_window.org.pkijs.padNumber(this.millisecond, 3));\r\n        }\r\n        output_array.push(\"Z\");\r\n\r\n        return output_array.join('');\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"GENERALIZEDTIME\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.VISIBLESTRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.GENERALIZEDTIME.prototype.block_name.call(this);\r\n        _object.year = this.year;\r\n        _object.month = this.month;\r\n        _object.day = this.day;\r\n        _object.hour = this.hour;\r\n        _object.minute = this.minute;\r\n        _object.second = this.second;\r\n        _object.millisecond = this.millisecond;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATE =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.UTF8STRING.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 31; // DATE\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATE.prototype = new in_window.org.pkijs.asn1.UTF8STRING();\r\n    in_window.org.pkijs.asn1.DATE.constructor = in_window.org.pkijs.asn1.DATE;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATE.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"DATE\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATE.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.UTF8STRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.DATE.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIMEOFDAY =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.UTF8STRING.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 32; // TIMEOFDAY\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIMEOFDAY.prototype = new in_window.org.pkijs.asn1.UTF8STRING();\r\n    in_window.org.pkijs.asn1.TIMEOFDAY.constructor = in_window.org.pkijs.asn1.TIMEOFDAY;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIMEOFDAY.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"TIMEOFDAY\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIMEOFDAY.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.UTF8STRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.TIMEOFDAY.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATETIME =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.UTF8STRING.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 33; // DATETIME\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATETIME.prototype = new in_window.org.pkijs.asn1.UTF8STRING();\r\n    in_window.org.pkijs.asn1.DATETIME.constructor = in_window.org.pkijs.asn1.DATETIME;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATETIME.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"DATETIME\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DATETIME.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.UTF8STRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.DATETIME.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DURATION =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.UTF8STRING.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 34; // DURATION\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DURATION.prototype = new in_window.org.pkijs.asn1.UTF8STRING();\r\n    in_window.org.pkijs.asn1.DURATION.constructor = in_window.org.pkijs.asn1.DURATION;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DURATION.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"DURATION\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.DURATION.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.UTF8STRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.DURATION.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIME =\r\n    function()\r\n    {\r\n        in_window.org.pkijs.asn1.UTF8STRING.call(this, arguments[0]);\r\n\r\n        this.id_block.tag_class = 1; // UNIVERSAL\r\n        this.id_block.tag_number = 14; // TIME\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIME.prototype = new in_window.org.pkijs.asn1.UTF8STRING();\r\n    in_window.org.pkijs.asn1.TIME.constructor = in_window.org.pkijs.asn1.TIME;\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIME.prototype.block_name =\r\n    function()\r\n    {\r\n        /// <summary>Aux function, need to get a block name. Need to have it here for inhiritence</summary>\r\n\r\n        return \"TIME\";\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.TIME.prototype.toJSON =\r\n    function()\r\n    {\r\n        /// <summary>Convertion for the block to JSON object</summary>\r\n\r\n        var _object = in_window.org.pkijs.asn1.UTF8STRING.prototype.toJSON.call(this);\r\n\r\n        _object.block_name = in_window.org.pkijs.asn1.TIME.prototype.block_name.call(this);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of special ASN.1 schema type CHOICE \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.CHOICE =\r\n    function()\r\n    {\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.value = in_window.org.pkijs.getValue(arguments[0], \"value\", new Array()); // Array of ASN.1 types for make a choice from\r\n            this.optional = in_window.org.pkijs.getValue(arguments[0], \"optional\", false);\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of special ASN.1 schema type ANY \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.ANY =\r\n    function()\r\n    {\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.name = in_window.org.pkijs.getValue(arguments[0], \"name\", \"\");\r\n            this.optional = in_window.org.pkijs.getValue(arguments[0], \"optional\", false);\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Declaration of special ASN.1 schema type REPEATED \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.asn1.REPEATED =\r\n    function()\r\n    {\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.name = in_window.org.pkijs.getValue(arguments[0], \"name\", \"\");\r\n            this.optional = in_window.org.pkijs.getValue(arguments[0], \"optional\", false);\r\n            this.value = in_window.org.pkijs.getValue(arguments[0], \"value\", new in_window.org.pkijs.asn1.ANY());\r\n            this.local = in_window.org.pkijs.getValue(arguments[0], \"local\", false); // Could local or global array to store elements\r\n        }\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Major ASN.1 BER decoding function\r\n    //**************************************************************************************\r\n    function fromBER_raw(input_buffer, input_offset, input_length)\r\n    {\r\n        var incoming_offset = input_offset; // Need to store initial offset since \"input_offset\" is changing in the function\r\n\r\n        // #region Local function changing a type for ASN.1 classes \r\n        function local_change_type(input_object, new_type)\r\n        {\r\n            if(input_object instanceof new_type)\r\n                return input_object;\r\n\r\n            var new_object = new new_type();\r\n            new_object.id_block = input_object.id_block;\r\n            new_object.len_block = input_object.len_block;\r\n            new_object.warnings = input_object.warnings;\r\n            new_object.value_before_decode = util_copybuf(input_object.value_before_decode);\r\n\r\n            return new_object;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Create a basic ASN.1 type since we need to return errors and warnings from the function \r\n        var return_object = new in_window.org.pkijs.asn1.ASN1_block();\r\n        // #endregion \r\n\r\n        // #region Basic check for parameters \r\n        if(check_buffer_params(input_buffer, input_offset, input_length) === false)\r\n        {\r\n            return_object.error = \"Wrong input parameters\";\r\n            return {\r\n                offset: (-1),\r\n                result: return_object\r\n            };\r\n        }\r\n        // #endregion \r\n\r\n        // #region Getting Uint8Array from ArrayBuffer \r\n        var int_buffer = new Uint8Array(input_buffer, input_offset, input_length);\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(int_buffer.length == 0)\r\n        {\r\n            this.error = \"Zero buffer length\";\r\n            return {\r\n                offset: (-1),\r\n                result: return_object\r\n            };\r\n        }\r\n        // #endregion \r\n\r\n        // #region Decode indentifcation block of ASN.1 BER structure \r\n        var result_offset = return_object.id_block.fromBER(input_buffer, input_offset, input_length);\r\n        return_object.warnings.concat(return_object.id_block.warnings);\r\n        if(result_offset == (-1))\r\n        {\r\n            return_object.error = return_object.id_block.error;\r\n            return {\r\n                offset: (-1),\r\n                result: return_object\r\n            };\r\n        }\r\n\r\n        input_offset = result_offset;\r\n        input_length -= return_object.id_block.block_length;\r\n        // #endregion \r\n\r\n        // #region Decode length block of ASN.1 BER structure \r\n        result_offset = return_object.len_block.fromBER(input_buffer, input_offset, input_length);\r\n        return_object.warnings.concat(return_object.len_block.warnings);\r\n        if(result_offset == (-1))\r\n        {\r\n            return_object.error = return_object.len_block.error;\r\n            return {\r\n                offset: (-1),\r\n                result: return_object\r\n            };\r\n        }\r\n\r\n        input_offset = result_offset;\r\n        input_length -= return_object.len_block.block_length;\r\n        // #endregion \r\n\r\n        // #region Check for usign indefinite length form in encoding for primitive types \r\n        if((return_object.id_block.is_constructed == false) &&\r\n           (return_object.len_block.is_indefinite_form == true))\r\n        {\r\n            return_object.error = new String(\"Indefinite length form used for primitive encoding form\");\r\n            return {\r\n                offset: (-1),\r\n                result: return_object\r\n            };\r\n        }\r\n        // #endregion \r\n\r\n        // #region Switch ASN.1 block type \r\n        var new_asn1_type = in_window.org.pkijs.asn1.ASN1_block;\r\n\r\n        switch(return_object.id_block.tag_class)\r\n        {\r\n            // #region UNIVERSAL \r\n            case 1: \r\n                // #region Check for reserved tag numbers \r\n                if((return_object.id_block.tag_number >= 37) &&\r\n                   (return_object.id_block.is_hex_only == false))\r\n                {\r\n                    return_object.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n                    return {\r\n                        offset: (-1),\r\n                        result: return_object\r\n                    };\r\n                }\r\n                // #endregion \r\n\r\n                switch(return_object.id_block.tag_number)\r\n                {\r\n                    // #region EOC type \r\n                    case 0:\r\n                        // #region Check for EOC type \r\n                        if((return_object.id_block.is_constructed == true) &&\r\n                           (return_object.len_block.length > 0))\r\n                        {\r\n                            return_object.error = \"Type [UNIVERSAL 0] is reserved\";\r\n                            return {\r\n                                offset: (-1),\r\n                                result: return_object\r\n                            };\r\n                        }\r\n                        // #endregion \r\n\r\n                        new_asn1_type = in_window.org.pkijs.asn1.EOC;\r\n\r\n                        break;\r\n                        // #endregion \r\n                    // #region BOOLEAN type \r\n                    case 1:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.BOOLEAN;\r\n                        break;\r\n                    // #endregion \r\n                    // #region INTEGER type \r\n                    case 2:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.INTEGER;\r\n                        break;\r\n                    // #endregion \r\n                    // #region BITSTRING type \r\n                    case 3:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.BITSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region OCTETSTRING type \r\n                    case 4:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.OCTETSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region NULL type \r\n                    case 5:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.NULL;\r\n                        break;\r\n                    // #endregion \r\n                    // #region OBJECT IDENTIFIER type \r\n                    case 6:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.OID;\r\n                        break;\r\n                    // #endregion \r\n                    // #region ENUMERATED type \r\n                    case 10:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.ENUMERATED;\r\n                        break;\r\n                    // #endregion \r\n                    // #region UTF8STRING type \r\n                    case 12:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.UTF8STRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region TIME type \r\n                    case 14:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.TIME;\r\n                        break;\r\n                    // #endregion \r\n                    // #region ASN.1 reserved type \r\n                    case 15:\r\n                        return_object.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n                        return {\r\n                            offset: (-1),\r\n                            result: return_object\r\n                        };\r\n                        break;\r\n                    // #endregion \r\n                    // #region SEQUENCE type \r\n                    case 16:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.SEQUENCE;\r\n                        break;\r\n                    // #endregion \r\n                    // #region SET type \r\n                    case 17:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.SET;\r\n                        break;\r\n                    // #endregion \r\n                    // #region NUMERICSTRING type \r\n                    case 18:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.NUMERICSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region PRINTABLESTRING type \r\n                    case 19:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.PRINTABLESTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region TELETEXSTRING type \r\n                    case 20:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.TELETEXSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region VIDEOTEXSTRING type \r\n                    case 21:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.VIDEOTEXSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region IA5STRING type \r\n                    case 22:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.IA5STRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region UTCTIME type \r\n                    case 23:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.UTCTIME;\r\n                        break;\r\n                    // #endregion \r\n                    // #region GENERALIZEDTIME type \r\n                    case 24:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.GENERALIZEDTIME;\r\n                        break;\r\n                    // #endregion \r\n                    // #region GRAPHICSTRING type \r\n                    case 25:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.GRAPHICSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region VISIBLESTRING type \r\n                    case 26:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.VISIBLESTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region GENERALSTRING type \r\n                    case 27:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.GENERALSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region UNIVERSALSTRING type \r\n                    case 28:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.UNIVERSALSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region CHARACTERSTRING type \r\n                    case 29:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.CHARACTERSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region BMPSTRING type \r\n                    case 30:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.BMPSTRING;\r\n                        break;\r\n                    // #endregion \r\n                    // #region DATE type \r\n                    case 31:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.DATE;\r\n                        break;\r\n                    // #endregion \r\n                    // #region TIMEOFDAY type \r\n                    case 32:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.TIMEOFDAY;\r\n                        break;\r\n                    // #endregion \r\n                    // #region DATE-TIME type \r\n                    case 33:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.DATETIME;\r\n                        break;\r\n                    // #endregion \r\n                    // #region DURATION type \r\n                    case 34:\r\n                        new_asn1_type = in_window.org.pkijs.asn1.DURATION;\r\n                        break;\r\n                    // #endregion \r\n                    // #region default \r\n                    default:\r\n                        {\r\n                            var new_object;\r\n\r\n                            if(return_object.id_block.is_constructed == true)\r\n                                new_object = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED();\r\n                            else\r\n                                new_object = new in_window.org.pkijs.asn1.ASN1_PRIMITIVE();\r\n\r\n                            new_object.id_block = return_object.id_block;\r\n                            new_object.len_block = return_object.len_block;\r\n                            new_object.warnings = return_object.warnings;\r\n\r\n                            return_object = new_object;\r\n\r\n                            result_offset = return_object.fromBER(input_buffer, input_offset, input_length);\r\n                        }\r\n                    // #endregion \r\n                }\r\n                break;\r\n            // #endregion \r\n            // #region All other tag classes \r\n            case 2: // APPLICATION\r\n            case 3: // CONTEXT-SPECIFIC\r\n            case 4: // PRIVATE\r\n            default:\r\n                {\r\n                    if(return_object.id_block.is_constructed == true)\r\n                        new_asn1_type = in_window.org.pkijs.asn1.ASN1_CONSTRUCTED;\r\n                    else\r\n                        new_asn1_type = in_window.org.pkijs.asn1.ASN1_PRIMITIVE;\r\n                }\r\n            // #endregion \r\n        }\r\n        // #endregion \r\n\r\n        // #region Change type and perform BER decoding \r\n        return_object = local_change_type(return_object, new_asn1_type);\r\n        result_offset = return_object.fromBER(input_buffer, input_offset, (return_object.len_block.is_indefinite_form == true) ? input_length : return_object.len_block.length);\r\n        // #endregion \r\n\r\n        // #region Coping incoming buffer for entire ASN.1 block \r\n        return_object.value_before_decode = util_copybuf_offset(input_buffer, incoming_offset, return_object.block_length);\r\n        // #endregion \r\n\r\n        return {\r\n            offset: result_offset,\r\n            result: return_object\r\n        };\r\n    }\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.fromBER = \r\n    function(input_buffer)\r\n    {\r\n        /// <summary>Major function for decoding ASN.1 BER array into internal library structuries</summary>\r\n        /// <param name=\"input_buffer\" type=\"ArrayBuffer\">ASN.1 BER encoded array of bytes</param>\r\n\r\n        if(input_buffer.byteLength == 0)\r\n        {\r\n            var result = new in_window.org.pkijs.asn1.ASN1_block();\r\n            result.error = \"Input buffer has zero length\";\r\n\r\n            return {\r\n                offset: (-1),\r\n                result: result\r\n            };\r\n        }\r\n\r\n        return fromBER_raw(input_buffer, 0, input_buffer.byteLength);\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Major scheme verification function \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.compareSchema =\r\n    function(root, input_asn1_data, input_asn1_schema)\r\n    {\r\n        // #region Special case for CHOICE schema element type \r\n        if(input_asn1_schema instanceof in_window.org.pkijs.asn1.CHOICE)\r\n        {\r\n            var choice_result = false;\r\n\r\n            for(var j = 0; j < input_asn1_schema.value.length; j++)\r\n            {\r\n                var result = in_window.org.pkijs.compareSchema(root, input_asn1_data, input_asn1_schema.value[j]);\r\n                if(result.verified === true)\r\n                    return {\r\n                        verified: true,\r\n                        result: root\r\n                    };\r\n            }\r\n\r\n            if(choice_result === false)\r\n            {\r\n                var _result = {\r\n                    verified: false,\r\n                    result: {\r\n                        error: \"Wrong values for CHOICE type\"\r\n                    }\r\n                };\r\n\r\n                if(input_asn1_schema.hasOwnProperty('name'))\r\n                    _result.name = input_asn1_schema.name;\r\n\r\n                return _result;\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        // #region Special case for ANY schema element type \r\n        if(input_asn1_schema instanceof in_window.org.pkijs.asn1.ANY)\r\n        {\r\n            // #region Add named component of ASN.1 schema \r\n            if(input_asn1_schema.hasOwnProperty('name'))\r\n                root[input_asn1_schema.name] = input_asn1_data;\r\n            // #endregion \r\n\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        // #endregion \r\n\r\n        // #region Initial check \r\n        if((root instanceof Object) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong root object\" }\r\n            };\r\n\r\n        if((input_asn1_data instanceof Object) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 data\" }\r\n            };\r\n\r\n        if((input_asn1_schema instanceof Object) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        if(('id_block' in input_asn1_schema) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n        // #endregion \r\n\r\n        // #region Comparing id_block properties in ASN.1 data and ASN.1 schema \r\n        // #region Encode and decode ASN.1 schema id_block \r\n        /// <remarks>This encoding/decoding is neccessary because could be an errors in schema definition</remarks>\r\n        if(('fromBER' in input_asn1_schema.id_block) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        if(('toBER' in input_asn1_schema.id_block) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        var encoded_id = input_asn1_schema.id_block.toBER(false);\r\n        if(encoded_id.byteLength === 0)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Error encoding id_block for ASN.1 schema\" }\r\n            };\r\n\r\n        var decoded_offset = input_asn1_schema.id_block.fromBER(encoded_id, 0, encoded_id.byteLength);\r\n        if(decoded_offset === (-1))\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Error decoding id_block for ASN.1 schema\" }\r\n            };\r\n        // #endregion \r\n\r\n        // #region tag_class \r\n        if(input_asn1_schema.id_block.hasOwnProperty('tag_class') === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        if(input_asn1_schema.id_block.tag_class !== input_asn1_data.id_block.tag_class)\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        // #endregion \r\n        // #region tag_number \r\n        if(input_asn1_schema.id_block.hasOwnProperty('tag_number') === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        if(input_asn1_schema.id_block.tag_number !== input_asn1_data.id_block.tag_number)\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        // #endregion \r\n        // #region is_constructed \r\n        if(input_asn1_schema.id_block.hasOwnProperty('is_constructed') === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        if(input_asn1_schema.id_block.is_constructed !== input_asn1_data.id_block.is_constructed)\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        // #endregion \r\n        // #region is_hex_only \r\n        if(('is_hex_only' in input_asn1_schema.id_block) === false) // Since 'is_hex_only' is an inhirited property\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n\r\n        if(input_asn1_schema.id_block.is_hex_only !== input_asn1_data.id_block.is_hex_only)\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        // #endregion \r\n        // #region value_hex \r\n        if(input_asn1_schema.id_block.is_hex_only === true)\r\n        {\r\n            if(('value_hex' in input_asn1_schema.id_block) === false) // Since 'value_hex' is an inhirited property\r\n                return {\r\n                    verified: false,\r\n                    result: { error: \"Wrong ASN.1 schema\" }\r\n                };\r\n\r\n            var schema_view = new Uint8Array(input_asn1_schema.id_block.value_hex);\r\n            var asn1_view = new Uint8Array(input_asn1_data.id_block.value_hex);\r\n\r\n            if(schema_view.length !== asn1_view.length)\r\n                return {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n\r\n            for(var i = 0; i < schema_view.length; i++)\r\n            {\r\n                if(schema_view[i] !== asn1_view[1])\r\n                    return {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n            }\r\n        }\r\n        // #endregion \r\n        // #endregion \r\n\r\n        // #region Add named component of ASN.1 schema \r\n        if(input_asn1_schema.hasOwnProperty('name'))\r\n        {\r\n            input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n            if(input_asn1_schema.name !== \"\")\r\n                root[input_asn1_schema.name] = input_asn1_data;\r\n        }\r\n        // #endregion \r\n\r\n        // #region Getting next ASN.1 block for comparition \r\n        if(input_asn1_schema.id_block.is_constructed === true)\r\n        {\r\n            var admission = 0;\r\n            var result = { verified: false };\r\n\r\n            var max_length = input_asn1_schema.value_block.value.length;\r\n\r\n            if(max_length > 0)\r\n            {\r\n                if(input_asn1_schema.value_block.value[0] instanceof in_window.org.pkijs.asn1.REPEATED)\r\n                    max_length = input_asn1_data.value_block.value.length;\r\n            }\r\n\r\n            // #region Special case when constructive value has no elements \r\n            if(max_length === 0)\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            // #endregion \r\n\r\n            // #region Special case when \"input_asn1_data\" has no values and \"input_asn1_schema\" has all optional values\r\n            if((input_asn1_data.value_block.value.length === 0) && \r\n               (input_asn1_schema.value_block.value.length !== 0))\r\n            {\r\n                var _optional = true;\r\n\r\n                for(var i = 0; i < input_asn1_schema.value_block.value.length; i++)\r\n                    _optional = _optional && (input_asn1_schema.value_block.value[i].optional || false);\r\n\r\n                if(_optional === true)\r\n                {\r\n                    return {\r\n                        verified: true,\r\n                        result: root\r\n                    };\r\n                }\r\n                else\r\n                {\r\n                    // #region Delete early added name of block \r\n                    if(input_asn1_schema.hasOwnProperty('name'))\r\n                    {\r\n                        input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n                        if(input_asn1_schema.name !== \"\")\r\n                            delete root[input_asn1_schema.name];\r\n                    }\r\n                    // #endregion \r\n\r\n                    root.error = \"Inconsistent object length\";\r\n\r\n                    return {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n                }\r\n            }\r\n            // #endregion \r\n\r\n            for(var i = 0; i < max_length; i++)\r\n            {\r\n                // #region Special case when there is an \"optional\" element of ASN.1 schema at the end \r\n                if((i - admission) >= input_asn1_data.value_block.value.length)\r\n                {\r\n                    if(input_asn1_schema.value_block.value[i].optional === false)\r\n                    {\r\n                        var _result = {\r\n                            verified: false,\r\n                            result: root\r\n                        };\r\n\r\n                        root.error = \"Inconsistent length between ASN.1 data and schema\";\r\n\r\n                        // #region Delete early added name of block \r\n                        if(input_asn1_schema.hasOwnProperty('name'))\r\n                        {\r\n                            input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n                            if(input_asn1_schema.name !== \"\")\r\n                            {\r\n                                delete root[input_asn1_schema.name];\r\n                                _result.name = input_asn1_schema.name;\r\n                            }\r\n                        }\r\n                        // #endregion \r\n\r\n                        return _result;\r\n                    }\r\n                }\r\n                    // #endregion \r\n                else\r\n                {\r\n                    // #region Special case for REPEATED type of ASN.1 schema element \r\n                    if(input_asn1_schema.value_block.value[0] instanceof in_window.org.pkijs.asn1.REPEATED)\r\n                    {\r\n                        result = in_window.org.pkijs.compareSchema(root, input_asn1_data.value_block.value[i], input_asn1_schema.value_block.value[0].value);\r\n                        if(result.verified === false)\r\n                        {\r\n                            if(input_asn1_schema.value_block.value[0].optional === true)\r\n                                admission++;\r\n                            else\r\n                            {\r\n                                // #region Delete early added name of block \r\n                                if(input_asn1_schema.hasOwnProperty('name'))\r\n                                {\r\n                                    input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n                                    if(input_asn1_schema.name !== \"\")\r\n                                        delete root[input_asn1_schema.name];\r\n                                }\r\n                                // #endregion \r\n\r\n                                return result;\r\n                            }\r\n                        }\r\n\r\n                        if((\"name\" in input_asn1_schema.value_block.value[0]) && (input_asn1_schema.value_block.value[0].name.length > 0))\r\n                        {\r\n                            var array_root = {};\r\n\r\n                            if((\"local\" in input_asn1_schema.value_block.value[0]) && (input_asn1_schema.value_block.value[0].local === true))\r\n                                array_root = input_asn1_data;\r\n                            else\r\n                                array_root = root;\r\n\r\n                            if(typeof array_root[input_asn1_schema.value_block.value[0].name] === \"undefined\")\r\n                                array_root[input_asn1_schema.value_block.value[0].name] = new Array();\r\n\r\n                            array_root[input_asn1_schema.value_block.value[0].name].push(input_asn1_data.value_block.value[i]);\r\n                        }\r\n                    }\r\n                        // #endregion \r\n                    else\r\n                    {\r\n                        result = in_window.org.pkijs.compareSchema(root, input_asn1_data.value_block.value[i - admission], input_asn1_schema.value_block.value[i]);\r\n                        if(result.verified === false)\r\n                        {\r\n                            if(input_asn1_schema.value_block.value[i].optional === true)\r\n                                admission++;\r\n                            else\r\n                            {\r\n                                // #region Delete early added name of block \r\n                                if(input_asn1_schema.hasOwnProperty('name'))\r\n                                {\r\n                                    input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n                                    if(input_asn1_schema.name !== \"\")\r\n                                        delete root[input_asn1_schema.name];\r\n                                }\r\n                                // #endregion \r\n\r\n                                return result;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(result.verified === false) // The situation may take place if last element is \"optional\" and verification failed\r\n            {\r\n                var _result = {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n\r\n                // #region Delete early added name of block \r\n                if(input_asn1_schema.hasOwnProperty('name'))\r\n                {\r\n                    input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n                    if(input_asn1_schema.name !== \"\")\r\n                    {\r\n                        delete root[input_asn1_schema.name];\r\n                        _result.name = input_asn1_schema.name;\r\n                    }\r\n                }\r\n                // #endregion \r\n\r\n                return _result;\r\n            }\r\n\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        // #endregion \r\n        // #region Ability to parse internal value for primitive-encoded value (value of OCTETSTRING, for example)\r\n        else\r\n        {\r\n            if( (\"primitive_schema\" in input_asn1_schema) &&\r\n                (\"value_hex\" in input_asn1_data.value_block) )\r\n            {\r\n                // #region Decoding of raw ASN.1 data \r\n                var asn1 = in_window.org.pkijs.fromBER(input_asn1_data.value_block.value_hex);\r\n                if(asn1.offset === (-1))\r\n                {\r\n                    var _result = {\r\n                        verified: false,\r\n                        result: asn1.result\r\n                    };\r\n\r\n                    // #region Delete early added name of block \r\n                    if(input_asn1_schema.hasOwnProperty('name'))\r\n                    {\r\n                        input_asn1_schema.name = input_asn1_schema.name.replace(/^\\s+|\\s+$/g, '');\r\n                        if(input_asn1_schema.name !== \"\")\r\n                        {\r\n                            delete root[input_asn1_schema.name];\r\n                            _result.name = input_asn1_schema.name;\r\n                        }\r\n                    }\r\n                    // #endregion \r\n\r\n                    return _result;\r\n                }\r\n                // #endregion \r\n\r\n                return in_window.org.pkijs.compareSchema(root, asn1.result, input_asn1_schema.primitive_schema);\r\n            }\r\n            else\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.verifySchema =\r\n    function(input_buffer, input_schema)\r\n    {\r\n        // #region Initial check \r\n        if((input_schema instanceof Object) === false)\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema type\" }\r\n            };\r\n        // #endregion \r\n\r\n        // #region Decoding of raw ASN.1 data \r\n        var asn1 = in_window.org.pkijs.fromBER(input_buffer);\r\n        if(asn1.offset === (-1))\r\n            return {\r\n                verified: false,\r\n                result: asn1.result\r\n            };\r\n        // #endregion \r\n\r\n        // #region Compare ASN.1 struct with input schema \r\n        return in_window.org.pkijs.compareSchema(asn1.result, asn1.result, input_schema);\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Major function converting JSON to ASN.1 objects \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.fromJSON = \r\n    function(json)\r\n    {\r\n        /// <summary>Converting from JSON to ASN.1 objects</summary>\r\n        /// <param name=\"json\" type=\"String|Object\">JSON string or object to convert to ASN.1 objects</param>\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n}\r\n)(typeof exports !== \"undefined\" ? exports : window);\r\n\r\n//x509_schema.js\r\n/*\r\n * Copyright (c) 2014, GMO GlobalSign\r\n * Copyright (c) 2015, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2014-2015, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, \r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors \r\n *    may be used to endorse or promote products derived from this software without \r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT \r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \r\n * OF SUCH DAMAGE. \r\n *\r\n */\r\n(\r\nfunction(in_window)\r\n{\r\n    //**************************************************************************************\r\n    // #region Declaration of global variables \r\n    //**************************************************************************************\r\n    // #region \"org\" namespace \r\n    if(typeof in_window.org === \"undefined\")\r\n        in_window.org = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org !== \"object\")\r\n            throw new Error(\"Name org already exists and it's not an object\");\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs\" namespace \r\n    if(typeof in_window.org.pkijs === \"undefined\")\r\n        in_window.org.pkijs = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs !== \"object\")\r\n            throw new Error(\"Name org.pkijs already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs.schema\" namespace \r\n    if(typeof in_window.org.pkijs.schema === \"undefined\")\r\n        in_window.org.pkijs.schema = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs.schema !== \"object\")\r\n            throw new Error(\"Name org.pkijs.schema already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs.schema));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs.schema.x509\" namespace \r\n    if(typeof in_window.org.pkijs.schema.x509 === \"undefined\")\r\n        in_window.org.pkijs.schema.x509 = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs.schema.x509 !== \"object\")\r\n            throw new Error(\"Name org.pkijs.schema.x509 already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs.schema.x509));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"local\" namespace \r\n    var local = {};\r\n    // #endregion   \r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"Time\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.TIME =\r\n    function(input_names, input_optional)\r\n    {\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n        var optional = (input_optional || false);\r\n\r\n        return (new in_window.org.pkijs.asn1.CHOICE({\r\n            optional: optional,\r\n            value: [\r\n                new in_window.org.pkijs.asn1.UTCTIME({ name: (names.utcTimeName || \"\") }),\r\n                new in_window.org.pkijs.asn1.GENERALIZEDTIME({ name: (names.generalTimeName || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for X.509 v3 certificate (RFC5280)\r\n    //**************************************************************************************\r\n    local.tbsCertificate =\r\n    function()\r\n    {\r\n        //TBSCertificate  ::=  SEQUENCE  {\r\n        //    version         [0]  EXPLICIT Version DEFAULT v1,\r\n        //    serialNumber         CertificateSerialNumber,\r\n        //    signature            AlgorithmIdentifier,\r\n        //    issuer               Name,\r\n        //    validity             Validity,\r\n        //    subject              Name,\r\n        //    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n        //    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n        //                         -- If present, version MUST be v2 or v3\r\n        //    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n        //                         -- If present, version MUST be v2 or v3\r\n        //    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n        //    -- If present, version MUST be v3\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"tbsCertificate\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                value: [\r\n                    new in_window.org.pkijs.asn1.INTEGER({ name: (names.tbsCertificate_version || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n                ]\r\n            }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.tbsCertificate_serialNumber || \"tbsCertificate.serialNumber\") }),\r\n                in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.signature || {\r\n                    names: {\r\n                        block_name: \"tbsCertificate.signature\"\r\n                    }\r\n                }),\r\n                in_window.org.pkijs.schema.RDN(names.issuer || {\r\n                    names: {\r\n                        block_name: \"tbsCertificate.issuer\"\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    name: (names.tbsCertificate_validity || \"tbsCertificate.validity\"),\r\n                    value: [\r\n                        in_window.org.pkijs.schema.TIME(names.not_before || {\r\n                            names: {\r\n                                utcTimeName: \"tbsCertificate.notBefore\",\r\n                                generalTimeName: \"tbsCertificate.notBefore\"\r\n                            }\r\n                        }),\r\n                        in_window.org.pkijs.schema.TIME(names.not_after || {\r\n                            names: {\r\n                                utcTimeName: \"tbsCertificate.notAfter\",\r\n                                generalTimeName: \"tbsCertificate.notAfter\"\r\n                            }\r\n                        })\r\n                    ]\r\n                }),\r\n                in_window.org.pkijs.schema.RDN(names.subject || {\r\n                    names: {\r\n                        block_name: \"tbsCertificate.subject\"\r\n                    }\r\n                }),\r\n                in_window.org.pkijs.schema.PUBLIC_KEY_INFO(names.subjectPublicKeyInfo || {\r\n                    names: {\r\n                        block_name: \"tbsCertificate.subjectPublicKeyInfo\"\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.tbsCertificate_issuerUniqueID ||\"tbsCertificate.issuerUniqueID\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    }\r\n                }), // IMPLICIT bistring value\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.tbsCertificate_subjectUniqueID ||\"tbsCertificate.subjectUniqueID\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    }\r\n                }), // IMPLICIT bistring value\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 3 // [3]\r\n                    },\r\n                    value: [in_window.org.pkijs.schema.EXTENSIONS(names.extensions || {\r\n                        names: {\r\n                            block_name: \"tbsCertificate.extensions\"\r\n                        }\r\n                    })]\r\n                }) // EXPLICIT SEQUENCE value\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.CERT =\r\n    function()\r\n    {\r\n        //Certificate  ::=  SEQUENCE  {\r\n        //    tbsCertificate       TBSCertificate,\r\n        //    signatureAlgorithm   AlgorithmIdentifier,\r\n        //    signatureValue       BIT STRING  }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                local.tbsCertificate(names.tbsCertificate),\r\n                in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.signatureAlgorithm || {\r\n                    names: {\r\n                        block_name: \"signatureAlgorithm\"\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.BITSTRING({ name: (names.signatureValue || \"signatureValue\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for X.509 CRL (Certificate Revocation List)(RFC5280)  \r\n    //**************************************************************************************\r\n    local.tbsCertList =\r\n    function()\r\n    {\r\n        //TBSCertList  ::=  SEQUENCE  {\r\n        //    version                 Version OPTIONAL,\r\n        //                                 -- if present, MUST be v2\r\n        //    signature               AlgorithmIdentifier,\r\n        //    issuer                  Name,\r\n        //    thisUpdate              Time,\r\n        //    nextUpdate              Time OPTIONAL,\r\n        //    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n        //        userCertificate         CertificateSerialNumber,\r\n        //        revocationDate          Time,\r\n        //        crlEntryExtensions      Extensions OPTIONAL\r\n        //        -- if present, version MUST be v2\r\n        //    }  OPTIONAL,\r\n        //    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n        //    -- if present, version MUST be v2\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"tbsCertList\"),\r\n            value: [\r\n                        new in_window.org.pkijs.asn1.INTEGER({\r\n                            optional: true,\r\n                            name: (names.tbsCertList_version || \"tbsCertList.version\"),\r\n                            value: 2\r\n                        }), // EXPLICIT integer value (v2)\r\n                        in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.signature || {\r\n                            names: {\r\n                                block_name: \"tbsCertList.signature\"\r\n                            }\r\n                        }),\r\n                        in_window.org.pkijs.schema.RDN(names.issuer || {\r\n                            names: {\r\n                                block_name: \"tbsCertList.issuer\"\r\n                            }\r\n                        }),\r\n                        in_window.org.pkijs.schema.TIME(names.tbsCertList_thisUpdate || {\r\n                            names: {\r\n                                utcTimeName: \"tbsCertList.thisUpdate\",\r\n                                generalTimeName: \"tbsCertList.thisUpdate\"\r\n                            }\r\n                        }),\r\n                        in_window.org.pkijs.schema.TIME(names.tbsCertList_nextUpdate || {\r\n                            names: {\r\n                                utcTimeName: \"tbsCertList.nextUpdate\",\r\n                                generalTimeName: \"tbsCertList.nextUpdate\"\r\n                            }\r\n                        }, true),\r\n                        new in_window.org.pkijs.asn1.SEQUENCE({\r\n                            optional: true,\r\n                            value: [\r\n                                new in_window.org.pkijs.asn1.REPEATED({\r\n                                    name: (names.tbsCertList_revokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n                                    value: new in_window.org.pkijs.asn1.SEQUENCE({\r\n                                        value: [\r\n                                            new in_window.org.pkijs.asn1.INTEGER(),\r\n                                            in_window.org.pkijs.schema.TIME(),\r\n                                            in_window.org.pkijs.schema.EXTENSIONS({}, true)\r\n                                        ]\r\n                                    })\r\n                                })\r\n                            ]\r\n                        }),\r\n                        new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                            optional: true,\r\n                            id_block: {\r\n                                tag_class: 3, // CONTEXT-SPECIFIC\r\n                                tag_number: 0 // [0]\r\n                            },\r\n                            value: [in_window.org.pkijs.schema.EXTENSIONS(names.crlExtensions || {\r\n                                names: {\r\n                                    block_name: \"tbsCertList.extensions\"\r\n                                }\r\n                            })]\r\n                        }) // EXPLICIT SEQUENCE value\r\n                    ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.CRL =\r\n    function()\r\n    {\r\n        //CertificateList  ::=  SEQUENCE  {\r\n        //    tbsCertList          TBSCertList,\r\n        //    signatureAlgorithm   AlgorithmIdentifier,\r\n        //    signatureValue       BIT STRING  }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"CertificateList\"),\r\n            value: [\r\n                local.tbsCertList(arguments[0]),\r\n                in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.signatureAlgorithm || {\r\n                    names: {\r\n                        block_name: \"signatureAlgorithm\"\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.BITSTRING({ name: (names.signatureValue || \"signatureValue\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for PKCS#10 certificate request \r\n    //**************************************************************************************\r\n    local.CertificationRequestInfo =\r\n    function()\r\n    {\r\n        //CertificationRequestInfo ::= SEQUENCE {\r\n        //    version       INTEGER { v1(0) } (v1,...),\r\n        //    subject       Name,\r\n        //    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n        //    attributes    [0] Attributes{{ CRIAttributes }}\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.CertificationRequestInfo_version || \"CertificationRequestInfo.version\") }),\r\n                new in_window.org.pkijs.schema.RDN(names.subject || {\r\n                    names: {\r\n                        block_name: \"CertificationRequestInfo.subject\"\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.schema.PUBLIC_KEY_INFO({\r\n                    names: {\r\n                        block_name: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            optional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n                            name: (names.CertificationRequestInfo_attributes || \"CertificationRequestInfo.attributes\"),\r\n                            value: in_window.org.pkijs.schema.ATTRIBUTE(names.attributes || {})\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.PKCS10 =\r\n    function()\r\n    {\r\n        //CertificationRequest ::= SEQUENCE {\r\n        //    certificationRequestInfo CertificationRequestInfo,\r\n        //    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n        //    signature                BIT STRING\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                local.CertificationRequestInfo(names.certificationRequestInfo || {}),\r\n                new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    name: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.OID(),\r\n                        new in_window.org.pkijs.asn1.ANY({ optional: true })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.BITSTRING({ name: (names.signatureValue || \"signatureValue\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for PKCS#8 private key bag\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.PKCS8 =\r\n    function()\r\n    {\r\n        //PrivateKeyInfo ::= SEQUENCE {\r\n        //    version Version,\r\n        //    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n        //    privateKey PrivateKey,\r\n        //    attributes [0] Attributes OPTIONAL }\r\n        //\r\n        //Version ::= INTEGER {v1(0)} (v1,...)\r\n        //\r\n        //PrivateKey ::= OCTET STRING\r\n        //\r\n        //Attributes ::= SET OF Attribute\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.version || \"\") }),\r\n                in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.privateKeyAlgorithm || \"\"),\r\n                new in_window.org.pkijs.asn1.OCTETSTRING({ name: (names.privateKey || \"\") }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.attributes || \"\"),\r\n                            value: in_window.org.pkijs.schema.ATTRIBUTE()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"GeneralName\" type \r\n    //**************************************************************************************\r\n    local.BuiltInStandardAttributes =\r\n    function(optional_flag)\r\n    {\r\n        //BuiltInStandardAttributes ::= SEQUENCE {\r\n        //    country-name                  CountryName OPTIONAL,\r\n        //    administration-domain-name    AdministrationDomainName OPTIONAL,\r\n        //    network-address           [0] IMPLICIT NetworkAddress OPTIONAL,\r\n        //    terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,\r\n        //    private-domain-name       [2] PrivateDomainName OPTIONAL,\r\n        //    organization-name         [3] IMPLICIT OrganizationName OPTIONAL,\r\n        //    numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier OPTIONAL,\r\n        //    personal-name             [5] IMPLICIT PersonalName OPTIONAL,\r\n        //    organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }\r\n\r\n        if(typeof optional_flag === \"undefined\")\r\n            optional_flag = false;\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            optional: optional_flag,\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 2, // APPLICATION-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    name: (names.country_name || \"\"),\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.CHOICE({\r\n                            value: [\r\n                                new in_window.org.pkijs.asn1.NUMERICSTRING(),\r\n                                new in_window.org.pkijs.asn1.PRINTABLESTRING()\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 2, // APPLICATION-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    },\r\n                    name: (names.administration_domain_name || \"\"),\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.CHOICE({\r\n                            value: [\r\n                                new in_window.org.pkijs.asn1.NUMERICSTRING(),\r\n                                new in_window.org.pkijs.asn1.PRINTABLESTRING()\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    name: (names.network_address || \"\"),\r\n                    is_hex_only: true\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    name: (names.terminal_identifier || \"\"),\r\n                    is_hex_only: true\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    },\r\n                    name: (names.private_domain_name || \"\"),\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.CHOICE({\r\n                            value: [\r\n                                new in_window.org.pkijs.asn1.NUMERICSTRING(),\r\n                                new in_window.org.pkijs.asn1.PRINTABLESTRING()\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 3 // [3]\r\n                    },\r\n                    name: (names.organization_name || \"\"),\r\n                    is_hex_only: true\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    optional: true,\r\n                    name: (names.numeric_user_identifier || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 4 // [4]\r\n                    },\r\n                    is_hex_only: true\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    name: (names.personal_name || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 5 // [5]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                            id_block: {\r\n                                tag_class: 3, // CONTEXT-SPECIFIC\r\n                                tag_number: 0 // [0]\r\n                            },\r\n                            is_hex_only: true\r\n                        }),\r\n                        new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                            optional: true,\r\n                            id_block: {\r\n                                tag_class: 3, // CONTEXT-SPECIFIC\r\n                                tag_number: 1 // [1]\r\n                            },\r\n                            is_hex_only: true\r\n                        }),\r\n                        new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                            optional: true,\r\n                            id_block: {\r\n                                tag_class: 3, // CONTEXT-SPECIFIC\r\n                                tag_number: 2 // [2]\r\n                            },\r\n                            is_hex_only: true\r\n                        }),\r\n                        new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                            optional: true,\r\n                            id_block: {\r\n                                tag_class: 3, // CONTEXT-SPECIFIC\r\n                                tag_number: 3 // [3]\r\n                            },\r\n                            is_hex_only: true\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    name: (names.organizational_unit_names || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 6 // [6]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            value: new in_window.org.pkijs.asn1.PRINTABLESTRING()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    local.BuiltInDomainDefinedAttributes =\r\n    function(optional_flag)\r\n    {\r\n        if(typeof optional_flag === \"undefined\")\r\n            optional_flag = false;\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            optional: optional_flag,\r\n            value: [\r\n                new in_window.org.pkijs.asn1.PRINTABLESTRING(),\r\n                new in_window.org.pkijs.asn1.PRINTABLESTRING()\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    local.ExtensionAttributes =\r\n    function(optional_flag)\r\n    {\r\n        if(typeof optional_flag === \"undefined\")\r\n            optional_flag = false;\r\n\r\n        return (new in_window.org.pkijs.asn1.SET({\r\n            optional: optional_flag,\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    is_hex_only: true\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    value: [new in_window.org.pkijs.asn1.ANY()]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.GENERAL_NAME =\r\n    function()\r\n    {\r\n        /// <remarks>By passing \"names\" array as an argument you can name each element of \"GENERAL NAME\" choice</remarks>\r\n\r\n        //GeneralName ::= CHOICE {\r\n        //    otherName                       [0]     OtherName,\r\n        //    rfc822Name                      [1]     IA5String,\r\n        //    dNSName                         [2]     IA5String,\r\n        //    x400Address                     [3]     ORAddress,\r\n        //    directoryName                   [4]     Name,\r\n        //    ediPartyName                    [5]     EDIPartyName,\r\n        //    uniformResourceIdentifier       [6]     IA5String,\r\n        //    iPAddress                       [7]     OCTET STRING,\r\n        //    registeredID                    [8]     OBJECT IDENTIFIER }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.CHOICE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    name: (names.block_name || \"\"),\r\n                    value: [\r\n                            new in_window.org.pkijs.asn1.OID(),\r\n                            new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                id_block: {\r\n                                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                                    tag_number: 0 // [0]\r\n                                },\r\n                                value: [new in_window.org.pkijs.asn1.ANY()]\r\n                            })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.block_name || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.block_name || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 3 // [3]\r\n                    },\r\n                    name: (names.block_name || \"\"),\r\n                    value: [\r\n                            local.BuiltInStandardAttributes(false),\r\n                            local.BuiltInDomainDefinedAttributes(true),\r\n                            local.ExtensionAttributes(true)\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 4 // [4]\r\n                    },\r\n                    name: (names.block_name || \"\"),\r\n                    value: [in_window.org.pkijs.schema.RDN(names.directoryName || {})]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 5 // [5]\r\n                    },\r\n                    name: (names.block_name || \"\"),\r\n                    value: [\r\n                            new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                optional: true,\r\n                                id_block: {\r\n                                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                                    tag_number: 0 // [0]\r\n                                },\r\n                                value: [\r\n                                    new in_window.org.pkijs.asn1.CHOICE({\r\n                                        value: [\r\n                                            new in_window.org.pkijs.asn1.TELETEXSTRING(),\r\n                                            new in_window.org.pkijs.asn1.PRINTABLESTRING(),\r\n                                            new in_window.org.pkijs.asn1.UNIVERSALSTRING(),\r\n                                            new in_window.org.pkijs.asn1.UTF8STRING(),\r\n                                            new in_window.org.pkijs.asn1.BMPSTRING()\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            }),\r\n                            new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                id_block: {\r\n                                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                                    tag_number: 1 // [1]\r\n                                },\r\n                                value: [\r\n                                    new in_window.org.pkijs.asn1.CHOICE({\r\n                                        value: [\r\n                                            new in_window.org.pkijs.asn1.TELETEXSTRING(),\r\n                                            new in_window.org.pkijs.asn1.PRINTABLESTRING(),\r\n                                            new in_window.org.pkijs.asn1.UNIVERSALSTRING(),\r\n                                            new in_window.org.pkijs.asn1.UTF8STRING(),\r\n                                            new in_window.org.pkijs.asn1.BMPSTRING()\r\n                                        ]\r\n                                    })\r\n                                ]\r\n                            })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.block_name || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 6 // [6]\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.block_name || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 7 // [7]\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.block_name || \"\"),\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 8 // [8]\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"AlgorithmIdentifier\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER =\r\n    function()\r\n    {\r\n        //AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        //    algorithm               OBJECT IDENTIFIER,\r\n        //    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            optional: (names.optional || false),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.algorithmIdentifier || \"\") }),\r\n                new in_window.org.pkijs.asn1.ANY({ name: (names.algorithmParams || \"\"), optional: true })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"RSAPublicKey\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.RSAPublicKey =\r\n    function()\r\n    {\r\n        //RSAPublicKey ::= SEQUENCE {\r\n        //    modulus           INTEGER,  -- n\r\n        //    publicExponent    INTEGER   -- e\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.modulus || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.publicExponent || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"OtherPrimeInfo\" type (RFC3447) \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.OtherPrimeInfo =\r\n    function()\r\n    {\r\n        //OtherPrimeInfo ::= SEQUENCE {\r\n        //    prime             INTEGER,  -- ri\r\n        //    exponent          INTEGER,  -- di\r\n        //    coefficient       INTEGER   -- ti\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.prime || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.exponent || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.coefficient || \"\") })\r\n    ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"RSAPrivateKey\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.RSAPrivateKey =\r\n    function()\r\n    {\r\n        //RSAPrivateKey ::= SEQUENCE {\r\n        //    version           Version,\r\n        //    modulus           INTEGER,  -- n\r\n        //    publicExponent    INTEGER,  -- e\r\n        //    privateExponent   INTEGER,  -- d\r\n        //    prime1            INTEGER,  -- p\r\n        //    prime2            INTEGER,  -- q\r\n        //    exponent1         INTEGER,  -- d mod (p-1)\r\n        //    exponent2         INTEGER,  -- d mod (q-1)\r\n        //    coefficient       INTEGER,  -- (inverse of q) mod p\r\n        //    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n        //}\r\n        //\r\n        //OtherPrimeInfos ::= SEQUENCE SIZE(1..MAX) OF OtherPrimeInfo\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.version || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.modulus || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.publicExponent || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.privateExponent || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.prime1 || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.prime2 || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.exponent1 || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.exponent2 || \"\") }),\r\n                new in_window.org.pkijs.asn1.INTEGER({ name: (names.coefficient || \"\") }),\r\n                new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    optional: true,\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.otherPrimeInfos || \"\"),\r\n                            value: in_window.org.pkijs.schema.x509.OtherPrimeInfo(names.otherPrimeInfo || {})\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"RSASSA-PSS-params\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.RSASSA_PSS_params =\r\n    function()\r\n    {\r\n        //RSASSA-PSS-params  ::=  SEQUENCE  {\r\n        //    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,\r\n        //    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,\r\n        //    saltLength         [2] INTEGER DEFAULT 20,\r\n        //    trailerField       [3] INTEGER DEFAULT 1  }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    optional: true,\r\n                    value: [in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.hashAlgorithm || {})]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    optional: true,\r\n                    value: [in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.maskGenAlgorithm || {})]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    },\r\n                    optional: true,\r\n                    value: [new in_window.org.pkijs.asn1.INTEGER({ name: (names.saltLength || \"\") })]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 3 // [3]\r\n                    },\r\n                    optional: true,\r\n                    value: [new in_window.org.pkijs.asn1.INTEGER({ name: (names.trailerField || \"\") })]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"SubjectPublicKeyInfo\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.PUBLIC_KEY_INFO =\r\n    function()\r\n    {\r\n        //SubjectPublicKeyInfo  ::=  SEQUENCE  {\r\n        //    algorithm            AlgorithmIdentifier,\r\n        //    subjectPublicKey     BIT STRING  }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER(names.algorithm || {}),\r\n                new in_window.org.pkijs.asn1.BITSTRING({ name: (names.subjectPublicKey || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"Attribute\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.ATTRIBUTE =\r\n    function()\r\n    {\r\n        // Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n        //    type   ATTRIBUTE.&id({IOSet}),\r\n        //    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.type || \"\") }),\r\n                new in_window.org.pkijs.asn1.SET({\r\n                    name: (names.set_name || \"\"),\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.values || \"\"),\r\n                            value: new in_window.org.pkijs.asn1.ANY()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"AttributeTypeAndValue\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.ATTR_TYPE_AND_VALUE =\r\n    function()\r\n    {\r\n        //AttributeTypeAndValue ::= SEQUENCE {\r\n        //    type     AttributeType,\r\n        //    value    AttributeValue }\r\n        //\r\n        //AttributeType ::= OBJECT IDENTIFIER\r\n        //\r\n        //AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.type || \"\") }),\r\n                new in_window.org.pkijs.asn1.ANY({ name: (names.value || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"RelativeDistinguishedName\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.RDN =\r\n    function()\r\n    {\r\n        //RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\r\n        //\r\n        //RelativeDistinguishedName ::=\r\n        //SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.repeated_sequence || \"\"),\r\n                    value: new in_window.org.pkijs.asn1.SET({\r\n                        value: [\r\n                            new in_window.org.pkijs.asn1.REPEATED({\r\n                                name: (names.repeated_set || \"\"),\r\n                                value: in_window.org.pkijs.schema.ATTR_TYPE_AND_VALUE(names.attr_type_and_value || {})\r\n                            })\r\n                        ]\r\n                    })\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"Extension\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.EXTENSION =\r\n    function()\r\n    {\r\n        //Extension  ::=  SEQUENCE  {\r\n        //    extnID      OBJECT IDENTIFIER,\r\n        //    critical    BOOLEAN DEFAULT FALSE,\r\n        //    extnValue   OCTET STRING\r\n        //}\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.extnID || \"\") }),\r\n                new in_window.org.pkijs.asn1.BOOLEAN({\r\n                    name: (names.critical || \"\"),\r\n                    optional: true\r\n                }),\r\n                new in_window.org.pkijs.asn1.OCTETSTRING({ name: (names.extnValue || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"Extensions\" type (sequence of many Extension)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.EXTENSIONS =\r\n    function(input_names, input_optional)\r\n    {\r\n        //Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n        var optional = input_optional || false;\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            optional: optional,\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.extensions || \"\"),\r\n                    value: in_window.org.pkijs.schema.EXTENSION(names.extension || {})\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"AuthorityKeyIdentifier\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.AuthorityKeyIdentifier =\r\n    function()\r\n    {\r\n        // AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n        // \r\n        //AuthorityKeyIdentifier ::= SEQUENCE {\r\n        //    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n        //    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n        //    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n        //\r\n        //KeyIdentifier ::= OCTET STRING\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.keyIdentifier || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    value: [\r\n                            new in_window.org.pkijs.asn1.REPEATED({\r\n                                name: (names.authorityCertIssuer || \"\"),\r\n                                value: in_window.org.pkijs.schema.GENERAL_NAME()\r\n                            })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.authorityCertSerialNumber || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"PrivateKeyUsagePeriod\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.PrivateKeyUsagePeriod =\r\n    function()\r\n    {\r\n        // PrivateKeyUsagePeriod OID ::= 2.5.29.16\r\n        //\r\n        //PrivateKeyUsagePeriod ::= SEQUENCE {\r\n        //    notBefore       [0]     GeneralizedTime OPTIONAL,\r\n        //    notAfter        [1]     GeneralizedTime OPTIONAL }\r\n        //-- either notBefore or notAfter MUST be present\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.notBefore || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    }\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.notAfter || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"IssuerAltName\" and \"SubjectAltName\" types of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.AltName =\r\n    function()\r\n    {\r\n        // SubjectAltName OID ::= 2.5.29.17\r\n        // IssuerAltName OID ::= 2.5.29.18\r\n        //\r\n        // AltName ::= GeneralNames\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.altNames || \"\"),\r\n                    value: in_window.org.pkijs.schema.GENERAL_NAME()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"SubjectDirectoryAttributes\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.SubjectDirectoryAttributes =\r\n    function()\r\n    {\r\n        // SubjectDirectoryAttributes OID ::= 2.5.29.9\r\n        //\r\n        //SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.attributes || \"\"),\r\n                    value: in_window.org.pkijs.schema.ATTRIBUTE()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"GeneralSubtree\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.GeneralSubtree =\r\n    function()\r\n    {\r\n        //GeneralSubtree ::= SEQUENCE {\r\n        //    base                    GeneralName,\r\n        //    minimum         [0]     BaseDistance DEFAULT 0,\r\n        //    maximum         [1]     BaseDistance OPTIONAL }\r\n        //\r\n        //BaseDistance ::= INTEGER (0..MAX)\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                in_window.org.pkijs.schema.GENERAL_NAME(names.base || \"\"),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: [new in_window.org.pkijs.asn1.INTEGER({ name: (names.minimum || \"\") })]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    value: [new in_window.org.pkijs.asn1.INTEGER({ name: (names.maximum || \"\") })]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"NameConstraints\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.NameConstraints =\r\n    function()\r\n    {\r\n        // NameConstraints OID ::= 2.5.29.30\r\n        //\r\n        //NameConstraints ::= SEQUENCE {\r\n        //    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\r\n        //    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.permittedSubtrees || \"\"),\r\n                            value: in_window.org.pkijs.schema.x509.GeneralSubtree()\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.excludedSubtrees || \"\"),\r\n                            value: in_window.org.pkijs.schema.x509.GeneralSubtree()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"BasicConstraints\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.BasicConstraints =\r\n    function()\r\n    {\r\n        // BasicConstraints OID ::= 2.5.29.19\r\n        //\r\n        //BasicConstraints ::= SEQUENCE {\r\n        //    cA                      BOOLEAN DEFAULT FALSE,\r\n        //    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.BOOLEAN({\r\n                    optional: true,\r\n                    name: (names.cA || \"\")\r\n                }),\r\n                new in_window.org.pkijs.asn1.INTEGER({\r\n                    optional: true,\r\n                    name: (names.pathLenConstraint || \"\")\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"PolicyQualifierInfo\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.PolicyQualifierInfo =\r\n    function()\r\n    {\r\n        //PolicyQualifierInfo ::= SEQUENCE {\r\n        //    policyQualifierId  PolicyQualifierId,\r\n        //    qualifier          ANY DEFINED BY policyQualifierId }\r\n        //\r\n        //id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }\r\n        //id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\r\n        //id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\r\n        //\r\n        //PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.policyQualifierId || \"\") }),\r\n                new in_window.org.pkijs.asn1.ANY({ name: (names.qualifier || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"PolicyInformation\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.PolicyInformation =\r\n    function()\r\n    {\r\n        //PolicyInformation ::= SEQUENCE {\r\n        //    policyIdentifier   CertPolicyId,\r\n        //    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n        //    PolicyQualifierInfo OPTIONAL }\r\n        //\r\n        //CertPolicyId ::= OBJECT IDENTIFIER\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.policyIdentifier || \"\") }),\r\n                new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    optional: true,\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.policyQualifiers || \"\"),\r\n                            value: in_window.org.pkijs.schema.x509.PolicyQualifierInfo()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"CertificatePolicies\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.CertificatePolicies =\r\n    function()\r\n    {\r\n        // CertificatePolicies OID ::= 2.5.29.32\r\n        //\r\n        //certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.certificatePolicies || \"\"),\r\n                    value: in_window.org.pkijs.schema.x509.PolicyInformation()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"PolicyMapping\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.PolicyMapping =\r\n    function()\r\n    {\r\n        //PolicyMapping ::= SEQUENCE {\r\n        //    issuerDomainPolicy      CertPolicyId,\r\n        //    subjectDomainPolicy     CertPolicyId }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.issuerDomainPolicy || \"\") }),\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.subjectDomainPolicy || \"\") })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"PolicyMappings\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.PolicyMappings =\r\n    function()\r\n    {\r\n        // PolicyMappings OID ::= 2.5.29.33\r\n        //\r\n        //PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF PolicyMapping\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.mappings || \"\"),\r\n                    value: in_window.org.pkijs.schema.x509.PolicyMapping()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"PolicyConstraints\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.PolicyConstraints =\r\n    function()\r\n    {\r\n        // PolicyMappings OID ::= 2.5.29.36\r\n        //\r\n        //PolicyConstraints ::= SEQUENCE {\r\n        //    requireExplicitPolicy           [0] SkipCerts OPTIONAL,\r\n        //    inhibitPolicyMapping            [1] SkipCerts OPTIONAL }\r\n        //\r\n        //SkipCerts ::= INTEGER (0..MAX)\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.requireExplicitPolicy || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    }\r\n                }), // IMPLICIT integer value\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.inhibitPolicyMapping || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    }\r\n                }) // IMPLICIT integer value\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"ExtKeyUsage\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.ExtKeyUsage =\r\n    function()\r\n    {\r\n        // ExtKeyUsage OID ::= 2.5.29.37\r\n        //\r\n        // ExtKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\r\n\r\n        // KeyPurposeId ::= OBJECT IDENTIFIER\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.keyPurposes || \"\"),\r\n                    value: new in_window.org.pkijs.asn1.OID()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"DistributionPoint\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.DistributionPoint =\r\n    function()\r\n    {\r\n        //DistributionPoint ::= SEQUENCE {\r\n        //    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n        //    reasons                 [1]     ReasonFlags OPTIONAL,\r\n        //    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n        //\r\n        //DistributionPointName ::= CHOICE {\r\n        //    fullName                [0]     GeneralNames,\r\n        //    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n        //\r\n        //ReasonFlags ::= BIT STRING {\r\n        //    unused                  (0),\r\n        //    keyCompromise           (1),\r\n        //    cACompromise            (2),\r\n        //    affiliationChanged      (3),\r\n        //    superseded              (4),\r\n        //    cessationOfOperation    (5),\r\n        //    certificateHold         (6),\r\n        //    privilegeWithdrawn      (7),\r\n        //    aACompromise            (8) }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.CHOICE({\r\n                            value: [\r\n                                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                    name: (names.distributionPoint || \"\"),\r\n                                    optional: true,\r\n                                    id_block: {\r\n                                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                                        tag_number: 0 // [0]\r\n                                    },\r\n                                    value: [\r\n                                        new in_window.org.pkijs.asn1.REPEATED({\r\n                                            name: (names.distributionPoint_names || \"\"),\r\n                                            value: in_window.org.pkijs.schema.GENERAL_NAME()\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                    name: (names.distributionPoint || \"\"),\r\n                                    optional: true,\r\n                                    id_block: {\r\n                                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                                        tag_number: 1 // [1]\r\n                                    },\r\n                                    value: in_window.org.pkijs.schema.RDN().value_block.value\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.reasons || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    }\r\n                }), // IMPLICIT bitstring value\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    name: (names.cRLIssuer || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.REPEATED({\r\n                            name: (names.cRLIssuer_names || \"\"),\r\n                            value: in_window.org.pkijs.schema.GENERAL_NAME()\r\n                        })\r\n                    ]\r\n                }) // IMPLICIT bitstring value\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"CRLDistributionPoints\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.CRLDistributionPoints =\r\n    function()\r\n    {\r\n        // CRLDistributionPoints OID ::= 2.5.29.31\r\n        //\r\n        //CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.distributionPoints || \"\"),\r\n                    value: in_window.org.pkijs.schema.x509.DistributionPoint()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"AccessDescription\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.AccessDescription =\r\n    function()\r\n    {\r\n        //AccessDescription  ::=  SEQUENCE {\r\n        //    accessMethod          OBJECT IDENTIFIER,\r\n        //    accessLocation        GeneralName  }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ name: (names.accessMethod || \"\") }),\r\n                in_window.org.pkijs.schema.GENERAL_NAME(names.accessLocation || \"\")\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"AuthorityInfoAccess\" and \"SubjectInfoAccess\" types of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.InfoAccess =\r\n    function()\r\n    {\r\n        // AuthorityInfoAccess OID ::= 1.3.6.1.5.5.7.1.1\r\n        // SubjectInfoAccess OID ::= 1.3.6.1.5.5.7.1.11\r\n        //\r\n        //AuthorityInfoAccessSyntax  ::=\r\n        //SEQUENCE SIZE (1..MAX) OF AccessDescription\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.REPEATED({\r\n                    name: (names.accessDescriptions || \"\"),\r\n                    value: in_window.org.pkijs.schema.x509.AccessDescription()\r\n                })\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region ASN.1 schema definition for \"IssuingDistributionPoint\" type of extension \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.schema.x509.IssuingDistributionPoint =\r\n    function()\r\n    {\r\n        // IssuingDistributionPoint OID ::= 2.5.29.28\r\n        //\r\n        //IssuingDistributionPoint ::= SEQUENCE {\r\n        //    distributionPoint          [0] DistributionPointName OPTIONAL,\r\n        //    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\r\n        //    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\r\n        //    onlySomeReasons            [3] ReasonFlags OPTIONAL,\r\n        //    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\r\n        //    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\r\n        //\r\n        //ReasonFlags ::= BIT STRING {\r\n        //    unused                  (0),\r\n        //    keyCompromise           (1),\r\n        //    cACompromise            (2),\r\n        //    affiliationChanged      (3),\r\n        //    superseded              (4),\r\n        //    cessationOfOperation    (5),\r\n        //    certificateHold         (6),\r\n        //    privilegeWithdrawn      (7),\r\n        //    aACompromise            (8) }\r\n\r\n        var names = in_window.org.pkijs.getNames(arguments[0]);\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            name: (names.block_name || \"\"),\r\n            value: [\r\n                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: [\r\n                        new in_window.org.pkijs.asn1.CHOICE({\r\n                            value: [\r\n                                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                    name: (names.distributionPoint || \"\"),\r\n                                    id_block: {\r\n                                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                                        tag_number: 0 // [0]\r\n                                    },\r\n                                    value: [\r\n                                        new in_window.org.pkijs.asn1.REPEATED({\r\n                                            name: (names.distributionPoint_names || \"\"),\r\n                                            value: in_window.org.pkijs.schema.GENERAL_NAME()\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                                new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                                    name: (names.distributionPoint || \"\"),\r\n                                    id_block: {\r\n                                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                                        tag_number: 1 // [1]\r\n                                    },\r\n                                    value: in_window.org.pkijs.schema.RDN().value_block.value\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.onlyContainsUserCerts || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    }\r\n                }), // IMPLICIT boolean value\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.onlyContainsCACerts || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 2 // [2]\r\n                    }\r\n                }), // IMPLICIT boolean value\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.onlySomeReasons || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 3 // [3]\r\n                    }\r\n                }), // IMPLICIT bitstring value\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.indirectCRL || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 4 // [4]\r\n                    }\r\n                }), // IMPLICIT boolean value\r\n                new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                    name: (names.onlyContainsAttributeCerts || \"\"),\r\n                    optional: true,\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 5 // [5]\r\n                    }\r\n                }) // IMPLICIT boolean value\r\n            ]\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n}\r\n)(typeof exports !== \"undefined\" ? exports : window);\r\n\r\n//x509_simpl.js\r\n/*\r\n * Copyright (c) 2014, GMO GlobalSign\r\n * Copyright (c) 2015-2016, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2014-2016, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, \r\n * are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, \r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice, \r\n *    this list of conditions and the following disclaimer in the documentation \r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its contributors \r\n *    may be used to endorse or promote products derived from this software without \r\n *    specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \r\n * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \r\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT \r\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \r\n * OF SUCH DAMAGE. \r\n *\r\n */\r\n(\r\nfunction(in_window)\r\n{\r\n    //**************************************************************************************\r\n    // #region Declaration of global variables \r\n    //**************************************************************************************\r\n    // #region \"org\" namespace \r\n    if(typeof in_window.org === \"undefined\")\r\n        in_window.org = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org !== \"object\")\r\n            throw new Error(\"Name org already exists and it's not an object\");\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs\" namespace \r\n    if(typeof in_window.org.pkijs === \"undefined\")\r\n        in_window.org.pkijs = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs !== \"object\")\r\n            throw new Error(\"Name org.pkijs already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs.simpl\" namespace \r\n    if(typeof in_window.org.pkijs.simpl === \"undefined\")\r\n        in_window.org.pkijs.simpl = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs.simpl !== \"object\")\r\n            throw new Error(\"Name org.pkijs.simpl already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs.simpl));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"org.pkijs.simpl.x509\" namespace \r\n    if(typeof in_window.org.pkijs.simpl.x509 === \"undefined\")\r\n        in_window.org.pkijs.simpl.x509 = {};\r\n    else\r\n    {\r\n        if(typeof in_window.org.pkijs.simpl.x509 !== \"object\")\r\n            throw new Error(\"Name org.pkijs.simpl.x509 already exists and it's not an object\" + \" but \" + (typeof in_window.org.pkijs.simpl.x509));\r\n    }\r\n    // #endregion \r\n\r\n    // #region \"local\" namespace \r\n    var local = {};\r\n    // #endregion   \r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"Time\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.TIME =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.type = 0; // 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n        this.value = new Date(0, 0, 0);\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.TIME.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.type = (arguments[0].type || 0);\r\n                this.value = (arguments[0].value || (new Date(0, 0, 0)));\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.TIME.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.TIME({\r\n                names: {\r\n                    utcTimeName: \"utcTimeName\",\r\n                    generalTimeName: \"generalTimeName\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for TIME\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"utcTimeName\" in asn1.result)\r\n        {\r\n            this.type = 0;\r\n            this.value = asn1.result.utcTimeName.toDate();\r\n        }\r\n        if(\"generalTimeName\" in asn1.result)\r\n        {\r\n            this.type = 1;\r\n            this.value = asn1.result.generalTimeName.toDate();\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.TIME.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        var result = {};\r\n\r\n        if(this.type === 0)\r\n            result = new in_window.org.pkijs.asn1.UTCTIME({ value_date: this.value });\r\n        if(this.type === 1)\r\n            result = new in_window.org.pkijs.asn1.GENERALIZEDTIME({ value_date: this.value });\r\n\r\n        return result;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.TIME.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            value: this.value\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"GeneralName\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAME =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.NameType = 9; // Name type - from a tagged value (0 for \"otherName\", 1 for \"rfc822Name\" etc.)\r\n        this.Name = {};\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.GENERAL_NAME.prototype.fromSchema.call(this, arguments[0].schema);\r\n        // #endregion \r\n        // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.NameType = arguments[0].NameType || 9;\r\n                if(\"Name\" in arguments[0])\r\n                    this.Name = arguments[0].Name;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAME.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.GENERAL_NAME({\r\n                names: {\r\n                    block_name: \"block_name\",\r\n                    otherName: \"otherName\",\r\n                    rfc822Name: \"rfc822Name\",\r\n                    dNSName: \"dNSName\",\r\n                    x400Address: \"x400Address\",\r\n                    directoryName: {\r\n                        names: {\r\n                            block_name: \"directoryName\"\r\n                        }\r\n                    },\r\n                    ediPartyName: \"ediPartyName\",\r\n                    uniformResourceIdentifier: \"uniformResourceIdentifier\",\r\n                    iPAddress: \"iPAddress\",\r\n                    registeredID: \"registeredID\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for GENERAL_NAME\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema\r\n        this.NameType = asn1.result[\"block_name\"].id_block.tag_number;\r\n\r\n        switch(this.NameType)\r\n        {\r\n            case 0: // otherName\r\n                this.Name = asn1.result[\"block_name\"];\r\n                break;\r\n            case 1: // rfc822Name + dNSName + uniformResourceIdentifier\r\n            case 2:\r\n            case 6:\r\n                {\r\n                    var value = asn1.result[\"block_name\"];\r\n\r\n                    value.id_block.tag_class = 1; // UNIVERSAL\r\n                    value.id_block.tag_number = 22; // IA5STRING\r\n\r\n                    var value_ber = value.toBER(false);\r\n\r\n                    this.Name = in_window.org.pkijs.fromBER(value_ber).result.value_block.value;\r\n                }\r\n                break;\r\n            case 3: // x400Address\r\n                this.Name = asn1.result[\"block_name\"];\r\n                break;\r\n            case 4: // directoryName\r\n                this.Name = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"directoryName\"] });\r\n                break;\r\n            case 5: // ediPartyName\r\n                this.Name = asn1.result[\"ediPartyName\"];\r\n                break;\r\n            case 7: // iPAddress\r\n                this.Name = new in_window.org.pkijs.asn1.OCTETSTRING({ value_hex: asn1.result[\"block_name\"].value_block.value_hex });\r\n                break;\r\n            case 8: // registeredID\r\n                {\r\n                    var value = asn1.result[\"block_name\"];\r\n\r\n                    value.id_block.tag_class = 1; // UNIVERSAL\r\n                    value.id_block.tag_number = 6; // OID\r\n\r\n                    var value_ber = value.toBER(false);\r\n\r\n                    this.Name = in_window.org.pkijs.fromBER(value_ber).result.value_block.toString(); // Getting a string representation of the OID\r\n                }\r\n                break;\r\n            default:;\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAME.prototype.toSchema =\r\n    function(schema)\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object\r\n        switch(this.NameType)\r\n        {\r\n            case 0:\r\n            case 3:\r\n            case 5:\r\n                return new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: this.NameType\r\n                    },\r\n                    value: [\r\n                        this.Name\r\n                    ]\r\n                });\r\n\r\n                break;\r\n            case 1:\r\n            case 2:\r\n            case 6:\r\n                {\r\n                    var value = new in_window.org.pkijs.asn1.IA5STRING({ value: this.Name });\r\n\r\n                    value.id_block.tag_class = 3;\r\n                    value.id_block.tag_number = this.NameType;\r\n\r\n                    return value;\r\n                }\r\n                break;\r\n            case 4:\r\n                return new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 4\r\n                    },\r\n                    value: [this.Name.toSchema()]\r\n                });\r\n                break;\r\n            case 7:\r\n                {\r\n                    var value = this.Name;\r\n\r\n                    value.id_block.tag_class = 3;\r\n                    value.id_block.tag_number = this.NameType;\r\n\r\n                    return value;\r\n                }\r\n                break;\r\n            case 8:\r\n                {\r\n                    var value = new in_window.org.pkijs.asn1.OID({ value: this.Name });\r\n\r\n                    value.id_block.tag_class = 3;\r\n                    value.id_block.tag_number = this.NameType;\r\n\r\n                    return value;\r\n                }\r\n                break;\r\n            default:\r\n                return in_window.org.pkijs.schema.GENERAL_NAME();\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAME.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            NameType: this.NameType\r\n        };\r\n\r\n        if((typeof this.Name) === \"string\")\r\n            _object.Name = this.Name;\r\n        else\r\n            _object.Name = this.Name.toJSON();\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"GeneralNames\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAMES =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.names = new Array(); // Array of \"org.pkijs.simpl.GENERAL_NAME\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.GENERAL_NAMES.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.names = arguments[0].names || new Array(); // Array of \"org.pkijs.simpl.GENERAL_NAME\"\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAMES.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            new in_window.org.pkijs.asn1.SEQUENCE({\r\n                value: [\r\n                    new in_window.org.pkijs.asn1.REPEATED({\r\n                        name: \"names\",\r\n                        value: in_window.org.pkijs.schema.GENERAL_NAME()\r\n                    })\r\n                ]\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for GENERAL_NAMES\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema\r\n        var n = asn1.result[\"names\"];\r\n\r\n        for(var i = 0; i < n.length; i++)\r\n            this.names.push(new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: n[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAMES.prototype.toSchema =\r\n    function(schema)\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object\r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.names.length; i++)\r\n            output_array.push(this.names[i].toSchema());\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.GENERAL_NAMES.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _names = new Array();\r\n\r\n        for(var i = 0; i < this.names.length; i++)\r\n            _names.push(this.names[i].toJSON());\r\n\r\n        return {\r\n            names: _names\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"AlgorithmIdentifier\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.algorithm_id = \"\";\r\n        // OPTIONAL this.algorithm_params = new in_window.org.pkijs.asn1.NULL();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.algorithm_id = arguments[0].algorithm_id || \"\";\r\n                if(\"algorithm_params\" in arguments[0])\r\n                    this.algorithm_params = arguments[0].algorithm_params;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.ALGORITHM_IDENTIFIER({\r\n                names: {\r\n                    algorithmIdentifier: \"algorithm\",\r\n                    algorithmParams: \"params\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for ALGORITHM_IDENTIFIER\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.algorithm_id = asn1.result.algorithm.value_block.toString();\r\n        if(\"params\" in asn1.result)\r\n            this.algorithm_params = asn1.result.params;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.OID({ value: this.algorithm_id }));\r\n        if(\"algorithm_params\" in this)\r\n            output_array.push(this.algorithm_params);\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            algorithm_id: this.algorithm_id\r\n        };\r\n\r\n        if(\"algorithm_params\" in this)\r\n            _object.algorithm_params = this.algorithm_params.toJSON();\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER.prototype.isEqual =\r\n    function(algorithmIdentifier)\r\n    {\r\n        /// <summary>Check that two \"ALGORITHM_IDENTIFIERs\" are equal</summary>\r\n        /// <param name=\"algorithmIdentifier\" type=\"in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER\">The algorithm identifier to compare with</param>\r\n\r\n        // #region Check input type \r\n        if((algorithmIdentifier instanceof in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER) == false)\r\n            return false;\r\n        // #endregion \r\n\r\n        // #region Check \"algorithm_id\" \r\n        if(this.algorithm_id != algorithmIdentifier.algorithm_id)\r\n            return false;\r\n        // #endregion \r\n\r\n        // #region Check \"algorithm_params\" \r\n        if(\"algorithm_params\" in this)\r\n        {\r\n            if(\"algorithm_params\" in algorithmIdentifier)\r\n            {\r\n                return JSON.stringify(this.algorithm_params) == JSON.stringify(algorithmIdentifier.algorithm_params);\r\n            }\r\n            else\r\n                return false;\r\n        }\r\n        else\r\n        {\r\n            if(\"algorithm_params\" in algorithmIdentifier)\r\n                return false;\r\n        }\r\n        // #endregion \r\n\r\n        return true;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"RSAPublicKey\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPublicKey =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.modulus = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.publicExponent = new in_window.org.pkijs.asn1.INTEGER();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.RSAPublicKey.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.modulus = arguments[0].modulus || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.publicExponent = arguments[0].publicExponent || new in_window.org.pkijs.asn1.INTEGER();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPublicKey.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.RSAPublicKey({\r\n                names: {\r\n                    modulus: \"modulus\",\r\n                    publicExponent: \"publicExponent\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.modulus = asn1.result[\"modulus\"];\r\n        this.publicExponent = asn1.result[\"publicExponent\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPublicKey.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                this.modulus,\r\n                this.publicExponent\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPublicKey.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            modulus: this.modulus.toJSON(),\r\n            publicExponent: this.publicExponent.toJSON()\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"OtherPrimeInfo\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.OtherPrimeInfo =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.prime = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.exponent = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.coefficient = new in_window.org.pkijs.asn1.INTEGER();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.OtherPrimeInfo.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.prime = arguments[0].prime || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.exponent = arguments[0].exponent || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.coefficient = arguments[0].coefficient || new in_window.org.pkijs.asn1.INTEGER();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.OtherPrimeInfo.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.OtherPrimeInfo({\r\n                names: {\r\n                    prime: \"prime\",\r\n                    exponent: \"exponent\",\r\n                    coefficient: \"coefficient\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.prime = asn1.result[\"prime\"];\r\n        this.exponent = asn1.result[\"exponent\"];\r\n        this.coefficient = asn1.result[\"coefficient\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.OtherPrimeInfo.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                this.prime,\r\n                this.exponent,\r\n                this.coefficient\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.OtherPrimeInfo.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            prime: this.prime.toJSON(),\r\n            exponent: this.exponent.toJSON(),\r\n            coefficient: this.coefficient.toJSON()\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"RSAPrivateKey\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPrivateKey =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.version = 0;\r\n        this.modulus = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.publicExponent = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.privateExponent = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.prime1 = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.prime2 = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.exponent1 = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.exponent2 = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.coefficient = new in_window.org.pkijs.asn1.INTEGER();\r\n        // OPTIONAL this.otherPrimeInfos = new Array(); // Array of \"OtherPrimeInfo\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.RSAPrivateKey.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.version = arguments[0].version || 0;\r\n                this.modulus = arguments[0].modulus || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.publicExponent = arguments[0].publicExponent || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.privateExponent = arguments[0].privateExponent || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.prime1 = arguments[0].prime1 || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.prime2 = arguments[0].prime2 || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.exponent1 = arguments[0].exponent1 || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.exponent2 = arguments[0].exponent2 || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.coefficient = arguments[0].coefficient || new in_window.org.pkijs.asn1.INTEGER();\r\n                if(\"otherPrimeInfos\" in arguments[0])\r\n                    this.otherPrimeInfos = arguments[0].otherPrimeInfos || new Array();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPrivateKey.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.RSAPrivateKey({\r\n                names: {\r\n                    version: \"version\",\r\n                    modulus: \"modulus\",\r\n                    publicExponent: \"publicExponent\",\r\n                    privateExponent: \"privateExponent\",\r\n                    prime1: \"prime1\",\r\n                    prime2: \"prime2\",\r\n                    exponent1: \"exponent1\",\r\n                    exponent2: \"exponent2\",\r\n                    coefficient: \"coefficient\",\r\n                    otherPrimeInfos: \"otherPrimeInfos\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for RSAPrivateKey\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.version = asn1.result[\"version\"].value_block.value_dec;\r\n        this.modulus = asn1.result[\"modulus\"];\r\n        this.publicExponent = asn1.result[\"publicExponent\"];\r\n        this.privateExponent = asn1.result[\"privateExponent\"];\r\n        this.prime1 = asn1.result[\"prime1\"];\r\n        this.prime2 = asn1.result[\"prime2\"];\r\n        this.exponent1 = asn1.result[\"exponent1\"];\r\n        this.exponent2 = asn1.result[\"exponent2\"];\r\n        this.coefficient = asn1.result[\"coefficient\"];\r\n\r\n        if(\"otherPrimeInfos\" in asn1.result)\r\n        {\r\n            var otherPrimeInfos_array = asn1.result[\"otherPrimeInfos\"];\r\n\r\n            for(var i = 0; i < otherPrimeInfos_array.length; i++)\r\n                this.otherPrimeInfos.push(new in_window.org.pkijs.simpl.x509.OtherPrimeInfo({ schema: otherPrimeInfos_array[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPrivateKey.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.INTEGER({ value: this.version }));\r\n        output_array.push(this.modulus);\r\n        output_array.push(this.publicExponent);\r\n        output_array.push(this.privateExponent);\r\n        output_array.push(this.prime1);\r\n        output_array.push(this.prime2);\r\n        output_array.push(this.exponent1);\r\n        output_array.push(this.exponent2);\r\n        output_array.push(this.coefficient);\r\n\r\n        if(\"otherPrimeInfos\" in this)\r\n        {\r\n            var otherPrimeInfos_array = new Array();\r\n\r\n            for(var i = 0; i < this.otherPrimeInfos.length; i++)\r\n                otherPrimeInfos_array.push(this.otherPrimeInfos[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.SEQUENCE({ value: otherPrimeInfos_array }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSAPrivateKey.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            version: this.version,\r\n            modulus: this.modulus.toJSON(),\r\n            publicExponent: this.publicExponent.toJSON(),\r\n            privateExponent: this.privateExponent.toJSON(),\r\n            prime1: this.prime1.toJSON(),\r\n            prime2: this.prime2.toJSON(),\r\n            exponent1: this.exponent1.toJSON(),\r\n            exponent2: this.exponent2.toJSON(),\r\n            coefficient: this.coefficient.toJSON()\r\n        };\r\n\r\n        if(\"otherPrimeInfos\" in this)\r\n        {\r\n            _object.otherPrimeInfos = new Array();\r\n\r\n            for(var i = 0; i < this.otherPrimeInfos.length; i++)\r\n                _object.otherPrimeInfos.push(this.otherPrimeInfos[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"RSASSA_PSS_params\" type (RFC3447)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSASSA_PSS_params =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.hashAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n        // OPTIONAL this.maskGenAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n        // OPTIONAL this.saltLength = 20; \r\n        // OPTIONAL this.trailerField = 1;\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.RSASSA_PSS_params.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"hashAlgorithm\" in arguments[0])\r\n                    this.hashAlgorithm = arguments[0].hashAlgorithm;\r\n\r\n                if(\"maskGenAlgorithm\" in arguments[0])\r\n                    this.maskGenAlgorithm = arguments[0].maskGenAlgorithm;\r\n\r\n                if(\"saltLength\" in arguments[0])\r\n                    this.saltLength = arguments[0].saltLength;\r\n\r\n                if(\"trailerField\" in arguments[0])\r\n                    this.trailerField = arguments[0].trailerField;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSASSA_PSS_params.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.RSASSA_PSS_params({\r\n                names: {\r\n                    hashAlgorithm: {\r\n                        names: {\r\n                            block_name: \"hashAlgorithm\"\r\n                        }\r\n                    },\r\n                    maskGenAlgorithm: {\r\n                        names: {\r\n                            block_name: \"maskGenAlgorithm\"\r\n                        }\r\n                    },\r\n                    saltLength: \"saltLength\",\r\n                    trailerField: \"trailerField\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for RSASSA_PSS_params\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"hashAlgorithm\" in asn1.result)\r\n            this.hashAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"hashAlgorithm\"] });\r\n\r\n        if(\"maskGenAlgorithm\" in asn1.result)\r\n            this.maskGenAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"maskGenAlgorithm\"] });\r\n\r\n        if(\"saltLength\" in asn1.result)\r\n            this.saltLength = asn1.result[\"saltLength\"].value_block.value_dec;\r\n\r\n        if(\"trailerField\" in asn1.result)\r\n            this.trailerField = asn1.result[\"trailerField\"].value_block.value_dec;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSASSA_PSS_params.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"hashAlgorithm\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: [this.hashAlgorithm.toSchema()]\r\n            }));\r\n\r\n        if(\"maskGenAlgorithm\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value: [this.maskGenAlgorithm.toSchema()]\r\n            }));\r\n\r\n        if(\"saltLength\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 2 // [2]\r\n                },\r\n                value: [new in_window.org.pkijs.asn1.INTEGER({ value: this.saltLength })]\r\n            }));\r\n\r\n        if(\"trailerField\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 3 // [3]\r\n                },\r\n                value: [new in_window.org.pkijs.asn1.INTEGER({ value: this.trailerField })]\r\n            }));\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.RSASSA_PSS_params.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"hashAlgorithm\" in this)\r\n            _object.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n\r\n        if(\"maskGenAlgorithm\" in this)\r\n            _object.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\r\n\r\n        if(\"saltLength\" in this)\r\n            _object.saltLength = this.saltLength;\r\n\r\n        if(\"trailerField\" in this)\r\n            _object.trailerField = this.trailerField;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"SubjectPublicKeyInfo\" type \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PUBLIC_KEY_INFO =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.algorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n        this.subjectPublicKey = new in_window.org.pkijs.asn1.BITSTRING();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.PUBLIC_KEY_INFO.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.algorithm = (arguments[0].algorithm || (new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER()));\r\n                this.subjectPublicKey = (arguments[0].subjectPublicKey || (new in_window.org.pkijs.asn1.BITSTRING()));\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PUBLIC_KEY_INFO.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.PUBLIC_KEY_INFO({\r\n                names: {\r\n                    algorithm: {\r\n                        names: {\r\n                            block_name: \"algorithm\"\r\n                        }\r\n                    },\r\n                    subjectPublicKey: \"subjectPublicKey\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PUBLIC_KEY_INFO\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.algorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result.algorithm });\r\n        this.subjectPublicKey = asn1.result.subjectPublicKey;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PUBLIC_KEY_INFO.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                this.algorithm.toSchema(),\r\n                this.subjectPublicKey\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PUBLIC_KEY_INFO.prototype.importKey =\r\n    function(publicKey)\r\n    {\r\n        /// <param name=\"publicKey\" type=\"Key\">Public key to work with</param>\r\n\r\n        // #region Initial variables \r\n        var sequence = Promise.resolve();\r\n        var _this = this;\r\n        // #endregion   \r\n\r\n        // #region Initial check \r\n        if(typeof publicKey === \"undefined\")\r\n            return Promise.reject(\"Need to provide publicKey input parameter\");\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Export public key \r\n        sequence = sequence.then(\r\n            function()\r\n            {\r\n                return crypto.exportKey(\"spki\", publicKey);\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        // #region Initialize internal variables by parsing exported value\r\n        sequence = sequence.then(\r\n            function(exportedKey)\r\n            {\r\n                var asn1 = in_window.org.pkijs.fromBER(exportedKey);\r\n                try\r\n                {\r\n                    in_window.org.pkijs.simpl.PUBLIC_KEY_INFO.prototype.fromSchema.call(_this, asn1.result);\r\n                }\r\n                catch(exception)\r\n                {\r\n                    return Promise.reject(\"Error during initializing object from schema\");\r\n                }\r\n            },\r\n            function(error)\r\n            {\r\n                return Promise.reject(\"Error during exporting public key: \" + error);\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        return sequence;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PUBLIC_KEY_INFO.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            algorithm: this.algorithm.toJSON(),\r\n            subjectPublicKey: this.subjectPublicKey.toJSON()\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"AttributeTypeAndValue\" type (part of RelativeDistinguishedName)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.type = \"\";\r\n        this.value = {}; // ANY -- DEFINED BY AttributeType\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.type = (arguments[0].type || \"\");\r\n                this.value = (arguments[0].value || {});\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.ATTR_TYPE_AND_VALUE({\r\n                names: {\r\n                    type: \"type\",\r\n                    value: \"typeValue\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for ATTR_TYPE_AND_VALUE\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.type = asn1.result.type.value_block.toString();\r\n        this.value = asn1.result.typeValue;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ value: this.type }),\r\n                this.value\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE.prototype.isEqual =\r\n    function()\r\n    {\r\n        if(arguments[0] instanceof in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE)\r\n        {\r\n            if(this.type !== arguments[0].type)\r\n                return false;\r\n\r\n            if(((this.value instanceof in_window.org.pkijs.asn1.UTF8STRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.UTF8STRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.BMPSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.BMPSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.UNIVERSALSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.UNIVERSALSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.NUMERICSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.NUMERICSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.PRINTABLESTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.PRINTABLESTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.TELETEXSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.TELETEXSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.VIDEOTEXSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.VIDEOTEXSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.IA5STRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.IA5STRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.GRAPHICSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.GRAPHICSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.VISIBLESTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.VISIBLESTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.GENERALSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.GENERALSTRING)) ||\r\n               ((this.value instanceof in_window.org.pkijs.asn1.CHARACTERSTRING) && (arguments[0].value instanceof in_window.org.pkijs.asn1.CHARACTERSTRING)))\r\n            {\r\n                var value1 = in_window.org.pkijs.stringPrep(this.value.value_block.value);\r\n                var value2 = in_window.org.pkijs.stringPrep(arguments[0].value.value_block.value);\r\n\r\n                if(value1.localeCompare(value2) !== 0)\r\n                    return false;\r\n            }\r\n            else // Comparing as two ArrayBuffers\r\n            {\r\n                if(in_window.org.pkijs.isEqual_buffer(this.value.value_before_decode, arguments[0].value.value_before_decode) === false)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            type: this.type\r\n        };\r\n\r\n        if(Object.keys(this.value).length !== 0)\r\n            _object.value = this.value.toJSON();\r\n        else\r\n            _object.value = this.value;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"RelativeDistinguishedName\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.RDN =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        /// <field name=\"types_and_values\" type=\"Array\" elementType=\"in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE\">Array of \"type and value\" objects</field>\r\n        this.types_and_values = new Array();\r\n        /// <field name=\"value_before_decode\" type=\"ArrayBuffer\">Value of the RDN before decoding from schema</field>\r\n        this.value_before_decode = new ArrayBuffer(0);\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.RDN.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.types_and_values = (arguments[0].types_and_values || (new Array()));\r\n                this.value_before_decode = arguments[0].value_before_decode || new ArrayBuffer(0);\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.RDN.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.RDN({\r\n                names: {\r\n                    block_name: \"RDN\",\r\n                    repeated_set: \"types_and_values\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for RDN\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"types_and_values\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n        {\r\n            var types_and_values_array = asn1.result.types_and_values;\r\n            for(var i = 0; i < types_and_values_array.length; i++)\r\n                this.types_and_values.push(new in_window.org.pkijs.simpl.ATTR_TYPE_AND_VALUE({ schema: types_and_values_array[i] }));\r\n        }\r\n\r\n        this.value_before_decode = asn1.result.RDN.value_before_decode;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.RDN.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Decode stored TBS value \r\n        if(this.value_before_decode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n        {\r\n            // #region Create array for output set \r\n            var output_array = new Array();\r\n\r\n            for(var i = 0; i < this.types_and_values.length; i++)\r\n                output_array.push(this.types_and_values[i].toSchema());\r\n            // #endregion \r\n\r\n            return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n                value: [new in_window.org.pkijs.asn1.SET({ value: output_array })]\r\n            }));\r\n        }\r\n\r\n        var asn1 = in_window.org.pkijs.fromBER(this.value_before_decode);\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return asn1.result;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.RDN.prototype.isEqual =\r\n    function()\r\n    {\r\n        if(arguments[0] instanceof in_window.org.pkijs.simpl.RDN)\r\n        {\r\n            if(this.types_and_values.length != arguments[0].types_and_values.length)\r\n                return false;\r\n\r\n            for(var i = 0; i < this.types_and_values.length; i++)\r\n            {\r\n                if(this.types_and_values[i].isEqual(arguments[0].types_and_values[i]) === false)\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            if(arguments[0] instanceof ArrayBuffer)\r\n                return in_window.org.pkijs.isEqual_buffer(this.value_before_decode, arguments[0]);\r\n            else\r\n                return false;\r\n        }\r\n\r\n        return false;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.RDN.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            types_and_values: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.types_and_values.length; i++)\r\n            _object.types_and_values.push(this.types_and_values[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"AuthorityKeyIdentifier\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AuthorityKeyIdentifier =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.keyIdentifier - OCTETSTRING\r\n        // OPTIONAL this.authorityCertIssuer - Array of GeneralName\r\n        // OPTIONAL this.authorityCertSerialNumber - INTEGER\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.AuthorityKeyIdentifier.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"keyIdentifier\" in arguments[0])\r\n                    this.keyIdentifier = arguments[0].keyIdentifier;\r\n\r\n                if(\"authorityCertIssuer\" in arguments[0])\r\n                    this.authorityCertIssuer = arguments[0].authorityCertIssuer;\r\n\r\n                if(\"authorityCertSerialNumber\" in arguments[0])\r\n                    this.authorityCertSerialNumber = arguments[0].authorityCertSerialNumber;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AuthorityKeyIdentifier.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.AuthorityKeyIdentifier({\r\n                names: {\r\n                    keyIdentifier: \"keyIdentifier\",\r\n                    authorityCertIssuer: \"authorityCertIssuer\",\r\n                    authorityCertSerialNumber: \"authorityCertSerialNumber\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"keyIdentifier\" in asn1.result)\r\n        {\r\n            asn1.result[\"keyIdentifier\"].id_block.tag_class = 1; // UNIVERSAL\r\n            asn1.result[\"keyIdentifier\"].id_block.tag_number = 4; // OCTETSTRING\r\n\r\n            this.keyIdentifier = asn1.result[\"keyIdentifier\"];\r\n        }\r\n\r\n        if(\"authorityCertIssuer\" in asn1.result)\r\n        {\r\n            this.authorityCertIssuer = new Array();\r\n            var issuer_array = asn1.result[\"authorityCertIssuer\"];\r\n\r\n            for(var i = 0; i < issuer_array.length; i++)\r\n                this.authorityCertIssuer.push(new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: issuer_array[i] }));\r\n        }\r\n\r\n        if(\"authorityCertSerialNumber\" in asn1.result)\r\n        {\r\n            asn1.result[\"authorityCertSerialNumber\"].id_block.tag_class = 1; // UNIVERSAL\r\n            asn1.result[\"authorityCertSerialNumber\"].id_block.tag_number = 2; // INTEGER\r\n\r\n            this.authorityCertSerialNumber = asn1.result[\"authorityCertSerialNumber\"];\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AuthorityKeyIdentifier.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"keyIdentifier\" in this)\r\n        {\r\n            var value = this.keyIdentifier;\r\n\r\n            value.id_block.tag_class = 3; // CONTEXT-SPECIFIC\r\n            value.id_block.tag_number = 0; // [0]\r\n\r\n            output_array.push(value);\r\n        }\r\n\r\n        if(\"authorityCertIssuer\" in this)\r\n        {\r\n            var issuer_array = new Array();\r\n\r\n            for(var i = 0; i < this.authorityCertIssuer.length; i++)\r\n                issuer_array.push(this.authorityCertIssuer[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value: [new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    value: issuer_array\r\n                })]\r\n            }));\r\n        }\r\n\r\n        if(\"authorityCertSerialNumber\" in this)\r\n        {\r\n            var value = this.authorityCertSerialNumber;\r\n\r\n            value.id_block.tag_class = 3; // CONTEXT-SPECIFIC\r\n            value.id_block.tag_number = 2; // [2]\r\n\r\n            output_array.push(value);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AuthorityKeyIdentifier.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"keyIdentifier\" in this)\r\n            _object.keyIdentifier = this.keyIdentifier.toJSON();\r\n\r\n        if(\"authorityCertIssuer\" in this)\r\n        {\r\n            _object.authorityCertIssuer = new Array();\r\n\r\n            for(var i = 0; i < this.authorityCertIssuer.length; i++)\r\n                _object.authorityCertIssuer.push(this.authorityCertIssuer[i].toJSON());\r\n        }\r\n\r\n        if(\"authorityCertSerialNumber\" in this)\r\n            _object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"PrivateKeyUsagePeriod\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PrivateKeyUsagePeriod =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.notBefore - new Date()\r\n        // OPTIONAL this.notAfter - new Date()\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.PrivateKeyUsagePeriod.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"notBefore\" in arguments[0])\r\n                    this.notBefore = arguments[0].notBefore;\r\n\r\n                if(\"notAfter\" in arguments[0])\r\n                    this.notAfter = arguments[0].notAfter;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PrivateKeyUsagePeriod.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.PrivateKeyUsagePeriod({\r\n                names: {\r\n                    notBefore: \"notBefore\",\r\n                    notAfter: \"notAfter\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PrivateKeyUsagePeriod\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"notBefore\" in asn1.result)\r\n        {\r\n            var localNotBefore = new in_window.org.pkijs.asn1.GENERALIZEDTIME();\r\n            localNotBefore.fromBuffer(asn1.result[\"notBefore\"].value_block.value_hex);\r\n            this.notBefore = localNotBefore.toDate();\r\n        }\r\n\r\n        if(\"notAfter\" in asn1.result)\r\n        {\r\n            var localNotAfter = new in_window.org.pkijs.asn1.GENERALIZEDTIME({ value_hex: asn1.result[\"notAfter\"].value_block.value_hex });\r\n            localNotAfter.fromBuffer(asn1.result[\"notAfter\"].value_block.value_hex);\r\n            this.notAfter = localNotAfter.toDate();\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PrivateKeyUsagePeriod.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"notBefore\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value_hex: (new in_window.org.pkijs.asn1.GENERALIZEDTIME({ value_date: this.notBefore })).value_block.value_hex\r\n            }));\r\n\r\n        if(\"notAfter\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value_hex: (new in_window.org.pkijs.asn1.GENERALIZEDTIME({ value_date: this.notAfter })).value_block.value_hex\r\n            }));\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PrivateKeyUsagePeriod.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"notBefore\" in this)\r\n            _object.notBefore = this.notBefore;\r\n\r\n        if(\"notAfter\" in this)\r\n            _object.notAfter = this.notAfter;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"IssuerAltName\" and \"SubjectAltName\" types of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AltName =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.altNames = new Array(); //Array of GeneralName\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.AltName.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.altNames = arguments[0].altNames || new Array();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AltName.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.AltName({\r\n                names: {\r\n                    altNames: \"altNames\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for AltName\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"altNames\" in asn1.result)\r\n        {\r\n            var altNames_array = asn1.result[\"altNames\"];\r\n\r\n            for(var i = 0; i < altNames_array.length; i++)\r\n                this.altNames.push(new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: altNames_array[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AltName.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.altNames.length; i++)\r\n            output_array.push(this.altNames[i].toSchema());\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AltName.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            altNames: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.altNames.length; i++)\r\n            _object.altNames.push(this.altNames[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"SubjectDirectoryAttributes\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.SubjectDirectoryAttributes =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.attributes = new Array(); // Array of \"simpl.ATTRIBUTE\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.SubjectDirectoryAttributes.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.attributes = arguments[0].attributes || new Array(); // Array of \"simpl.ATTRIBUTE\"\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.SubjectDirectoryAttributes.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.SubjectDirectoryAttributes({\r\n                names: {\r\n                    attributes: \"attributes\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for SubjectDirectoryAttributes\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema\r\n        var attrs = asn1.result[\"attributes\"];\r\n\r\n        for(var i = 0; i < attrs.length; i++)\r\n            this.attributes.push(new in_window.org.pkijs.simpl.ATTRIBUTE({ schema: attrs[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.SubjectDirectoryAttributes.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.attributes.length; i++)\r\n            output_array.push(this.attributes[i].toSchema());\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.SubjectDirectoryAttributes.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            attributes: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.attributes.length; i++)\r\n            _object.attributes.push(this.attributes[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"PolicyMapping\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMapping =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.issuerDomainPolicy = \"\";\r\n        this.subjectDomainPolicy = \"\";\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.PolicyMapping.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.issuerDomainPolicy = arguments[0].issuerDomainPolicy || \"\";\r\n                this.subjectDomainPolicy = arguments[0].subjectDomainPolicy || \"\";\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMapping.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.PolicyMapping({\r\n                names: {\r\n                    issuerDomainPolicy: \"issuerDomainPolicy\",\r\n                    subjectDomainPolicy: \"subjectDomainPolicy\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PolicyMapping\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema\r\n        this.issuerDomainPolicy = asn1.result[\"issuerDomainPolicy\"].value_block.toString();\r\n        this.subjectDomainPolicy = asn1.result[\"subjectDomainPolicy\"].value_block.toString();\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMapping.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ value: this.issuerDomainPolicy }),\r\n                new in_window.org.pkijs.asn1.OID({ value: this.subjectDomainPolicy })\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMapping.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            issuerDomainPolicy: this.issuerDomainPolicy,\r\n            subjectDomainPolicy: this.subjectDomainPolicy\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"PolicyMappings\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMappings =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.mappings = new Array(); // Array of \"simpl.x509.PolicyMapping\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.PolicyMappings.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.mappings = arguments[0].mappings || new Array();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMappings.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.PolicyMappings({\r\n                names: {\r\n                    mappings: \"mappings\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PolicyMappings\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        var maps = asn1.result[\"mappings\"];\r\n\r\n        for(var i = 0; i < maps.length; i++)\r\n            this.mappings.push(new in_window.org.pkijs.simpl.x509.PolicyMapping({ schema: maps[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMappings.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.mappings.length; i++)\r\n            output_array.push(this.mappings[i].toSchema());\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyMappings.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            mappings: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.mappings.length; i++)\r\n            _object.mappings.push(this.mappings[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"GeneralSubtree\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.GeneralSubtree =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.base = new in_window.org.pkijs.simpl.GENERAL_NAME();\r\n        // OPTIONAL this.minimum // in_window.org.pkijs.asn1.INTEGER\r\n        // OPTIONAL this.maximum // in_window.org.pkijs.asn1.INTEGER\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.GeneralSubtree.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.base = arguments[0].base || new in_window.org.pkijs.simpl.GENERAL_NAME();\r\n\r\n                if(\"minimum\" in arguments[0])\r\n                    this.minimum = arguments[0].minimum;\r\n\r\n                if(\"maximum\" in arguments[0])\r\n                    this.maximum = arguments[0].maximum;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.GeneralSubtree.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.GeneralSubtree({\r\n                names: {\r\n                    base: {\r\n                        names: {\r\n                            block_name: \"base\"\r\n                        }\r\n                    },\r\n                    minimum: \"minimum\",\r\n                    maximum: \"maximum\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for \");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.base = new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: asn1.result[\"base\"] });\r\n\r\n        if(\"minimum\" in asn1.result)\r\n        {\r\n            if(asn1.result[\"minimum\"].value_block.is_hex_only)\r\n                this.minimum = asn1.result[\"minimum\"];\r\n            else\r\n                this.minimum = asn1.result[\"minimum\"].value_block.value_dec;\r\n        }\r\n\r\n        if(\"maximum\" in asn1.result)\r\n        {\r\n            if(asn1.result[\"maximum\"].value_block.is_hex_only)\r\n                this.maximum = asn1.result[\"maximum\"];\r\n            else\r\n                this.maximum = asn1.result[\"maximum\"].value_block.value_dec;\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.GeneralSubtree.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(this.base.toSchema());\r\n\r\n        if(\"minimum\" in this)\r\n        {\r\n            var value_minimum = 0;\r\n\r\n            if(this.minimum instanceof in_window.org.pkijs.asn1.INTEGER)\r\n                value_minimum = this.minimum;\r\n            else\r\n                value_minimum = new in_window.org.pkijs.asn1.INTEGER({ value: this.minimum });\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: [value_minimum]\r\n            }));\r\n        }\r\n\r\n        if(\"maximum\" in this)\r\n        {\r\n            var value_maximum = 0;\r\n\r\n            if(this.maximum instanceof in_window.org.pkijs.asn1.INTEGER)\r\n                value_maximum = this.maximum;\r\n            else\r\n                value_maximum = new in_window.org.pkijs.asn1.INTEGER({ value: this.maximum });\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value: [value_maximum]\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.GeneralSubtree.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            base: this.base.toJSON()\r\n        };\r\n\r\n        if(\"minimum\" in this)\r\n        {\r\n            if((typeof this.minimum) === \"number\")\r\n                _object.minimum = this.minimum;\r\n            else\r\n                _object.minimum = this.minimum.toJSON();\r\n        }\r\n\r\n        if(\"maximum\" in this)\r\n        {\r\n            if((typeof this.maximum) === \"number\")\r\n                _object.maximum = this.maximum;\r\n            else\r\n                _object.maximum = this.maximum.toJSON();\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"NameConstraints\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.NameConstraints =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.permittedSubtrees - Array of \"simpl.x509.GeneralSubtree\"\r\n        // OPTIONAL this.excludedSubtrees - Array of \"simpl.x509.GeneralSubtree\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.NameConstraints.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"permittedSubtrees\" in arguments[0])\r\n                    this.permittedSubtrees = arguments[0].permittedSubtrees;\r\n\r\n                if(\"excludedSubtrees\" in arguments[0])\r\n                    this.excludedSubtrees = arguments[0].excludedSubtrees;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.NameConstraints.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.NameConstraints({\r\n                names: {\r\n                    permittedSubtrees: \"permittedSubtrees\",\r\n                    excludedSubtrees: \"excludedSubtrees\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for NameConstraints\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"permittedSubtrees\" in asn1.result)\r\n        {\r\n            this.permittedSubtrees = new Array();\r\n            var permited_array = asn1.result[\"permittedSubtrees\"];\r\n\r\n            for(var i = 0; i < permited_array.length; i++)\r\n                this.permittedSubtrees.push(new in_window.org.pkijs.simpl.x509.GeneralSubtree({ schema: permited_array[i] }));\r\n        }\r\n\r\n        if(\"excludedSubtrees\" in asn1.result)\r\n        {\r\n            this.excludedSubtrees = new Array();\r\n            var excluded_array = asn1.result[\"excludedSubtrees\"];\r\n\r\n            for(var i = 0; i < excluded_array.length; i++)\r\n                this.excludedSubtrees.push(new in_window.org.pkijs.simpl.x509.GeneralSubtree({ schema: excluded_array[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.NameConstraints.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"permittedSubtrees\" in this)\r\n        {\r\n            var permited_array = new Array();\r\n\r\n            for(var i = 0; i < this.permittedSubtrees.length; i++)\r\n                permited_array.push(this.permittedSubtrees[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: [new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    value: permited_array\r\n                })]\r\n            }));\r\n        }\r\n\r\n        if(\"excludedSubtrees\" in this)\r\n        {\r\n            var excluded_array = new Array();\r\n\r\n            for(var i = 0; i < this.excludedSubtrees.length; i++)\r\n                excluded_array.push(this.excludedSubtrees[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value: [new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    value: excluded_array\r\n                })]\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.NameConstraints.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"permittedSubtrees\" in this)\r\n        {\r\n            _object.permittedSubtrees = new Array();\r\n\r\n            for(var i = 0; i < this.permittedSubtrees.length; i++)\r\n                _object.permittedSubtrees.push(this.permittedSubtrees[i].toJSON());\r\n        }\r\n\r\n        if(\"excludedSubtrees\" in this)\r\n        {\r\n            _object.excludedSubtrees = new Array();\r\n\r\n            for(var i = 0; i < this.excludedSubtrees.length; i++)\r\n                _object.excludedSubtrees.push(this.excludedSubtrees[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"BasicConstraints\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.BasicConstraints =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.cA - boolean value\r\n        // OPTIONAL this.pathLenConstraint - integer value\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.BasicConstraints.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"cA\" in arguments[0])\r\n                    this.cA = arguments[0].cA;\r\n\r\n                if(\"pathLenConstraint\" in arguments[0])\r\n                    this.pathLenConstraint = arguments[0].pathLenConstraint;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.BasicConstraints.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.BasicConstraints({\r\n                names: {\r\n                    cA: \"cA\",\r\n                    pathLenConstraint: \"pathLenConstraint\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for BasicConstraints\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"cA\" in asn1.result)\r\n            this.cA = asn1.result[\"cA\"].value_block.value;\r\n\r\n        if(\"pathLenConstraint\" in asn1.result)\r\n            this.pathLenConstraint = asn1.result[\"pathLenConstraint\"].value_block.value_dec;\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.BasicConstraints.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"cA\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.BOOLEAN({ value: this.cA }));\r\n\r\n        if(\"pathLenConstraint\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.INTEGER({ value: this.pathLenConstraint }));\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.BasicConstraints.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"cA\" in this)\r\n            _object.cA = this.cA;\r\n\r\n        if(\"pathLenConstraint\" in this)\r\n            _object.pathLenConstraint = this.pathLenConstraint;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"PolicyQualifierInfo\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyQualifierInfo =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.policyQualifierId = \"\";\r\n        this.qualifier = new in_window.org.pkijs.asn1.ANY();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.PolicyQualifierInfo.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.policyQualifierId = arguments[0].policyQualifierId || \"\";\r\n                this.qualifier = arguments[0].qualifier || new in_window.org.pkijs.asn1.ANY();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyQualifierInfo.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.PolicyQualifierInfo({\r\n                names: {\r\n                    policyQualifierId: \"policyQualifierId\",\r\n                    qualifier: \"qualifier\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PolicyQualifierInfo\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.policyQualifierId = asn1.result[\"policyQualifierId\"].value_block.toString();\r\n        this.qualifier = asn1.result[\"qualifier\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyQualifierInfo.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ value: this.policyQualifierId }),\r\n                this.qualifier\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyQualifierInfo.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            policyQualifierId: this.policyQualifierId,\r\n            qualifier: this.qualifier.toJSON()\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"PolicyInformation\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyInformation =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.policyIdentifier = \"\";\r\n        // OPTIONAL this.policyQualifiers = new Array(); // Array of \"simpl.x509.PolicyQualifierInfo\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.PolicyInformation.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.policyIdentifier = arguments[0].policyIdentifier || \"\";\r\n\r\n                if(\"policyQualifiers\" in arguments[0])\r\n                    this.policyQualifiers = arguments[0].policyQualifiers;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyInformation.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.PolicyInformation({\r\n                names: {\r\n                    policyIdentifier: \"policyIdentifier\",\r\n                    policyQualifiers: \"policyQualifiers\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.policyIdentifier = asn1.result[\"policyIdentifier\"].value_block.toString();\r\n\r\n        if(\"policyQualifiers\" in asn1.result)\r\n        {\r\n            this.policyQualifiers = new Array();\r\n            var qualifiers = asn1.result[\"policyQualifiers\"];\r\n\r\n            for(var i = 0; i < qualifiers.length; i++)\r\n                this.policyQualifiers.push(new in_window.org.pkijs.simpl.x509.PolicyQualifierInfo({ schema: qualifiers[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyInformation.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.OID({ value: this.policyIdentifier }));\r\n\r\n        if(\"policyQualifiers\" in this)\r\n        {\r\n            var qualifiers = new Array();\r\n\r\n            for(var i = 0; i < this.policyQualifiers.length; i++)\r\n                qualifiers.push(this.policyQualifiers[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.SEQUENCE({\r\n                value: qualifiers\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyInformation.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            policyIdentifier: this.policyIdentifier\r\n        };\r\n\r\n        if(\"policyQualifiers\" in this)\r\n        {\r\n            _object.policyQualifiers = new Array();\r\n\r\n            for(var i = 0; i < this.policyQualifiers.length; i++)\r\n                _object.policyQualifiers.push(this.policyQualifiers[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"CertificatePolicies\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CertificatePolicies =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.certificatePolicies = new Array(); // Array of \"simpl.x509.PolicyInformation\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.CertificatePolicies.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.certificatePolicies = arguments[0].certificatePolicies || new Array(); // Array of \"simpl.x509.PolicyInformation\"\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CertificatePolicies.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.CertificatePolicies({\r\n                names: {\r\n                    certificatePolicies: \"certificatePolicies\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for CertificatePolicies\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema\r\n        var policies = asn1.result[\"certificatePolicies\"];\r\n\r\n        for(var i = 0; i < policies.length; i++)\r\n            this.certificatePolicies.push(new in_window.org.pkijs.simpl.x509.PolicyInformation({ schema: policies[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CertificatePolicies.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.certificatePolicies.length; i++)\r\n            output_array.push(this.certificatePolicies[i].toSchema());\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CertificatePolicies.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            certificatePolicies: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.certificatePolicies.length; i++)\r\n            _object.certificatePolicies.push(this.certificatePolicies[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"PolicyConstraints\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyConstraints =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.requireExplicitPolicy = 0;\r\n        // OPTIONAL this.inhibitPolicyMapping = 0;\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.PolicyConstraints.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.requireExplicitPolicy = arguments[0].requireExplicitPolicy || 0;\r\n                this.inhibitPolicyMapping = arguments[0].inhibitPolicyMapping || 0;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyConstraints.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.PolicyConstraints({\r\n                names: {\r\n                    requireExplicitPolicy: \"requireExplicitPolicy\",\r\n                    inhibitPolicyMapping: \"inhibitPolicyMapping\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PolicyConstraints\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema\r\n        if(\"requireExplicitPolicy\" in asn1.result)\r\n        {\r\n            var field1 = asn1.result[\"requireExplicitPolicy\"];\r\n\r\n            field1.id_block.tag_class = 1; // UNIVERSAL\r\n            field1.id_block.tag_number = 2; // INTEGER\r\n\r\n            var ber1 = field1.toBER(false);\r\n            var int1 = in_window.org.pkijs.fromBER(ber1);\r\n\r\n            this.requireExplicitPolicy = int1.result.value_block.value_dec;\r\n        }\r\n\r\n        if(\"inhibitPolicyMapping\" in asn1.result)\r\n        {\r\n            var field2 = asn1.result[\"inhibitPolicyMapping\"];\r\n\r\n            field2.id_block.tag_class = 1; // UNIVERSAL\r\n            field2.id_block.tag_number = 2; // INTEGER\r\n\r\n            var ber2 = field2.toBER(false);\r\n            var int2 = in_window.org.pkijs.fromBER(ber2);\r\n\r\n            this.inhibitPolicyMapping = int2.result.value_block.value_dec;\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyConstraints.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create correct values for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"requireExplicitPolicy\" in this)\r\n        {\r\n            var int1 = new in_window.org.pkijs.asn1.INTEGER({ value: this.requireExplicitPolicy });\r\n\r\n            int1.id_block.tag_class = 3; // CONTEXT-SPECIFIC\r\n            int1.id_block.tag_number = 0; // [0]\r\n\r\n            output_array.push(int1);\r\n        }\r\n\r\n        if(\"inhibitPolicyMapping\" in this)\r\n        {\r\n            var int2 = new in_window.org.pkijs.asn1.INTEGER({ value: this.inhibitPolicyMapping });\r\n\r\n            int2.id_block.tag_class = 3; // CONTEXT-SPECIFIC\r\n            int2.id_block.tag_number = 1; // [1]\r\n\r\n            output_array.push(int2);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.PolicyConstraints.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"requireExplicitPolicy\" in this)\r\n            _object.requireExplicitPolicy = this.requireExplicitPolicy;\r\n\r\n        if(\"inhibitPolicyMapping\" in this)\r\n            _object.inhibitPolicyMapping = this.inhibitPolicyMapping;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"ExtKeyUsage\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.ExtKeyUsage =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.keyPurposes = new Array(); // Array of strings (OIDs value for key purposes)\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.ExtKeyUsage.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.keyPurposes = arguments[0].keyPurposes || new Array(); // Array of strings (OIDs value for key purposes)\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.ExtKeyUsage.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.ExtKeyUsage({\r\n                names: {\r\n                    keyPurposes: \"keyPurposes\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for ExtKeyUsage\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        var purposes = asn1.result[\"keyPurposes\"];\r\n\r\n        for(var i = 0; i < purposes.length; i++)\r\n            this.keyPurposes.push(purposes[i].value_block.toString());\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.ExtKeyUsage.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.keyPurposes.length; i++)\r\n            output_array.push(new in_window.org.pkijs.asn1.OID({ value: this.keyPurposes[i] }));\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.ExtKeyUsage.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            keyPurposes: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.keyPurposes.length; i++)\r\n            _object.keyPurposes.push(this.keyPurposes[i]);\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"DistributionPoint\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.DistributionPoint =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.distributionPoint // Array of \"simpl.GENERAL_NAME\" or a value of \"simpl.RDN\" type\r\n        // OPTIONAL this.reasons // BITSTRING value\r\n        // OPTIONAL this.cRLIssuer // Array of \"simpl.GENERAL_NAME\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.DistributionPoint.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"distributionPoint\" in arguments[0])\r\n                    this.distributionPoint = arguments[0].distributionPoint;\r\n\r\n                if(\"reasons\" in arguments[0])\r\n                    this.reasons = arguments[0].reasons;\r\n\r\n                if(\"cRLIssuer\" in arguments[0])\r\n                    this.cRLIssuer = arguments[0].cRLIssuer;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.DistributionPoint.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.DistributionPoint({\r\n                names: {\r\n                    distributionPoint: \"distributionPoint\",\r\n                    distributionPoint_names: \"distributionPoint_names\",\r\n                    reasons: \"reasons\",\r\n                    cRLIssuer: \"cRLIssuer\",\r\n                    cRLIssuer_names: \"cRLIssuer_names\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for DistributionPoint\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"distributionPoint\" in asn1.result)\r\n        {\r\n            if(asn1.result[\"distributionPoint\"].id_block.tag_number == 0) // GENERAL_NAMES variant\r\n            {\r\n                this.distributionPoint = new Array();\r\n                var names = asn1.result[\"distributionPoint_names\"];\r\n\r\n                for(var i = 0; i < names.length; i++)\r\n                    this.distributionPoint.push(new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: names[i] }));\r\n            }\r\n\r\n            if(asn1.result[\"distributionPoint\"].id_block.tag_number == 1) // RDN variant\r\n            {\r\n                asn1.result[\"distributionPoint\"].id_block.tag_class = 1; // UNIVERSAL\r\n                asn1.result[\"distributionPoint\"].id_block.tag_number = 16; // SEQUENCE\r\n\r\n                this.distributionPoint = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"distributionPoint\"] });\r\n            }\r\n        }\r\n\r\n        if(\"reasons\" in asn1.result)\r\n            this.reasons = new in_window.org.pkijs.asn1.BITSTRING({ value_hex: asn1.result[\"reasons\"].value_block.value_hex });\r\n\r\n        if(\"cRLIssuer\" in asn1.result)\r\n        {\r\n            this.cRLIssuer = new Array();\r\n            var crl_names = asn1.result[\"cRLIssuer_names\"];\r\n\r\n            for(var i = 0; i < crl_names; i++)\r\n                this.cRLIssuer.push(new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: crl_names[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.DistributionPoint.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"distributionPoint\" in this)\r\n        {\r\n            var internalValue;\r\n\r\n            if(this.distributionPoint instanceof Array)\r\n            {\r\n                var namesArray = new Array();\r\n\r\n                for(var i = 0; i < this.distributionPoint.length; i++)\r\n                    namesArray.push(this.distributionPoint[i].toSchema());\r\n\r\n                internalValue = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    },\r\n                    value: namesArray\r\n                });\r\n            }\r\n            else\r\n            {\r\n                internalValue = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 1 // [1]\r\n                    },\r\n                    value: [this.distributionPoint.toSchema()]\r\n                });\r\n            }\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: [internalValue]\r\n            }));\r\n        }\r\n\r\n        if(\"reasons\" in this)\r\n        {\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value_hex: this.reasons.value_block.value_hex\r\n            }));\r\n        }\r\n\r\n        if(\"cRLIssuer\" in this)\r\n        {\r\n            var value = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 2 // [2]\r\n                }\r\n            });\r\n\r\n            for(var i = 0; i < this.cRLIssuer.length; i++)\r\n                value.value_block.value.push(this.cRLIssuer[i].toSchema());\r\n\r\n            output_array.push(value);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.DistributionPoint.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"distributionPoint\" in this)\r\n        {\r\n            if(this.distributionPoint instanceof Array)\r\n            {\r\n                _object.distributionPoint = new Array();\r\n\r\n                for(var i = 0; i < this.distributionPoint.length; i++)\r\n                    _object.distributionPoint.push(this.distributionPoint[i].toJSON());\r\n            }\r\n            else\r\n                _object.distributionPoint = this.distributionPoint.toJSON();\r\n        }\r\n\r\n        if(\"reasons\" in this)\r\n            _object.reasons = this.reasons.toJSON();\r\n\r\n        if(\"cRLIssuer\" in this)\r\n        {\r\n            _object.cRLIssuer = new Array();\r\n\r\n            for(var i = 0; i < this.cRLIssuer.length; i++)\r\n                _object.cRLIssuer.push(this.cRLIssuer[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"CRLDistributionPoints\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CRLDistributionPoints =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.distributionPoints = new Array(); // Array of \"simpl.x509.DistributionPoint\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.CRLDistributionPoints.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.distributionPoints = arguments[0].distributionPoints || new Array(); // Array of \"simpl.x509.DistributionPoint\"\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CRLDistributionPoints.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.CRLDistributionPoints({\r\n                names: {\r\n                    distributionPoints: \"distributionPoints\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for CRLDistributionPoints\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        var points = asn1.result[\"distributionPoints\"];\r\n\r\n        for(var i = 0; i < points.length; i++)\r\n            this.distributionPoints.push(new in_window.org.pkijs.simpl.x509.DistributionPoint({ schema: points[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CRLDistributionPoints.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.distributionPoints.length; i++)\r\n            output_array.push(this.distributionPoints[i].toSchema());\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.CRLDistributionPoints.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            distributionPoints: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.distributionPoints.length; i++)\r\n            _object.distributionPoints.push(this.distributionPoints[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"AccessDescription\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AccessDescription =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.accessMethod = \"\";\r\n        this.accessLocation = new in_window.org.pkijs.simpl.GENERAL_NAME();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.AccessDescription.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.accessMethod = arguments[0].accessMethod || \"\";\r\n                this.accessLocation = arguments[0].accessLocation || new in_window.org.pkijs.simpl.GENERAL_NAME();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AccessDescription.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.AccessDescription({\r\n                names: {\r\n                    accessMethod: \"accessMethod\",\r\n                    accessLocation: {\r\n                        names: {\r\n                            block_name: \"accessLocation\"\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for AccessDescription\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.accessMethod = asn1.result[\"accessMethod\"].value_block.toString();\r\n        this.accessLocation = new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: asn1.result[\"accessLocation\"] });\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AccessDescription.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ value: this.accessMethod }),\r\n                this.accessLocation.toSchema()\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.AccessDescription.prototype.toJSON =\r\n    function()\r\n    {\r\n        return {\r\n            accessMethod: this.accessMethod,\r\n            accessLocation: this.accessLocation.toJSON()\r\n        };\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"AuthorityInfoAccess\" and \"SubjectInfoAccess\" types of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.InfoAccess =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.accessDescriptions = new Array(); // Array of \"simpl.x509.AccessDescription\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.InfoAccess.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.accessDescriptions = arguments[0].accessDescriptions || new Array(); // Array of \"simpl.x509.DistributionPoint\"\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.InfoAccess.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.InfoAccess({\r\n                names: {\r\n                    accessDescriptions: \"accessDescriptions\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for InfoAccess\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        var descriptions = asn1.result[\"accessDescriptions\"];\r\n\r\n        for(var i = 0; i < descriptions.length; i++)\r\n            this.accessDescriptions.push(new in_window.org.pkijs.simpl.x509.AccessDescription({ schema: descriptions[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.InfoAccess.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        for(var i = 0; i < this.accessDescriptions.length; i++)\r\n            output_array.push(this.accessDescriptions[i].toSchema());\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.InfoAccess.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            accessDescriptions: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.accessDescriptions.length; i++)\r\n            _object.accessDescriptions.push(this.accessDescriptions[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"IssuingDistributionPoint\" type of extension\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.IssuingDistributionPoint =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // OPTIONAL this.distributionPoint // Array of \"simpl.GENERAL_NAME\" or a value of \"simpl.RDN\" type\r\n        // OPTIONAL this.onlyContainsUserCerts // BOOLEAN flag\r\n        // OPTIONAL this.onlyContainsCACerts // BOOLEAN flag\r\n        // OPTIONAL this.onlySomeReasons // BITSTRING\r\n        // OPTIONAL this.indirectCRL // BOOLEAN flag\r\n        // OPTIONAL this.onlyContainsAttributeCerts // BOOLEAN flag\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.x509.IssuingDistributionPoint.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                if(\"distributionPoint\" in arguments[0])\r\n                    this.distributionPoint = arguments[0].distributionPoint;\r\n\r\n                if(\"onlyContainsUserCerts\" in arguments[0])\r\n                    this.onlyContainsUserCerts = arguments[0].onlyContainsUserCerts;\r\n\r\n                if(\"onlyContainsCACerts\" in arguments[0])\r\n                    this.onlyContainsCACerts = arguments[0].onlyContainsCACerts;\r\n\r\n                if(\"onlySomeReasons\" in arguments[0])\r\n                    this.onlySomeReasons = arguments[0].onlySomeReasons;\r\n\r\n                if(\"indirectCRL\" in arguments[0])\r\n                    this.indirectCRL = arguments[0].indirectCRL;\r\n\r\n                if(\"onlyContainsAttributeCerts\" in arguments[0])\r\n                    this.onlyContainsAttributeCerts = arguments[0].onlyContainsAttributeCerts;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.IssuingDistributionPoint.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.x509.IssuingDistributionPoint({\r\n                names: {\r\n                    distributionPoint: \"distributionPoint\",\r\n                    distributionPoint_names: \"distributionPoint_names\",\r\n                    onlyContainsUserCerts: \"onlyContainsUserCerts\",\r\n                    onlyContainsCACerts: \"onlyContainsCACerts\",\r\n                    onlySomeReasons: \"onlySomeReasons\",\r\n                    indirectCRL: \"indirectCRL\",\r\n                    onlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        if(\"distributionPoint\" in asn1.result)\r\n        {\r\n            if(asn1.result[\"distributionPoint\"].id_block.tag_number == 0) // GENERAL_NAMES variant\r\n            {\r\n                this.distributionPoint = new Array();\r\n                var names = asn1.result[\"distributionPoint_names\"];\r\n\r\n                for(var i = 0; i < names.length; i++)\r\n                    this.distributionPoint.push(new in_window.org.pkijs.simpl.GENERAL_NAME({ schema: names[i] }));\r\n            }\r\n\r\n            if(asn1.result[\"distributionPoint\"].id_block.tag_number == 1) // RDN variant\r\n            {\r\n                asn1.result[\"distributionPoint\"].id_block.tag_class = 1; // UNIVERSAL\r\n                asn1.result[\"distributionPoint\"].id_block.tag_number = 16; // SEQUENCE\r\n\r\n                this.distributionPoint = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"distributionPoint\"] });\r\n            }\r\n        }\r\n\r\n        if(\"onlyContainsUserCerts\" in asn1.result)\r\n        {\r\n            var view = new Uint8Array(asn1.result[\"onlyContainsUserCerts\"].value_block.value_hex);\r\n            this.onlyContainsUserCerts = (view[0] !== 0x00);\r\n        }\r\n\r\n        if(\"onlyContainsCACerts\" in asn1.result)\r\n        {\r\n            var view = new Uint8Array(asn1.result[\"onlyContainsCACerts\"].value_block.value_hex);\r\n            this.onlyContainsCACerts = (view[0] !== 0x00);\r\n        }\r\n\r\n        if(\"onlySomeReasons\" in asn1.result)\r\n        {\r\n            var view = new Uint8Array(asn1.result[\"onlySomeReasons\"].value_block.value_hex);\r\n            this.onlySomeReasons = view[0];\r\n        }\r\n\r\n        if(\"indirectCRL\" in asn1.result)\r\n        {\r\n            var view = new Uint8Array(asn1.result[\"indirectCRL\"].value_block.value_hex);\r\n            this.indirectCRL = (view[0] !== 0x00);\r\n        }\r\n\r\n        if(\"onlyContainsAttributeCerts\" in asn1.result)\r\n        {\r\n            var view = new Uint8Array(asn1.result[\"onlyContainsAttributeCerts\"].value_block.value_hex);\r\n            this.onlyContainsAttributeCerts = (view[0] !== 0x00);\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.IssuingDistributionPoint.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"distributionPoint\" in this)\r\n        {\r\n            var value;\r\n\r\n            if(this.distributionPoint instanceof Array)\r\n            {\r\n                value = new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                    id_block: {\r\n                        tag_class: 3, // CONTEXT-SPECIFIC\r\n                        tag_number: 0 // [0]\r\n                    }\r\n                });\r\n\r\n                for(var i = 0; i < this.distributionPoint.length; i++)\r\n                    value.value_block.value.push(this.distributionPoint[i].toSchema());\r\n            }\r\n            else\r\n            {\r\n                value = this.distributionPoint.toSchema();\r\n\r\n                value.id_block.tag_class = 3; // CONTEXT - SPECIFIC\r\n                value.id_block.tag_number = 1; // [1]\r\n            }\r\n\r\n            output_array.push(value);\r\n        }\r\n\r\n        if(\"onlyContainsUserCerts\" in this)\r\n        {\r\n            var buffer = new ArrayBuffer(1);\r\n            var view = new Uint8Array(buffer);\r\n\r\n            view[0] = (this.onlyContainsUserCerts === false) ? 0x00 : 0xFF;\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value_hex: buffer\r\n            }));\r\n        }\r\n\r\n        if(\"onlyContainsCACerts\" in this)\r\n        {\r\n            var buffer = new ArrayBuffer(1);\r\n            var view = new Uint8Array(buffer);\r\n\r\n            view[0] = (this.onlyContainsCACerts === false) ? 0x00 : 0xFF;\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 2 // [2]\r\n                },\r\n                value_hex: buffer\r\n            }));\r\n        }\r\n\r\n        if(\"onlySomeReasons\" in this)\r\n        {\r\n            var buffer = new ArrayBuffer(1);\r\n            var view = new Uint8Array(buffer);\r\n\r\n            view[0] = this.onlySomeReasons;\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 3 // [3]\r\n                },\r\n                value_hex: buffer\r\n            }));\r\n        }\r\n\r\n        if(\"indirectCRL\" in this)\r\n        {\r\n            var buffer = new ArrayBuffer(1);\r\n            var view = new Uint8Array(buffer);\r\n\r\n            view[0] = (this.indirectCRL === false) ? 0x00 : 0xFF;\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 4 // [4]\r\n                },\r\n                value_hex: buffer\r\n            }));\r\n        }\r\n\r\n        if(\"onlyContainsAttributeCerts\" in this)\r\n        {\r\n            var buffer = new ArrayBuffer(1);\r\n            var view = new Uint8Array(buffer);\r\n\r\n            view[0] = (this.onlyContainsAttributeCerts === false) ? 0x00 : 0xFF;\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 5 // [5]\r\n                },\r\n                value_hex: buffer\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.x509.IssuingDistributionPoint.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {};\r\n\r\n        if(\"distributionPoint\" in this)\r\n        {\r\n            if(this.distributionPoint instanceof Array)\r\n            {\r\n                _object.distributionPoint = new Array();\r\n\r\n                for(var i = 0; i < this.distributionPoint.length; i++)\r\n                    _object.distributionPoint.push(this.distributionPoint[i].toJSON());\r\n            }\r\n            else\r\n                _object.distributionPoint = this.distributionPoint.toJSON();\r\n        }\r\n\r\n        if(\"onlyContainsUserCerts\" in this)\r\n            _object.onlyContainsUserCerts = this.onlyContainsUserCerts;\r\n\r\n        if(\"onlyContainsCACerts\" in this)\r\n            _object.onlyContainsCACerts = this.onlyContainsCACerts;\r\n\r\n        if(\"onlySomeReasons\" in this)\r\n            _object.onlySomeReasons = this.onlySomeReasons;\r\n\r\n        if(\"indirectCRL\" in this)\r\n            _object.indirectCRL = this.indirectCRL;\r\n\r\n        if(\"onlyContainsAttributeCerts\" in this)\r\n            _object.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"Extension\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSION =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.extnID = \"\";\r\n        this.critical = false;\r\n        this.extnValue = new in_window.org.pkijs.asn1.OCTETSTRING();\r\n\r\n        // OPTIONAL this.parsedValue - Parsed \"extnValue\" in case of well-known \"extnID\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.EXTENSION.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.extnID = (arguments[0].extnID || \"\");\r\n                this.critical = (arguments[0].critical || false);\r\n                if(\"extnValue\" in arguments[0])\r\n                    this.extnValue = new in_window.org.pkijs.asn1.OCTETSTRING({ value_hex: arguments[0].extnValue });\r\n                else\r\n                    this.extnValue = new in_window.org.pkijs.asn1.OCTETSTRING();\r\n\r\n                if(\"parsedValue\" in arguments[0])\r\n                    this.parsedValue = arguments[0].parsedValue;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSION.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.EXTENSION({\r\n                names: {\r\n                    extnID: \"extnID\",\r\n                    critical: \"critical\",\r\n                    extnValue: \"extnValue\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for EXTENSION\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.extnID = asn1.result.extnID.value_block.toString();\r\n        if(\"critical\" in asn1.result)\r\n            this.critical = asn1.result.critical.value_block.value;\r\n        this.extnValue = asn1.result.extnValue;\r\n\r\n        // #region Get \"parsedValue\" for well-known extensions \r\n        asn1 = in_window.org.pkijs.fromBER(this.extnValue.value_block.value_hex);\r\n        if(asn1.offset === (-1))\r\n            return;\r\n\r\n        switch(this.extnID)\r\n        {\r\n            case \"2.5.29.9\": // SubjectDirectoryAttributes\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.SubjectDirectoryAttributes({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.14\": // SubjectKeyIdentifier\r\n                this.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\r\n                break;\r\n            case \"2.5.29.15\": // KeyUsage\r\n                this.parsedValue = asn1.result; // Should be just a simple BITSTRING\r\n                break;\r\n            case \"2.5.29.16\": // PrivateKeyUsagePeriod\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.PrivateKeyUsagePeriod({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.17\": // SubjectAltName\r\n            case \"2.5.29.18\": // IssuerAltName\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.AltName({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.19\": // BasicConstraints\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.BasicConstraints({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.20\": // CRLNumber\r\n            case \"2.5.29.27\": // BaseCRLNumber (delta CRL indicator)\r\n                this.parsedValue = asn1.result; // Should be just a simple INTEGER\r\n                break;\r\n            case \"2.5.29.21\": // CRLReason\r\n                this.parsedValue = asn1.result; // Should be just a simple ENUMERATED\r\n                break;\r\n            case \"2.5.29.24\": // InvalidityDate\r\n                this.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\r\n                break;\r\n            case \"2.5.29.28\": // IssuingDistributionPoint\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.IssuingDistributionPoint({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.29\": // CertificateIssuer\r\n                this.parsedValue = new in_window.org.pkijs.simpl.GENERAL_NAMES({ schema: asn1.result }); // Should be just a simple \r\n                break;\r\n            case \"2.5.29.30\": // NameConstraints\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.NameConstraints({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.31\": // CRLDistributionPoints\r\n            case \"2.5.29.46\": // FreshestCRL\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.CRLDistributionPoints({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.32\": // CertificatePolicies\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.CertificatePolicies({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.33\": // PolicyMappings\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.PolicyMappings({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.35\": // AuthorityKeyIdentifier\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.AuthorityKeyIdentifier({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.36\": // PolicyConstraints\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.PolicyConstraints({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.37\": // ExtKeyUsage\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.ExtKeyUsage({ schema: asn1.result });\r\n                break;\r\n            case \"2.5.29.54\": // InhibitAnyPolicy\r\n                this.parsedValue = asn1.result; // Should be just a simple INTEGER\r\n                break;\r\n            case \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n            case \"1.3.6.1.5.5.7.1.11\": // SubjectInfoAccess\r\n                this.parsedValue = new in_window.org.pkijs.simpl.x509.InfoAccess({ schema: asn1.result });\r\n                break;\r\n            default:;\r\n        }\r\n        // #endregion \r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSION.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.OID({ value: this.extnID }));\r\n\r\n        if(this.critical)\r\n            output_array.push(new in_window.org.pkijs.asn1.BOOLEAN({ value: this.critical }));\r\n\r\n        output_array.push(this.extnValue);\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSION.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            extnID: this.extnID,\r\n            critical: this.critical,\r\n            extnValue: this.extnValue.toJSON()\r\n        };\r\n\r\n        if(\"parsedValue\" in this)\r\n            _object.parsedValue = this.parsedValue.toJSON();\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"Extensions\" type (sequence of many Extension)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSIONS =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.extensions_array = new Array();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.EXTENSIONS.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n                this.extensions_array = (arguments[0].extensions_array || (new Array()));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSIONS.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.EXTENSIONS({\r\n                names: {\r\n                    extensions: \"extensions\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for EXTENSIONS\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        for(var i = 0; i < asn1.result.extensions.length; i++)\r\n            this.extensions_array.push(new in_window.org.pkijs.simpl.EXTENSION({ schema: asn1.result.extensions[i] }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSIONS.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        var extension_schemas = new Array();\r\n\r\n        for(var i = 0; i < this.extensions_array.length; i++)\r\n            extension_schemas.push(this.extensions_array[i].toSchema());\r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: extension_schemas\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.EXTENSIONS.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            extensions_array: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.extensions_array.length; i++)\r\n            _object.extensions_array.push(this.extensions_array[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for X.509 v3 certificate (RFC5280)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // #region Properties from certificate TBS part \r\n        this.tbs = new ArrayBuffer(0); // Encoded value of certificate TBS (need to have it for certificate validation)\r\n\r\n        // OPTIONAL this.version = 0;\r\n        this.serialNumber = new in_window.org.pkijs.asn1.INTEGER(); // Might be a very long integer value\r\n        this.signature = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER(); // Signature algorithm from certificate TBS part\r\n        this.issuer = new in_window.org.pkijs.simpl.RDN();\r\n        this.notBefore = new in_window.org.pkijs.simpl.TIME();\r\n        this.notAfter = new in_window.org.pkijs.simpl.TIME();\r\n        this.subject = new in_window.org.pkijs.simpl.RDN();\r\n        this.subjectPublicKeyInfo = new in_window.org.pkijs.simpl.PUBLIC_KEY_INFO();\r\n        // OPTIONAL this.issuerUniqueID = new ArrayBuffer(0); // IMPLICIT bistring value\r\n        // OPTIONAL this.subjectUniqueID = new ArrayBuffer(0); // IMPLICIT bistring value\r\n        // OPTIONAL this.extensions = new Array(); // Array of \"simpl.EXTENSION\"\r\n        // #endregion \r\n\r\n        // #region Properties from certificate major part \r\n        this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER(); // Signature algorithm from certificate major part\r\n        this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING();\r\n        // #endregion \r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.CERT.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                // #region Properties from certificate TBS part \r\n                this.tbs = arguments[0].tbs || new ArrayBuffer(0);\r\n\r\n                if(\"version\" in arguments[0])\r\n                    this.version = arguments[0].version;\r\n                this.serialNumber = arguments[0].serialNumber || new in_window.org.pkijs.asn1.INTEGER(); // Might be a very long integer value\r\n                this.signature = arguments[0].signature || new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER(); // Signature algorithm from certificate TBS part\r\n                this.issuer = arguments[0].issuer || new in_window.org.pkijs.simpl.RDN();\r\n                this.notBefore = arguments[0].not_before || new in_window.org.pkijs.simpl.TIME();\r\n                this.notAfter = arguments[0].not_after || new in_window.org.pkijs.simpl.TIME();\r\n                this.subject = arguments[0].subject || new in_window.org.pkijs.simpl.RDN();\r\n                this.subjectPublicKeyInfo = arguments[0].subjectPublicKeyInfo || new in_window.org.pkijs.simpl.PUBLIC_KEY_INFO();\r\n                if(\"issuerUniqueID\" in arguments[0])\r\n                    this.issuerUniqueID = arguments[0].issuerUniqueID;\r\n                if(\"subjectUniqueID\" in arguments[0])\r\n                    this.subjectUniqueID = arguments[0].subjectUniqueID;\r\n                if(\"extensions\" in arguments[0])\r\n                    this.extensions = arguments[0].extensions;\r\n                // #endregion \r\n\r\n                // #region Properties from certificate major part \r\n                this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER(); // Signature algorithm from certificate major part\r\n                this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING();\r\n                // #endregion \r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.CERT({\r\n                names: {\r\n                    tbsCertificate: {\r\n                        names: {\r\n                            extensions: {\r\n                                names: {\r\n                                    extensions: \"tbsCertificate.extensions\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for CERT\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.tbs = asn1.result[\"tbsCertificate\"].value_before_decode;\r\n\r\n        if(\"tbsCertificate.version\" in asn1.result)\r\n            this.version = asn1.result[\"tbsCertificate.version\"].value_block.value_dec;\r\n        this.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n        this.signature = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n        this.issuer = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n        this.notBefore = new in_window.org.pkijs.simpl.TIME({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n        this.notAfter = new in_window.org.pkijs.simpl.TIME({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n        this.subject = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n        this.subjectPublicKeyInfo = new in_window.org.pkijs.simpl.PUBLIC_KEY_INFO({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n        if(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n            this.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].value_block.value_hex;\r\n        if(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n            this.issuerUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].value_block.value_hex;\r\n        if(\"tbsCertificate.extensions\" in asn1.result)\r\n        {\r\n            this.extensions = new Array();\r\n\r\n            var extensions = asn1.result[\"tbsCertificate.extensions\"];\r\n\r\n            for(var i = 0; i < extensions.length; i++)\r\n                this.extensions.push(new in_window.org.pkijs.simpl.EXTENSION({ schema: extensions[i] }));\r\n        }\r\n\r\n        this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"signatureAlgorithm\"] });\r\n        this.signatureValue = asn1.result[\"signatureValue\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.encodeTBS =\r\n    function()\r\n    {\r\n        /// <summary>Create ASN.1 schema for existing values of TBS part for the certificate</summary>\r\n\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"version\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: [\r\n                    new in_window.org.pkijs.asn1.INTEGER({ value: this.version }) // EXPLICIT integer value\r\n                ]\r\n            }));\r\n\r\n        output_array.push(this.serialNumber);\r\n        output_array.push(this.signature.toSchema());\r\n        output_array.push(this.issuer.toSchema());\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                this.notBefore.toSchema(),\r\n                this.notAfter.toSchema()\r\n            ]\r\n        }));\r\n\r\n        output_array.push(this.subject.toSchema());\r\n        output_array.push(this.subjectPublicKeyInfo.toSchema());\r\n\r\n        if(\"issuerUniqueID\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 1 // [1]\r\n                },\r\n                value_hex: this.issuerUniqueID\r\n            }));\r\n        if(\"subjectUniqueID\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_PRIMITIVE({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 2 // [2]\r\n                },\r\n                value_hex: this.subjectUniqueID\r\n            }));\r\n\r\n        if(\"subjectUniqueID\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 3 // [3]\r\n                },\r\n                value: [this.extensions.toSchema()]\r\n            }));\r\n\r\n        if(\"extensions\" in this)\r\n        {\r\n            var extensions = new Array();\r\n\r\n            for(var i = 0; i < this.extensions.length; i++)\r\n                extensions.push(this.extensions[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 3 // [3]\r\n                },\r\n                value: [new in_window.org.pkijs.asn1.SEQUENCE({\r\n                    value: extensions\r\n                })]\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Create and return output sequence \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.toSchema =\r\n    function(encodeFlag)\r\n    {\r\n        /// <param name=\"encodeFlag\" type=\"Boolean\">If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.</param>\r\n\r\n        if(typeof encodeFlag === \"undefined\")\r\n            encodeFlag = false;\r\n\r\n        var tbs_schema = {};\r\n\r\n        // #region Decode stored TBS value \r\n        if(encodeFlag === false)\r\n        {\r\n            if(this.tbs.length === 0) // No stored certificate TBS part\r\n                return in_window.org.pkijs.schema.CERT().value[0];\r\n\r\n            var tbs_asn1 = in_window.org.pkijs.fromBER(this.tbs);\r\n\r\n            tbs_schema = tbs_asn1.result;\r\n        }\r\n            // #endregion \r\n            // #region Create TBS schema via assembling from TBS parts \r\n        else\r\n            tbs_schema = in_window.org.pkijs.simpl.CERT.prototype.encodeTBS.call(this);\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                tbs_schema,\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.verify =\r\n    function()\r\n    {\r\n        /// <summary>!!! Works well in Chrome dev versions only (April 2014th) !!!</summary>\r\n        /// <returns type=\"Promise\">Returns a new Promise object (in case of error), or a result of \"crypto.subtle.veryfy\" function</returns>\r\n\r\n        // #region Global variables \r\n        var sequence = Promise.resolve();\r\n\r\n        var subjectPublicKeyInfo = {};\r\n\r\n        var signature = this.signatureValue;\r\n        var tbs = this.tbs;\r\n\r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Set correct \"subjectPublicKeyInfo\" value \r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"issuerCertificate\" in arguments[0]) // Must be of type \"simpl.CERT\"\r\n                subjectPublicKeyInfo = arguments[0].issuerCertificate.subjectPublicKeyInfo;\r\n        }\r\n        else\r\n        {\r\n            if(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n                subjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n        }\r\n\r\n        if((subjectPublicKeyInfo instanceof in_window.org.pkijs.simpl.PUBLIC_KEY_INFO) === false)\r\n            return Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Find signer's hashing algorithm \r\n        var sha_algorithm = in_window.org.pkijs.getHashAlgorithm(this.signatureAlgorithm);\r\n        if(sha_algorithm === \"\")\r\n            return Promise.reject(\"Unsupported signature algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n        // #endregion \r\n\r\n        // #region Importing public key \r\n        sequence = sequence.then(\r\n            function()\r\n            {\r\n                // #region Get information about public key algorithm and default parameters for import\r\n                var algorithmObject = in_window.org.pkijs.getAlgorithmByOID(_this.signatureAlgorithm.algorithm_id);\r\n                if((\"name\" in algorithmObject) === false)\r\n                    return Promise.reject(\"Unsupported public key algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n\r\n                var algorithm_name = algorithmObject.name;\r\n\r\n                var algorithm = in_window.org.pkijs.getAlgorithmParameters(algorithm_name, \"importkey\");\r\n                if(\"hash\" in algorithm.algorithm)\r\n                    algorithm.algorithm.hash.name = sha_algorithm;\r\n\r\n                // #region Special case for ECDSA \r\n                if(algorithm_name === \"ECDSA\")\r\n                {\r\n                    // #region Get information about named curve \r\n                    if((subjectPublicKeyInfo.algorithm.algorithm_params instanceof in_window.org.pkijs.asn1.OID) === false)\r\n                        return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\r\n                    var curveObject = in_window.org.pkijs.getAlgorithmByOID(subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                    if((\"name\" in curveObject) === false)\r\n                        return Promise.reject(\"Unsupported named curve algorithm: \" + subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                    // #endregion \r\n\r\n                    algorithm.algorithm.namedCurve = curveObject.name;\r\n                }\r\n                // #endregion \r\n                // #endregion \r\n\r\n                var publicKeyInfo_schema = subjectPublicKeyInfo.toSchema();\r\n                var publicKeyInfo_buffer = publicKeyInfo_schema.toBER(false);\r\n                var publicKeyInfo_view = new Uint8Array(publicKeyInfo_buffer);\r\n\r\n                return crypto.importKey(\"spki\", publicKeyInfo_view, algorithm.algorithm, true, algorithm.usages);\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        // #region Verify signature for the certificate \r\n        sequence = sequence.then(\r\n            function(publicKey)\r\n            {\r\n                // #region Get default algorithm parameters for verification \r\n                var algorithm = in_window.org.pkijs.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n                if(\"hash\" in algorithm.algorithm)\r\n                    algorithm.algorithm.hash.name = sha_algorithm;\r\n                // #endregion \r\n\r\n                // #region Special case for ECDSA signatures \r\n                var signature_value = signature.value_block.value_hex;\r\n\r\n                if(publicKey.algorithm.name === \"ECDSA\")\r\n                {\r\n                    var asn1 = in_window.org.pkijs.fromBER(signature_value);\r\n                    signature_value = in_window.org.pkijs.createECDSASignatureFromCMS(asn1.result);\r\n                }\r\n                // #endregion \r\n\r\n                // #region Special case for RSA-PSS \r\n                if(publicKey.algorithm.name === \"RSA-PSS\")\r\n                {\r\n                    var pssParameters;\r\n\r\n                    try\r\n                    {\r\n                        pssParameters = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params({ schema: _this.signatureAlgorithm.algorithm_params });\r\n                    }\r\n                    catch(ex)\r\n                    {\r\n                        return Promise.reject(ex);\r\n                    }\r\n\r\n                    if(\"saltLength\" in pssParameters)\r\n                        algorithm.algorithm.saltLength = pssParameters.saltLength;\r\n                    else\r\n                        algorithm.algorithm.saltLength = 20;\r\n\r\n                    var hash_algo = \"SHA-1\";\r\n\r\n                    if(\"hashAlgorithm\" in pssParameters)\r\n                    {\r\n                        var hashAlgorithm = in_window.org.pkijs.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithm_id);\r\n                        if((\"name\" in hashAlgorithm) === false)\r\n                            return Promise.reject(\"Unrecognized hash algorithm: \" + pssParameters.hashAlgorithm.algorithm_id);\r\n\r\n                        hash_algo = hashAlgorithm.name;\r\n                    }\r\n\r\n                    algorithm.algorithm.hash.name = hash_algo;\r\n                }\r\n                // #endregion \r\n\r\n                return crypto.verify(algorithm.algorithm,\r\n                    publicKey,\r\n                    new Uint8Array(signature_value),\r\n                    new Uint8Array(tbs));\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        return sequence;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.sign =\r\n    function(privateKey, hashAlgorithm)\r\n    {\r\n        /// <param name=\"privateKey\" type=\"CryptoKey\">Private key for \"subjectPublicKeyInfo\" structure</param>\r\n        /// <param name=\"hashAlgorithm\" type=\"String\" optional=\"true\">Hashing algorithm. Default SHA-1</param>\r\n\r\n        // #region Initial variables \r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Get a private key from function parameter \r\n        if(typeof privateKey === \"undefined\")\r\n            return Promise.reject(\"Need to provide a private key for signing\");\r\n        // #endregion \r\n\r\n        // #region Get hashing algorithm \r\n        if(typeof hashAlgorithm === \"undefined\")\r\n            hashAlgorithm = \"SHA-1\";\r\n        else\r\n        {\r\n            // #region Simple check for supported algorithm \r\n            var oid = in_window.org.pkijs.getOIDByAlgorithm({ name: hashAlgorithm });\r\n            if(oid === \"\")\r\n                return Promise.reject(\"Unsupported hash algorithm: \" + hashAlgorithm);\r\n            // #endregion \r\n        }\r\n        // #endregion \r\n\r\n        // #region Get a \"default parameters\" for current algorithm \r\n        var defParams = in_window.org.pkijs.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n        defParams.algorithm.hash.name = hashAlgorithm;\r\n        // #endregion \r\n\r\n        // #region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\" \r\n        switch(privateKey.algorithm.name.toUpperCase())\r\n        {\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n            case \"ECDSA\":\r\n                _this.signature.algorithm_id = in_window.org.pkijs.getOIDByAlgorithm(defParams.algorithm);\r\n                _this.signatureAlgorithm.algorithm_id = _this.signature.algorithm_id;\r\n                break;\r\n            case \"RSA-PSS\":\r\n                {\r\n                    // #region Set \"saltLength\" as a length (in octets) of hash function result \r\n                    switch(hashAlgorithm.toUpperCase())\r\n                    {\r\n                        case \"SHA-256\":\r\n                            defParams.algorithm.saltLength = 32;\r\n                            break;\r\n                        case \"SHA-384\":\r\n                            defParams.algorithm.saltLength = 48;\r\n                            break;\r\n                        case \"SHA-512\":\r\n                            defParams.algorithm.saltLength = 64;\r\n                            break;\r\n                        default:;\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Fill \"RSASSA_PSS_params\" object \r\n                    var paramsObject = {};\r\n\r\n                    if(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n                    {\r\n                        var hashAlgorithmOID = in_window.org.pkijs.getOIDByAlgorithm({ name: hashAlgorithm });\r\n                        if(hashAlgorithmOID === \"\")\r\n                            return Promise.reject(\"Unsupported hash algorithm: \" + hashAlgorithm);\r\n\r\n                        paramsObject.hashAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                            algorithm_id: hashAlgorithmOID,\r\n                            algorithm_params: new in_window.org.pkijs.asn1.NULL()\r\n                        });\r\n\r\n                        paramsObject.maskGenAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                            algorithm_id: \"1.2.840.113549.1.1.8\", // MGF1\r\n                            algorithm_params: paramsObject.hashAlgorithm.toSchema()\r\n                        })\r\n                    }\r\n\r\n                    if(defParams.algorithm.saltLength !== 20)\r\n                        paramsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n                    var pssParameters = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params(paramsObject);\r\n                    // #endregion   \r\n\r\n                    // #region Automatically set signature algorithm \r\n                    _this.signature = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                        algorithm_id: \"1.2.840.113549.1.1.10\",\r\n                        algorithm_params: pssParameters.toSchema()\r\n                    });\r\n                    _this.signatureAlgorithm = _this.signature; // Must be the same\r\n                    // #endregion \r\n                }\r\n                break;\r\n            default:\r\n                return Promise.reject(\"Unsupported signature algorithm: \" + privateKey.algorithm.name);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Create TBS data for signing \r\n        _this.tbs = in_window.org.pkijs.simpl.CERT.prototype.encodeTBS.call(this).toBER(false);\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Signing TBS data on provided private key \r\n        return crypto.sign(defParams.algorithm,\r\n            privateKey,\r\n            new Uint8Array(_this.tbs)).then(\r\n            function(result)\r\n            {\r\n                // #region Special case for ECDSA algorithm \r\n                if(defParams.algorithm.name === \"ECDSA\")\r\n                    result = in_window.org.pkijs.createCMSECDSASignature(result);\r\n                // #endregion \r\n\r\n                _this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING({ value_hex: result });\r\n            },\r\n            function(error)\r\n            {\r\n                return Promise.reject(\"Signing error: \" + error);\r\n            }\r\n            );\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.getPublicKey =\r\n    function()\r\n    {\r\n        /// <summary>Importing public key for current certificate</summary>\r\n\r\n        // #region Initial variables \r\n        var algorithm;\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Find correct algorithm for imported public key \r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"algorithm\" in arguments[0])\r\n                algorithm = arguments[0].algorithm;\r\n            else\r\n                return Promise.reject(\"Absent mandatory parameter \\\"algorithm\\\"\");\r\n        }\r\n        else\r\n        {\r\n            // #region Find signer's hashing algorithm \r\n            var sha_algorithm = in_window.org.pkijs.getHashAlgorithm(this.signatureAlgorithm);\r\n            if(sha_algorithm === \"\")\r\n                return Promise.reject(\"Unsupported signature algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n            // #endregion   \r\n\r\n            // #region Get information about public key algorithm and default parameters for import\r\n            var algorithmObject = in_window.org.pkijs.getAlgorithmByOID(this.signatureAlgorithm.algorithm_id);\r\n            if((\"name\" in algorithmObject) === false)\r\n                return Promise.reject(\"Unsupported public key algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n\r\n            var algorithm_name = algorithmObject.name;\r\n\r\n            algorithm = in_window.org.pkijs.getAlgorithmParameters(algorithm_name, \"importkey\");\r\n            if(\"hash\" in algorithm.algorithm)\r\n                algorithm.algorithm.hash.name = sha_algorithm;\r\n\r\n            // #region Special case for ECDSA \r\n            if(algorithm_name === \"ECDSA\")\r\n            {\r\n                // #region Get information about named curve \r\n                if((this.subjectPublicKeyInfo.algorithm.algorithm_params instanceof in_window.org.pkijs.asn1.OID) === false)\r\n                    return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\r\n                var curveObject = in_window.org.pkijs.getAlgorithmByOID(this.subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                if((\"name\" in curveObject) === false)\r\n                    return Promise.reject(\"Unsupported named curve algorithm: \" + this.subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                // #endregion \r\n\r\n                algorithm.algorithm.namedCurve = curveObject.name;\r\n            }\r\n            // #endregion \r\n            // #endregion \r\n        }\r\n        // #endregion \r\n\r\n        // #region Get neccessary values from internal fields for current certificate \r\n        var publicKeyInfo_schema = this.subjectPublicKeyInfo.toSchema();\r\n        var publicKeyInfo_buffer = publicKeyInfo_schema.toBER(false);\r\n        var publicKeyInfo_view = new Uint8Array(publicKeyInfo_buffer);\r\n        // #endregion \r\n\r\n        return crypto.importKey(\"spki\", publicKeyInfo_view, algorithm.algorithm, true, algorithm.usages);\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.getKeyHash =\r\n    function()\r\n    {\r\n        /// <summary>Get SHA-1 hash value for subject public key</summary>\r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        return crypto.digest({ name: \"sha-1\" }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.value_block.value_hex));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            tbs: in_window.org.pkijs.bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n            serialNumber: this.serialNumber.toJSON(),\r\n            signature: this.signature.toJSON(),\r\n            issuer: this.issuer.toJSON(),\r\n            notBefore: this.notBefore.toJSON(),\r\n            notAfter: this.notAfter.toJSON(),\r\n            subject: this.subject.toJSON(),\r\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON()\r\n        };\r\n\r\n        if(\"version\" in this)\r\n            _object.version = this.version;\r\n\r\n        if(\"issuerUniqueID\" in this)\r\n            _object.issuerUniqueID = in_window.org.pkijs.bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\r\n        if(\"subjectUniqueID\" in this)\r\n            _object.subjectUniqueID = in_window.org.pkijs.bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\r\n        if(\"extensions\" in this)\r\n        {\r\n            _object.extensions = new Array();\r\n\r\n            for(var i = 0; i < this.extensions.length; i++)\r\n                _object.extensions.push(this.extensions[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"revoked certificate\" type (to use in CRL)\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.REV_CERT =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.userCertificate = new in_window.org.pkijs.asn1.INTEGER();\r\n        this.revocationDate = new in_window.org.pkijs.simpl.TIME();\r\n        // OPTIONAL this.crlEntryExtensions = new Array(); // Array of \"in_window.org.pkijs.simpl.EXTENSION\");\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.REV_CERT.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.userCertificate = arguments[0].userCertificate || new in_window.org.pkijs.asn1.INTEGER();\r\n                this.revocationDate = arguments[0].revocationDate || new in_window.org.pkijs.simpl.TIME();\r\n                if(\"crlEntryExtensions\" in arguments[0])\r\n                    this.crlEntryExtensions = arguments[0].crlEntryExtensions;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.REV_CERT.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            new in_window.org.pkijs.asn1.SEQUENCE({\r\n                value: [\r\n                    new in_window.org.pkijs.asn1.INTEGER({ name: \"userCertificate\" }),\r\n                    in_window.org.pkijs.schema.TIME({\r\n                        names: {\r\n                            utcTimeName: \"revocationDate\",\r\n                            generalTimeName: \"revocationDate\"\r\n                        }\r\n                    }),\r\n                    in_window.org.pkijs.schema.EXTENSIONS({\r\n                        names: {\r\n                            block_name: \"crlEntryExtensions\"\r\n                        }\r\n                    }, true)\r\n                ]\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for REV_CERT\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.userCertificate = asn1.result[\"userCertificate\"];\r\n        this.revocationDate = new in_window.org.pkijs.simpl.TIME({ schema: asn1.result[\"revocationDate\"] });\r\n\r\n        if(\"crlEntryExtensions\" in asn1.result)\r\n        {\r\n            this.crlEntryExtensions = new Array();\r\n            var exts = asn1.result[\"crlEntryExtensions\"].value_block.value;\r\n\r\n            for(var i = 0; i < exts.length; i++)\r\n                this.crlEntryExtensions.push(new in_window.org.pkijs.simpl.EXTENSION({ schema: exts[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.REV_CERT.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var sequence_array = new Array();\r\n        sequence_array.push(this.userCertificate);\r\n        sequence_array.push(this.revocationDate.toSchema());\r\n\r\n        if(\"crlEntryExtensions\" in this)\r\n        {\r\n            var exts = new Array();\r\n\r\n            for(var i = 0; i < this.crlEntryExtensions.length; i++)\r\n                exts.push(this.crlEntryExtensions[i].toSchema());\r\n\r\n            sequence_array.push(new in_window.org.pkijs.asn1.SEQUENCE({ value: exts }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: sequence_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.REV_CERT.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            userCertificate: this.userCertificate.toJSON(),\r\n            revocationDate: this.revocationDate.toJSON\r\n        };\r\n\r\n        if(\"crlEntryExtensions\" in this)\r\n        {\r\n            _object.crlEntryExtensions = new Array();\r\n\r\n            for(var i = 0; i < this.crlEntryExtensions.length; i++)\r\n                _object.crlEntryExtensions.push(this.crlEntryExtensions[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for X.509 CRL (Certificate Revocation List)(RFC5280)  \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        // #region Properties from CRL TBS part \r\n        this.tbs = new ArrayBuffer(0);\r\n\r\n        // OPTIONAL this.version = 1;\r\n        this.signature = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n        this.issuer = new in_window.org.pkijs.simpl.RDN();\r\n        this.thisUpdate = new in_window.org.pkijs.simpl.TIME();\r\n        // OPTIONAL this.nextUpdate = new in_window.org.pkijs.simpl.TIME();\r\n        // OPTIONAL this.revokedCertificates = new Array(); // Array of REV_CERT objects\r\n        // OPTIONAL this.crlExtensions = new Array(); // Array of in_window.org.pkijs.simpl.EXTENSION();\r\n        // #endregion \r\n\r\n        // #region Properties from CRL major part \r\n        this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n        this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING();\r\n        // #endregion \r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.CRL.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                // #region Properties from CRL TBS part \r\n                this.tbs = arguments[0].tbs || new ArrayBuffer(0);\r\n\r\n                if(\"version\" in arguments[0])\r\n                    this.version = arguments[0].version;\r\n                this.signature = arguments[0].signature || new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n                this.issuer = arguments[0].issuer || new in_window.org.pkijs.simpl.RDN();\r\n                this.thisUpdate = arguments[0].thisUpdate || new in_window.org.pkijs.simpl.TIME();\r\n                if(\"nextUpdate\" in arguments[0])\r\n                    this.nextUpdate = arguments[0].nextUpdate;\r\n                if(\"revokedCertificates\" in arguments[0])\r\n                    this.revokedCertificates = arguments[0].revokedCertificates;\r\n                if(\"crlExtensions\" in arguments[0])\r\n                    this.crlExtensions = arguments[0].crlExtensions;\r\n                // #endregion \r\n\r\n                // #region Properties from CRL major part \r\n                this.signatureAlgorithm = arguments[0].signatureAlgorithm || new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n                this.signatureValue = arguments[0].signatureValue || new in_window.org.pkijs.asn1.BITSTRING();\r\n                // #endregion \r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.CRL()\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for CRL\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.tbs = asn1.result[\"tbsCertList\"].value_before_decode;\r\n\r\n        if(\"tbsCertList.version\" in asn1.result)\r\n            this.version = asn1.result[\"tbsCertList.version\"].value_block.value_dec;\r\n        this.signature = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n        this.issuer = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n        this.thisUpdate = new in_window.org.pkijs.simpl.TIME({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n        if(\"tbsCertList.nextUpdate\" in asn1.result)\r\n            this.nextUpdate = new in_window.org.pkijs.simpl.TIME({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n        if(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n        {\r\n            this.revokedCertificates = new Array();\r\n\r\n            var rev_certs = asn1.result[\"tbsCertList.revokedCertificates\"];\r\n            for(var i = 0; i < rev_certs.length; i++)\r\n                this.revokedCertificates.push(new in_window.org.pkijs.simpl.REV_CERT({ schema: rev_certs[i] }));\r\n        }\r\n        if(\"tbsCertList.extensions\" in asn1.result)\r\n        {\r\n            this.crlExtensions = new Array();\r\n            var exts = asn1.result[\"tbsCertList.extensions\"].value_block.value;\r\n\r\n            for(var i = 0; i < exts.length; i++)\r\n                this.crlExtensions.push(new in_window.org.pkijs.simpl.EXTENSION({ schema: exts[i] }));\r\n        }\r\n\r\n        this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"signatureAlgorithm\"] });\r\n        this.signatureValue = asn1.result[\"signatureValue\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.encodeTBS =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        if(\"version\" in this)\r\n            output_array.push(new in_window.org.pkijs.asn1.INTEGER({ value: this.version }));\r\n\r\n        output_array.push(this.signature.toSchema());\r\n        output_array.push(this.issuer.toSchema());\r\n        output_array.push(this.thisUpdate.toSchema());\r\n\r\n        if(\"nextUpdate\" in this)\r\n            output_array.push(this.nextUpdate.toSchema());\r\n\r\n        if(\"revokedCertificates\" in this)\r\n        {\r\n            var rev_certificates = new Array();\r\n\r\n            for(var i = 0; i < this.revokedCertificates.length; i++)\r\n                rev_certificates.push(this.revokedCertificates[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.SEQUENCE({\r\n                value: rev_certificates\r\n            }));\r\n        }\r\n\r\n        if(\"crlExtensions\" in this)\r\n        {\r\n            var extensions = new Array();\r\n\r\n            for(var j = 0; j < this.crlExtensions.length; j++)\r\n                extensions.push(this.crlExtensions[j].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: [\r\n                    new in_window.org.pkijs.asn1.SEQUENCE({\r\n                        value: extensions\r\n                    })\r\n                ]\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.toSchema =\r\n    function(encodeFlag)\r\n    {\r\n        /// <param name=\"encodeFlag\" type=\"Boolean\">If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.</param>\r\n\r\n        // #region Check \"encodeFlag\" \r\n        if(typeof encodeFlag === \"undefined\")\r\n            encodeFlag = false;\r\n        // #endregion \r\n\r\n        // #region Decode stored TBS value \r\n        var tbs_schema;\r\n\r\n        if(encodeFlag === false)\r\n        {\r\n            if(this.tbs.length === 0) // No stored TBS part\r\n                return in_window.org.pkijs.schema.CRL();\r\n\r\n            tbs_schema = in_window.org.pkijs.fromBER(this.tbs).result;\r\n        }\r\n            // #endregion \r\n            // #region Create TBS schema via assembling from TBS parts \r\n        else\r\n            tbs_schema = in_window.org.pkijs.simpl.CRL.prototype.encodeTBS.call(this);\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                tbs_schema,\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.verify =\r\n    function()\r\n    {\r\n        // #region Global variables \r\n        var sequence = Promise.resolve();\r\n\r\n        var signature = this.signatureValue;\r\n        var tbs = this.tbs;\r\n\r\n        var subjectPublicKeyInfo = -1;\r\n\r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Get information about CRL issuer certificate \r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"issuerCertificate\" in arguments[0]) // \"issuerCertificate\" must be of type \"simpl.CERT\"\r\n            {\r\n                subjectPublicKeyInfo = arguments[0].issuerCertificate.subjectPublicKeyInfo;\r\n\r\n                // The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n                if(this.issuer.isEqual(arguments[0].issuerCertificate.subject) == false)\r\n                    return Promise.resolve(false);\r\n            }\r\n\r\n            // #region In case if there is only public key during verification \r\n            if(\"publicKeyInfo\" in arguments[0])\r\n                subjectPublicKeyInfo = arguments[0].publicKeyInfo; // Must be of type \"org.pkijs.simpl.PUBLIC_KEY_INFO\"\r\n            // #endregion \r\n        }\r\n\r\n        if((subjectPublicKeyInfo instanceof in_window.org.pkijs.simpl.PUBLIC_KEY_INFO) === false)\r\n            return Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n        // #endregion \r\n\r\n        // #region Check the CRL for unknown critical extensions \r\n        if(\"crlExtensions\" in this)\r\n        {\r\n            for(var i = 0; i < this.crlExtensions.length; i++)\r\n            {\r\n                if(this.crlExtensions[i].critical)\r\n                {\r\n                    // We can not be sure that unknown extension has no value for CRL signature\r\n                    if((\"parsedValue\" in this.crlExtensions[i]) == false)\r\n                        return Promise.resolve(false);\r\n                }\r\n            }\r\n        }\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Find signer's hashing algorithm \r\n        var sha_algorithm = in_window.org.pkijs.getHashAlgorithm(this.signatureAlgorithm);\r\n        if(sha_algorithm === \"\")\r\n            return Promise.reject(\"Unsupported signature algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n        // #endregion \r\n\r\n        // #region Import public key \r\n        sequence = sequence.then(\r\n            function()\r\n            {\r\n                // #region Get information about public key algorithm and default parameters for import\r\n                var algorithmObject = in_window.org.pkijs.getAlgorithmByOID(_this.signature.algorithm_id);\r\n                if((\"name\" in algorithmObject) === \"\")\r\n                    return Promise.reject(\"Unsupported public key algorithm: \" + _this.signature.algorithm_id);\r\n\r\n                var algorithm_name = algorithmObject.name;\r\n\r\n                var algorithm = in_window.org.pkijs.getAlgorithmParameters(algorithm_name, \"importkey\");\r\n                if(\"hash\" in algorithm.algorithm)\r\n                    algorithm.algorithm.hash.name = sha_algorithm;\r\n\r\n                // #region Special case for ECDSA \r\n                if(algorithm_name === \"ECDSA\")\r\n                {\r\n                    // #region Get information about named curve \r\n                    if((subjectPublicKeyInfo.algorithm.algorithm_params instanceof in_window.org.pkijs.asn1.OID) === false)\r\n                        return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\r\n                    var curveObject = in_window.org.pkijs.getAlgorithmByOID(subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                    if((\"name\" in curveObject) === false)\r\n                        return Promise.reject(\"Unsupported named curve algorithm: \" + subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                    // #endregion \r\n\r\n                    algorithm.algorithm.namedCurve = curveObject.name;\r\n                }\r\n                // #endregion \r\n                // #endregion \r\n\r\n                var publicKeyInfo_schema = subjectPublicKeyInfo.toSchema();\r\n                var publicKeyInfo_buffer = publicKeyInfo_schema.toBER(false);\r\n                var publicKeyInfo_view = new Uint8Array(publicKeyInfo_buffer);\r\n\r\n                return crypto.importKey(\"spki\",\r\n                    publicKeyInfo_view,\r\n                    algorithm.algorithm,\r\n                    true,\r\n                    algorithm.usages);\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        // #region Verify signature for the certificate \r\n        sequence = sequence.then(\r\n            function(publicKey)\r\n            {\r\n                // #region Get default algorithm parameters for verification \r\n                var algorithm = in_window.org.pkijs.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n                if(\"hash\" in algorithm.algorithm)\r\n                    algorithm.algorithm.hash.name = sha_algorithm;\r\n                // #endregion \r\n\r\n                // #region Special case for ECDSA signatures \r\n                var signature_value = signature.value_block.value_hex;\r\n\r\n                if(publicKey.algorithm.name === \"ECDSA\")\r\n                {\r\n                    var asn1 = in_window.org.pkijs.fromBER(signature_value);\r\n                    signature_value = in_window.org.pkijs.createECDSASignatureFromCMS(asn1.result);\r\n                }\r\n                // #endregion \r\n\r\n                // #region Special case for RSA-PSS \r\n                if(publicKey.algorithm.name === \"RSA-PSS\")\r\n                {\r\n                    var pssParameters;\r\n\r\n                    try\r\n                    {\r\n                        pssParameters = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params({ schema: _this.signatureAlgorithm.algorithm_params });\r\n                    }\r\n                    catch(ex)\r\n                    {\r\n                        return Promise.reject(ex);\r\n                    }\r\n\r\n                    if(\"saltLength\" in pssParameters)\r\n                        algorithm.algorithm.saltLength = pssParameters.saltLength;\r\n                    else\r\n                        algorithm.algorithm.saltLength = 20;\r\n\r\n                    var hash_algo = \"SHA-1\";\r\n\r\n                    if(\"hashAlgorithm\" in pssParameters)\r\n                    {\r\n                        var hashAlgorithm = in_window.org.pkijs.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithm_id);\r\n                        if((\"name\" in hashAlgorithm) === false)\r\n                            return Promise.reject(\"Unrecognized hash algorithm: \" + pssParameters.hashAlgorithm.algorithm_id);\r\n\r\n                        hash_algo = hashAlgorithm.name;\r\n                    }\r\n\r\n                    algorithm.algorithm.hash.name = hash_algo;\r\n                }\r\n                // #endregion \r\n\r\n                return crypto.verify(algorithm.algorithm,\r\n                    publicKey,\r\n                    new Uint8Array(signature_value),\r\n                    new Uint8Array(tbs));\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        return sequence;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.sign =\r\n    function(privateKey, hashAlgorithm)\r\n    {\r\n        /// <param name=\"privateKey\" type=\"Key\">Private key for \"subjectPublicKeyInfo\" structure</param>\r\n        /// <param name=\"hashAlgorithm\" type=\"String\" optional=\"true\">Hashing algorithm. Default SHA-1</param>\r\n\r\n        // #region Initial variables \r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Get a private key from function parameter \r\n        if(typeof privateKey === \"undefined\")\r\n            return Promise.reject(\"Need to provide a private key for signing\");\r\n        // #endregion \r\n\r\n        // #region Get hashing algorithm \r\n        if(typeof hashAlgorithm === \"undefined\")\r\n            hashAlgorithm = \"SHA-1\";\r\n        else\r\n        {\r\n            // #region Simple check for supported algorithm \r\n            var oid = in_window.org.pkijs.getOIDByAlgorithm({ name: hashAlgorithm });\r\n            if(oid === \"\")\r\n                return Promise.reject(\"Unsupported hash algorithm: \" + hashAlgorithm);\r\n            // #endregion \r\n        }\r\n        // #endregion \r\n\r\n        // #region Get a \"default parameters\" for current algorithm \r\n        var defParams = in_window.org.pkijs.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n        defParams.algorithm.hash.name = hashAlgorithm;\r\n        // #endregion \r\n\r\n        // #region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\" \r\n        switch(privateKey.algorithm.name.toUpperCase())\r\n        {\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n            case \"ECDSA\":\r\n                _this.signature.algorithm_id = in_window.org.pkijs.getOIDByAlgorithm(defParams.algorithm);\r\n                _this.signatureAlgorithm.algorithm_id = _this.signature.algorithm_id;\r\n                break;\r\n            case \"RSA-PSS\":\r\n                {\r\n                    // #region Set \"saltLength\" as a length (in octets) of hash function result \r\n                    switch(hashAlgorithm.toUpperCase())\r\n                    {\r\n                        case \"SHA-256\":\r\n                            defParams.algorithm.saltLength = 32;\r\n                            break;\r\n                        case \"SHA-384\":\r\n                            defParams.algorithm.saltLength = 48;\r\n                            break;\r\n                        case \"SHA-512\":\r\n                            defParams.algorithm.saltLength = 64;\r\n                            break;\r\n                        default:;\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Fill \"RSASSA_PSS_params\" object \r\n                    var paramsObject = {};\r\n\r\n                    if(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n                    {\r\n                        var hashAlgorithmOID = in_window.org.pkijs.getOIDByAlgorithm({ name: hashAlgorithm });\r\n                        if(hashAlgorithmOID === \"\")\r\n                            return Promise.reject(\"Unsupported hash algorithm: \" + hashAlgorithm);\r\n\r\n                        paramsObject.hashAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                            algorithm_id: hashAlgorithmOID,\r\n                            algorithm_params: new in_window.org.pkijs.asn1.NULL()\r\n                        });\r\n\r\n                        paramsObject.maskGenAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                            algorithm_id: \"1.2.840.113549.1.1.8\", // MGF1\r\n                            algorithm_params: paramsObject.hashAlgorithm.toSchema()\r\n                        })\r\n                    }\r\n\r\n                    if(defParams.algorithm.saltLength !== 20)\r\n                        paramsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n                    var pssParameters = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params(paramsObject);\r\n                    // #endregion   \r\n\r\n                    // #region Automatically set signature algorithm \r\n                    _this.signature = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                        algorithm_id: \"1.2.840.113549.1.1.10\",\r\n                        algorithm_params: pssParameters.toSchema()\r\n                    });\r\n                    _this.signatureAlgorithm = _this.signature; // Must be the same\r\n                    // #endregion \r\n                }\r\n                break;\r\n            default:\r\n                return Promise.reject(\"Unsupported signature algorithm: \" + privateKey.algorithm.name);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Create TBS data for signing \r\n        _this.tbs = in_window.org.pkijs.simpl.CRL.prototype.encodeTBS.call(this).toBER(false);\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Signing TBS data on provided private key \r\n        return crypto.sign(\r\n            defParams.algorithm,\r\n            privateKey,\r\n            new Uint8Array(_this.tbs)).\r\n            then(\r\n            function(result)\r\n            {\r\n                // #region Special case for ECDSA algorithm \r\n                if(defParams.algorithm.name === \"ECDSA\")\r\n                    result = in_window.org.pkijs.createCMSECDSASignature(result);\r\n                // #endregion \r\n\r\n                _this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING({ value_hex: result });\r\n            },\r\n            function(error)\r\n            {\r\n                return Promise.reject(\"Signing error: \" + error);\r\n            }\r\n            );\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.isCertificateRevoked =\r\n    function()\r\n    {\r\n        // #region Get input certificate \r\n        var certificate = {};\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"certificate\" in arguments[0])\r\n                certificate = arguments[0].certificate;\r\n        }\r\n\r\n        if((certificate instanceof in_window.org.pkijs.simpl.CERT) === false)\r\n            return false;\r\n        // #endregion \r\n\r\n        // #region Check that issuer of the input certificate is the same with issuer of this CRL \r\n        if(this.issuer.isEqual(certificate.issuer) === false)\r\n            return false;\r\n        // #endregion \r\n\r\n        // #region Check that there are revoked certificates in this CRL \r\n        if((\"revokedCertificates\" in this) === false)\r\n            return false;\r\n        // #endregion \r\n\r\n        // #region Search for input certificate in revoked certificates array \r\n        for(var i = 0; i < this.revokedCertificates.length; i++)\r\n        {\r\n            if(this.revokedCertificates[i].userCertificate.isEqual(certificate.serialNumber))\r\n                return true;\r\n        }\r\n        // #endregion \r\n\r\n        return false;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CRL.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            tbs: in_window.org.pkijs.bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n            signature: this.signature.toJSON(),\r\n            issuer: this.issuer.toJSON(),\r\n            thisUpdate: this.thisUpdate.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON()\r\n        };\r\n\r\n        if(\"version\" in this)\r\n            _object.version = this.version;\r\n\r\n        if(\"nextUpdate\" in this)\r\n            _object.nextUpdate = this.nextUpdate.toJSON();\r\n\r\n        if(\"revokedCertificates\" in this)\r\n        {\r\n            _object.revokedCertificates = new Array();\r\n\r\n            for(var i = 0; i < this.revokedCertificates.length; i++)\r\n                _object.revokedCertificates.push(this.revokedCertificates[i].toJSON());\r\n        }\r\n\r\n        if(\"crlExtensions\" in this)\r\n        {\r\n            _object.crlExtensions = new Array();\r\n\r\n            for(var i = 0; i < this.crlExtensions.length; i++)\r\n                _object.crlExtensions.push(this.crlExtensions[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for \"Attribute\" type\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTRIBUTE =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.type = \"\";\r\n        this.values = new Array();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.ATTRIBUTE.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.type = arguments[0].type || \"\";\r\n                this.values = arguments[0].values || new Array();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTRIBUTE.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.ATTRIBUTE({\r\n                names: {\r\n                    type: \"type\",\r\n                    values: \"values\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for ATTRIBUTE\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.type = asn1.result[\"type\"].value_block.toString();\r\n        this.values = asn1.result[\"values\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTRIBUTE.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                new in_window.org.pkijs.asn1.OID({ value: this.type }),\r\n                new in_window.org.pkijs.asn1.SET({\r\n                    value: this.values\r\n                })\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.ATTRIBUTE.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            type: this.type,\r\n            values: new Array()\r\n        };\r\n\r\n        for(var i = 0; i < this.values.length; i++)\r\n            _object.values.push(this.values[i].toJSON());\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for PKCS#10 certificate request\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10 =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.tbs = new ArrayBuffer(0);\r\n\r\n        this.version = 0;\r\n        this.subject = new in_window.org.pkijs.simpl.RDN();\r\n        this.subjectPublicKeyInfo = new in_window.org.pkijs.simpl.PUBLIC_KEY_INFO();\r\n        // OPTIONAL this.attributes = new Array(); // Array of simpl.ATTRIBUTE objects\r\n\r\n        this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER(); // Signature algorithm from certificate major part\r\n        this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING();\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.PKCS10.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.tbs = arguments[0].tbs || new ArrayBuffer(0);\r\n\r\n                this.version = arguments[0].version || 0;\r\n                this.subject = arguments[0].subject || new in_window.org.pkijs.simpl.RDN();\r\n                this.subjectPublicKeyInfo = arguments[0].subjectPublicKeyInfo || new in_window.org.pkijs.simpl.PUBLIC_KEY_INFO();\r\n\r\n                if(\"attributes\" in arguments[0])\r\n                    this.attributes = arguments[0].attributes;\r\n\r\n                this.signatureAlgorithm = arguments[0].signatureAlgorithm || new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER(); // Signature algorithm from certificate major part\r\n                this.signatureValue = arguments[0].signatureValue || new in_window.org.pkijs.asn1.BITSTRING();\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.PKCS10()\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PKCS10\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.tbs = asn1.result[\"CertificationRequestInfo\"].value_before_decode;\r\n\r\n        this.version = asn1.result[\"CertificationRequestInfo.version\"].value_block.value_dec;\r\n        this.subject = new in_window.org.pkijs.simpl.RDN({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n        this.subjectPublicKeyInfo = new in_window.org.pkijs.simpl.PUBLIC_KEY_INFO({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n        if(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n        {\r\n            this.attributes = new Array();\r\n\r\n            var attrs = asn1.result[\"CertificationRequestInfo.attributes\"];\r\n            for(var i = 0; i < attrs.length; i++)\r\n                this.attributes.push(new in_window.org.pkijs.simpl.ATTRIBUTE({ schema: attrs[i] }));\r\n        }\r\n\r\n        this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"signatureAlgorithm\"] });\r\n        this.signatureValue = asn1.result[\"signatureValue\"];\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10.prototype.encodeTBS =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.INTEGER({ value: this.version }));\r\n        output_array.push(this.subject.toSchema());\r\n        output_array.push(this.subjectPublicKeyInfo.toSchema());\r\n\r\n        if(\"attributes\" in this)\r\n        {\r\n            var attributes = new Array();\r\n\r\n            for(var i = 0; i < this.attributes.length; i++)\r\n                attributes.push(this.attributes[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: attributes\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({ value: output_array }));\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10.prototype.toSchema =\r\n    function(encodeFlag)\r\n    {\r\n        /// <param name=\"encodeFlag\" type=\"Boolean\">If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.</param>\r\n\r\n        // #region Check \"encodeFlag\" \r\n        if(typeof encodeFlag === \"undefined\")\r\n            encodeFlag = false;\r\n        // #endregion \r\n\r\n        // #region Decode stored TBS value \r\n        var tbs_schema;\r\n\r\n        if(encodeFlag === false)\r\n        {\r\n            if(this.tbs.length === 0) // No stored TBS part\r\n                return in_window.org.pkijs.schema.PKCS10();\r\n\r\n            tbs_schema = in_window.org.pkijs.fromBER(this.tbs).result;\r\n        }\r\n            // #endregion \r\n            // #region Create TBS schema via assembling from TBS parts \r\n        else\r\n            tbs_schema = in_window.org.pkijs.simpl.PKCS10.prototype.encodeTBS.call(this);\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: [\r\n                tbs_schema,\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10.prototype.verify =\r\n    function()\r\n    {\r\n        /// <summary>!!! Works well in Chrome dev versions only (April 2014th) !!!</summary>\r\n        /// <returns type=\"Promise\">Returns a new Promise object (in case of error), or a result of \"crypto.subtle.veryfy\" function</returns>\r\n\r\n        // #region Global variables \r\n        var _this = this;\r\n        var sha_algorithm = \"\";\r\n\r\n        var sequence = Promise.resolve();\r\n\r\n        var subjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n        var signature = this.signatureValue;\r\n        var tbs = this.tbs;\r\n\r\n        var ecdsaKeySize = 0;\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Find a correct hashing algorithm \r\n        sha_algorithm = in_window.org.pkijs.getHashAlgorithm(this.signatureAlgorithm);\r\n        if(sha_algorithm === \"\")\r\n            return Promise.reject(\"Unsupported signature algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n        // #endregion \r\n\r\n        // #region Importing public key \r\n        sequence = sequence.then(\r\n            function()\r\n            {\r\n                // #region Get information about public key algorithm and default parameters for import\r\n                var algorithmObject = in_window.org.pkijs.getAlgorithmByOID(_this.signatureAlgorithm.algorithm_id);\r\n                if((\"name\" in algorithmObject) === false)\r\n                    return Promise.reject(\"Unsupported public key algorithm: \" + _this.signatureAlgorithm.algorithm_id);\r\n\r\n                var algorithm_name = algorithmObject.name;\r\n\r\n                var algorithm = in_window.org.pkijs.getAlgorithmParameters(algorithm_name, \"importkey\");\r\n                if(\"hash\" in algorithm.algorithm)\r\n                    algorithm.algorithm.hash.name = sha_algorithm;\r\n\r\n                // #region Special case for ECDSA \r\n                if(algorithm_name === \"ECDSA\")\r\n                {\r\n                    // #region Get information about named curve \r\n                    if((subjectPublicKeyInfo.algorithm.algorithm_params instanceof in_window.org.pkijs.asn1.OID) === false)\r\n                        return Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\r\n                    var curveObject = in_window.org.pkijs.getAlgorithmByOID(subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                    if((\"name\" in curveObject) === false)\r\n                        return Promise.reject(\"Unsupported named curve algorithm: \" + subjectPublicKeyInfo.algorithm.algorithm_params.value_block.toString());\r\n                    // #endregion \r\n\r\n                    algorithm.algorithm.namedCurve = curveObject.name;\r\n                }\r\n                // #endregion \r\n                // #endregion \r\n\r\n                var publicKeyInfo_schema = subjectPublicKeyInfo.toSchema();\r\n                var publicKeyInfo_buffer = publicKeyInfo_schema.toBER(false);\r\n                var publicKeyInfo_view = new Uint8Array(publicKeyInfo_buffer);\r\n\r\n                return crypto.importKey(\"spki\", publicKeyInfo_view, algorithm.algorithm, true, algorithm.usages);\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        // #region Verify signature  \r\n        sequence = sequence.then(\r\n            function(publicKey)\r\n            {\r\n                // #region Get default algorithm parameters for verification \r\n                var algorithm = in_window.org.pkijs.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n                if(\"hash\" in algorithm.algorithm)\r\n                    algorithm.algorithm.hash.name = sha_algorithm;\r\n                // #endregion \r\n\r\n                // #region Special case for ECDSA signatures \r\n                var signature_value = signature.value_block.value_hex;\r\n\r\n                if(publicKey.algorithm.name === \"ECDSA\")\r\n                {\r\n                    var asn1 = in_window.org.pkijs.fromBER(signature_value);\r\n                    signature_value = in_window.org.pkijs.createECDSASignatureFromCMS(asn1.result);\r\n                }\r\n                // #endregion \r\n\r\n                // #region Special case for RSA-PSS \r\n                if(publicKey.algorithm.name === \"RSA-PSS\")\r\n                {\r\n                    var pssParameters;\r\n\r\n                    try\r\n                    {\r\n                        pssParameters = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params({ schema: _this.signatureAlgorithm.algorithm_params });\r\n                    }\r\n                    catch(ex)\r\n                    {\r\n                        return Promise.reject(ex);\r\n                    }\r\n\r\n                    if(\"saltLength\" in pssParameters)\r\n                        algorithm.algorithm.saltLength = pssParameters.saltLength;\r\n                    else\r\n                        algorithm.algorithm.saltLength = 20;\r\n\r\n                    var hash_algo = \"SHA-1\";\r\n\r\n                    if(\"hashAlgorithm\" in pssParameters)\r\n                    {\r\n                        var hashAlgorithm = in_window.org.pkijs.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithm_id);\r\n                        if((\"name\" in hashAlgorithm) === false)\r\n                            return Promise.reject(\"Unrecognized hash algorithm: \" + pssParameters.hashAlgorithm.algorithm_id);\r\n\r\n                        hash_algo = hashAlgorithm.name;\r\n                    }\r\n\r\n                    algorithm.algorithm.hash.name = hash_algo;\r\n                }\r\n                // #endregion \r\n\r\n                return crypto.verify(algorithm.algorithm,\r\n                    publicKey,\r\n                    new Uint8Array(signature_value),\r\n                    new Uint8Array(tbs));\r\n            }\r\n            );\r\n        // #endregion   \r\n\r\n        return sequence;\r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10.prototype.sign =\r\n    function(privateKey, hashAlgorithm)\r\n    {\r\n        /// <param name=\"privateKey\" type=\"Key\">Private key for \"subjectPublicKeyInfo\" structure</param>\r\n        /// <param name=\"hashAlgorithm\" type=\"String\" optional=\"true\">Hashing algorithm. Default SHA-1</param>\r\n\r\n        // #region Initial variables \r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Get a private key from function parameter \r\n        if(typeof privateKey === \"undefined\")\r\n            return Promise.reject(\"Need to provide a private key for signing\");\r\n        // #endregion \r\n\r\n        // #region Get hashing algorithm \r\n        if(typeof hashAlgorithm === \"undefined\")\r\n            hashAlgorithm = \"SHA-1\";\r\n        else\r\n        {\r\n            // #region Simple check for supported algorithm \r\n            var oid = in_window.org.pkijs.getOIDByAlgorithm({ name: hashAlgorithm });\r\n            if(oid === \"\")\r\n                return Promise.reject(\"Unsupported hash algorithm: \" + hashAlgorithm);\r\n            // #endregion \r\n        }\r\n        // #endregion \r\n\r\n        // #region Get a \"default parameters\" for current algorithm \r\n        var defParams = in_window.org.pkijs.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n        defParams.algorithm.hash.name = hashAlgorithm;\r\n        // #endregion \r\n\r\n        // #region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\" \r\n        switch(privateKey.algorithm.name.toUpperCase())\r\n        {\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n            case \"ECDSA\":\r\n                _this.signatureAlgorithm.algorithm_id = in_window.org.pkijs.getOIDByAlgorithm(defParams.algorithm);\r\n                break;\r\n            case \"RSA-PSS\":\r\n                {\r\n                    // #region Set \"saltLength\" as a length (in octets) of hash function result \r\n                    switch(hashAlgorithm.toUpperCase())\r\n                    {\r\n                        case \"SHA-256\":\r\n                            defParams.algorithm.saltLength = 32;\r\n                            break;\r\n                        case \"SHA-384\":\r\n                            defParams.algorithm.saltLength = 48;\r\n                            break;\r\n                        case \"SHA-512\":\r\n                            defParams.algorithm.saltLength = 64;\r\n                            break;\r\n                        default:;\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Fill \"RSASSA_PSS_params\" object \r\n                    var paramsObject = {};\r\n\r\n                    if(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n                    {\r\n                        var hashAlgorithmOID = in_window.org.pkijs.getOIDByAlgorithm({ name: hashAlgorithm });\r\n                        if(hashAlgorithmOID === \"\")\r\n                            return Promise.reject(\"Unsupported hash algorithm: \" + hashAlgorithm);\r\n\r\n                        paramsObject.hashAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                            algorithm_id: hashAlgorithmOID,\r\n                            algorithm_params: new in_window.org.pkijs.asn1.NULL()\r\n                        });\r\n\r\n                        paramsObject.maskGenAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                            algorithm_id: \"1.2.840.113549.1.1.8\", // MGF1\r\n                            algorithm_params: paramsObject.hashAlgorithm.toSchema()\r\n                        })\r\n                    }\r\n\r\n                    if(defParams.algorithm.saltLength !== 20)\r\n                        paramsObject.saltLength = defParams.algorithm.saltLength;\r\n\r\n                    var pssParameters = new in_window.org.pkijs.simpl.x509.RSASSA_PSS_params(paramsObject);\r\n                    // #endregion   \r\n\r\n                    // #region Automatically set signature algorithm \r\n                    _this.signatureAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({\r\n                        algorithm_id: \"1.2.840.113549.1.1.10\",\r\n                        algorithm_params: pssParameters.toSchema()\r\n                    });\r\n                    // #endregion \r\n                }\r\n                break;\r\n            default:\r\n                return Promise.reject(\"Unsupported signature algorithm: \" + privateKey.algorithm.name);\r\n        }\r\n        // #endregion \r\n\r\n        // #region Create TBS data for signing \r\n        _this.tbs = in_window.org.pkijs.simpl.PKCS10.prototype.encodeTBS.call(this).toBER(false);\r\n        // #endregion \r\n\r\n        // #region Get a \"crypto\" extension \r\n        var crypto = in_window.org.pkijs.getCrypto();\r\n        if(typeof crypto == \"undefined\")\r\n            return Promise.reject(\"Unable to create WebCrypto object\");\r\n        // #endregion \r\n\r\n        // #region Signing TBS data on provided private key \r\n        return crypto.sign(defParams.algorithm,\r\n            privateKey,\r\n            new Uint8Array(_this.tbs)).then(\r\n            function(result)\r\n            {\r\n                // #region Special case for ECDSA algorithm \r\n                if(defParams.algorithm.name === \"ECDSA\")\r\n                    result = in_window.org.pkijs.createCMSECDSASignature(result);\r\n                // #endregion \r\n\r\n                _this.signatureValue = new in_window.org.pkijs.asn1.BITSTRING({ value_hex: result });\r\n            },\r\n            function(error)\r\n            {\r\n                return Promise.reject(\"Signing error: \" + error);\r\n            }\r\n            );\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS10.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            tbs: in_window.org.pkijs.bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n            version: this.version,\r\n            subject: this.subject.toJSON(),\r\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON()\r\n        };\r\n\r\n        if(\"attributes\" in this)\r\n        {\r\n            _object.attributes = new Array();\r\n\r\n            for(var i = 0; i < this.attributes.length; i++)\r\n                _object.attributes.push(this.attributes[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for PKCS#8 private key bag\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS8 =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        this.version = 0;\r\n        this.privateKeyAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n        this.privateKey = new in_window.org.pkijs.asn1.OCTETSTRING();\r\n        // OPTIONAL this.attributes // Array of \"in_window.org.pkijs.simpl.ATTRIBUTE\"\r\n        // #endregion \r\n\r\n        // #region If input argument array contains \"schema\" for this object \r\n        if((arguments[0] instanceof Object) && (\"schema\" in arguments[0]))\r\n            in_window.org.pkijs.simpl.PKCS8.prototype.fromSchema.call(this, arguments[0].schema);\r\n            // #endregion \r\n            // #region If input argument array contains \"native\" values for internal properties \r\n        else\r\n        {\r\n            if(arguments[0] instanceof Object)\r\n            {\r\n                this.version = arguments[0].version || 0;\r\n                this.privateKeyAlgorithm = arguments[0].privateKeyAlgorithm || new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER();\r\n                this.privateKey = arguments[0].privateKey || new in_window.org.pkijs.asn1.OCTETSTRING();\r\n\r\n                if(\"attributes\" in arguments[0])\r\n                    this.attributes = arguments[0].attributes;\r\n            }\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS8.prototype.fromSchema =\r\n    function(schema)\r\n    {\r\n        // #region Check the schema is valid \r\n        var asn1 = in_window.org.pkijs.compareSchema(schema,\r\n            schema,\r\n            in_window.org.pkijs.schema.PKCS8({\r\n                names: {\r\n                    version: \"version\",\r\n                    privateKeyAlgorithm: {\r\n                        names: {\r\n                            block_name: \"privateKeyAlgorithm\"\r\n                        }\r\n                    },\r\n                    privateKey: \"privateKey\",\r\n                    attributes: \"attributes\"\r\n                }\r\n            })\r\n            );\r\n\r\n        if(asn1.verified === false)\r\n            throw new Error(\"Object's schema was not verified against input data for PKCS8\");\r\n        // #endregion \r\n\r\n        // #region Get internal properties from parsed schema \r\n        this.version = asn1.result[\"version\"].value_block.value_dec;\r\n        this.privateKeyAlgorithm = new in_window.org.pkijs.simpl.ALGORITHM_IDENTIFIER({ schema: asn1.result[\"privateKeyAlgorithm\"] });\r\n        this.privateKey = asn1.result[\"privateKey\"];\r\n\r\n        if(\"attributes\" in asn1.result)\r\n        {\r\n            this.attributes = new Array();\r\n            var attrs = asn1.result[\"attributes\"];\r\n\r\n            for(var i = 0; i < attrs.length; i++)\r\n                this.attributes.push(new in_window.org.pkijs.simpl.ATTRIBUTE({ schema: attrs[i] }));\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS8.prototype.toSchema =\r\n    function()\r\n    {\r\n        // #region Create array for output sequence \r\n        var output_array = new Array();\r\n\r\n        output_array.push(new in_window.org.pkijs.asn1.INTEGER({ value: this.version }));\r\n        output_array.push(this.privateKeyAlgorithm.toSchema());\r\n        output_array.push(this.privateKey);\r\n\r\n        if(\"attributes\" in this)\r\n        {\r\n            var attrs = new Array();\r\n\r\n            for(var i = 0; i < this.attributes.length; i++)\r\n                attrs.push(this.attributes[i].toSchema());\r\n\r\n            output_array.push(new in_window.org.pkijs.asn1.ASN1_CONSTRUCTED({\r\n                optional: true,\r\n                id_block: {\r\n                    tag_class: 3, // CONTEXT-SPECIFIC\r\n                    tag_number: 0 // [0]\r\n                },\r\n                value: attrs\r\n            }));\r\n        }\r\n        // #endregion \r\n\r\n        // #region Construct and return new ASN.1 schema for this object \r\n        return (new in_window.org.pkijs.asn1.SEQUENCE({\r\n            value: output_array\r\n        }));\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.PKCS8.prototype.toJSON =\r\n    function()\r\n    {\r\n        var _object = {\r\n            version: this.version,\r\n            privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n            privateKey: this.privateKey.toJSON()\r\n        };\r\n\r\n        if(\"attributes\" in this)\r\n        {\r\n            _object.attributes = new Array();\r\n\r\n            for(var i = 0; i < this.attributes.length; i++)\r\n                _object.attributes.push(this.attributes[i].toJSON());\r\n        }\r\n\r\n        return _object;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n    // #region Simplified structure for working with X.509 certificate chains \r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT_CHAIN =\r\n    function()\r\n    {\r\n        // #region Internal properties of the object \r\n        /// <field name=\"trusted_certs\" type=\"Array\" elementType=\"in_window.org.pkijs.simpl.CERT\">Array of pre-defined trusted (by user) certificates</field>\r\n        this.trusted_certs = new Array();\r\n        /// <field name=\"certs\" type=\"Array\" elementType=\"in_window.org.pkijs.simpl.CERT\">Array with certificate chain. Could be only one end-user certificate in there!</field>\r\n        this.certs = new Array();\r\n        /// <field name=\"crls\" type=\"Array\" elementType=\"in_window.org.pkijs.simpl.CRL\">Array of all CRLs for all certificates from certificate chain</field>\r\n        this.crls = new Array();\r\n        // #endregion \r\n\r\n        // #region Initialize internal properties by input values\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            this.trusted_certs = arguments[0].trusted_certs || new Array();\r\n            this.certs = arguments[0].certs || new Array();\r\n            this.crls = arguments[0].crls || new Array();\r\n        }\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT_CHAIN.prototype.sort =\r\n    function()\r\n    {\r\n        // #region Initial variables \r\n        /// <var type=\"Array\" elementType=\"in_window.org.pkijs.simpl.CERT\">Array of sorted certificates</var>\r\n        var sorted_certs = new Array();\r\n\r\n        /// <var type=\"Array\" elementType=\"in_window.org.pkijs.simpl.CERT\">Initial array of certificates</var>\r\n        var certs = this.certs.slice(0); // Explicity copy \"this.certs\"\r\n\r\n        /// <var type=\"Date\">Date for checking certificate validity period</var>\r\n        var check_date = new Date();\r\n\r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Initial checks \r\n        if(certs.length === 0)\r\n            return new Promise(function(resolve, reject)\r\n            {\r\n                reject({\r\n                    result: false,\r\n                    result_code: 2,\r\n                    result_message: \"Certificate's array can not be empty\"\r\n                });\r\n            });\r\n        // #endregion \r\n\r\n        // #region Find end-user certificate \r\n        var end_user_index = -1;\r\n\r\n        for(var i = 0; i < certs.length; i++)\r\n        {\r\n            var isCA = false;\r\n\r\n            if(\"extensions\" in certs[i])\r\n            {\r\n                var mustBeCA = false;\r\n                var keyUsagePresent = false;\r\n                var cRLSign = false;\r\n\r\n                for(var j = 0; j < certs[i].extensions.length; j++)\r\n                {\r\n                    if((certs[i].extensions[j].critical === true) &&\r\n                       ((\"parsedValue\" in certs[i].extensions[j]) === false))\r\n                    {\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject({\r\n                                result: false,\r\n                                result_code: 6,\r\n                                result_message: \"Unable to parse critical certificate extension: \" + certs[i].extensions[j].extnID\r\n                            });\r\n                        });\r\n                    }\r\n\r\n                    if(certs[i].extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n                    {\r\n                        keyUsagePresent = true;\r\n\r\n                        var view = new Uint8Array(certs[i].extensions[j].parsedValue.value_block.value_hex);\r\n\r\n                        if((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n                            mustBeCA = true;\r\n\r\n                        if((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n                            cRLSign = true;\r\n                    }\r\n\r\n                    if(certs[i].extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n                    {\r\n                        if(\"cA\" in certs[i].extensions[j].parsedValue)\r\n                        {\r\n                            if(certs[i].extensions[j].parsedValue.cA === true)\r\n                                isCA = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if((mustBeCA === true) && (isCA === false))\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject({\r\n                            result: false,\r\n                            result_code: 3,\r\n                            result_message: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n                        });\r\n                    });\r\n\r\n                if((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject({\r\n                            result: false,\r\n                            result_code: 4,\r\n                            result_message: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n                        });\r\n                    });\r\n\r\n                if((isCA === true) && (keyUsagePresent === true) && (cRLSign === false))\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject({\r\n                            result: false,\r\n                            result_code: 5,\r\n                            result_message: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n                        });\r\n                    });\r\n            }\r\n\r\n            if(isCA === false)\r\n            {\r\n                if(sorted_certs.length !== 0)\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject({\r\n                            result: false,\r\n                            result_code: 7,\r\n                            result_message: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n                        });\r\n                    });\r\n\r\n                sorted_certs.push(certs[i]);\r\n                end_user_index = i;\r\n            }\r\n        }\r\n\r\n        certs.splice(end_user_index, 1);\r\n        // #endregion \r\n\r\n        // #region Check that end-user certificate was found \r\n        if(sorted_certs.length === 0)\r\n            return new Promise(function(resolve, reject)\r\n            {\r\n                reject({\r\n                    result: false,\r\n                    result_code: 1,\r\n                    result_message: \"Can't find end-user certificate\"\r\n                });\r\n            });\r\n        // #endregion \r\n\r\n        // #region Return if there is only one certificate in certificate's array \r\n        if(certs.length === 0)\r\n        {\r\n            if(sorted_certs[0].issuer.isEqual(sorted_certs[0].subject) === true)\r\n                return new Promise(function(resolve, reject) { resolve(sorted_certs); });\r\n            else\r\n            {\r\n                if(this.trusted_certs.length === 0)\r\n                {\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject({\r\n                            result: false,\r\n                            result_code: 70,\r\n                            result_message: \"Can't find root certificate\"\r\n                        });\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    certs = _this.trusted_certs.splice(0);\r\n                }\r\n            }\r\n\r\n        }\r\n        // #endregion \r\n\r\n        /// <var type=\"in_window.org.pkijs.simpl.CERT\">Current certificate (to find issuer for)</var>\r\n        var current_certificate = sorted_certs[0];\r\n\r\n        // #region Auxiliary functions working with Promises\r\n        function basic(subject_certificate, issuer_certificate)\r\n        {\r\n            /// <summary>Basic certificate checks</summary>\r\n            /// <param name=\"subject_certificate\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate for testing (subject)</param>\r\n            /// <param name=\"issuer_certificate\" type=\"in_window.org.pkijs.simpl.CERT\">Certificate for issuer of subject certificate</param>\r\n\r\n            // #region Initial variables \r\n            var sequence = Promise.resolve();\r\n            // #endregion \r\n\r\n            // #region Check validity period for subject certificate \r\n            sequence = sequence.then(\r\n                function()\r\n                {\r\n                    if((subject_certificate.notBefore.value > check_date) ||\r\n                       (subject_certificate.notAfter.value < check_date))\r\n                    {\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject({\r\n                                result: false,\r\n                                result_code: 8,\r\n                                result_message: \"Certificate validity period is out of checking date\"\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n                );\r\n            // #endregion \r\n\r\n            // #region Give ability to not provide CRLs (all certificates assume to be valid) \r\n            if(_this.crls.length === 0)\r\n                return sequence.then(\r\n                    function()\r\n                    {\r\n                        return new Promise(function(resolve, reject) { resolve(); });\r\n                    }\r\n                    );\r\n            // #endregion \r\n\r\n            // #region Find correct CRL for \"issuer_certificate\" \r\n            function find_crl(index)\r\n            {\r\n                return _this.crls[index].verify({ issuerCertificate: issuer_certificate }).then(\r\n                    function(result)\r\n                    {\r\n                        if(result === true)\r\n                            return new Promise(function(resolve, reject) { resolve(_this.crls[index]); });\r\n                        else\r\n                        {\r\n                            index++;\r\n\r\n                            if(index < _this.crls.length)\r\n                                return find_crl(index);\r\n                            else\r\n                                return new Promise(function(resolve, reject)\r\n                                {\r\n                                    reject({\r\n                                        result: false,\r\n                                        result_code: 9,\r\n                                        result_message: \"Unable to find CRL for issuer's certificate\"\r\n                                    });\r\n                                });\r\n                        }\r\n                    },\r\n                    function(error)\r\n                    {\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject({\r\n                                result: false,\r\n                                result_code: 10,\r\n                                result_message: \"Unable to find CRL for issuer's certificate\"\r\n                            });\r\n                        });\r\n                    }\r\n                    );\r\n            }\r\n\r\n            sequence = sequence.then(\r\n                function()\r\n                {\r\n                    return find_crl(0);\r\n                }\r\n                );\r\n            // #endregion \r\n\r\n            // #region Check that subject certificate is not in the CRL \r\n            sequence = sequence.then(\r\n                function(crl)\r\n                {\r\n                    /// <param name=\"crl\" type=\"in_window.org.pkijs.simpl.CRL\">CRL for issuer's certificate</param>                \r\n\r\n                    if(crl.isCertificateRevoked({ certificate: subject_certificate }) === true)\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject({\r\n                                result: false,\r\n                                result_code: 11,\r\n                                result_message: \"Subject certificate was revoked\"\r\n                            });\r\n                        });\r\n                    else\r\n                        return new Promise(function(resolve, reject) { resolve(); });\r\n                },\r\n                function(error)\r\n                {\r\n                    /// <summary>Not for all certificates we have a CRL. So, this \"stub\" is for handling such situation - assiming we have a valid, non-revoked certificate</summary>\r\n                    return new Promise(function(resolve, reject) { resolve(); });\r\n                }\r\n                );\r\n            // #endregion \r\n\r\n            return sequence;\r\n        }\r\n\r\n        function outer()\r\n        {\r\n            return inner(current_certificate, 0).then(\r\n                function(index)\r\n                {\r\n                    sorted_certs.push(certs[index]);\r\n                    current_certificate = certs[index];\r\n\r\n                    certs.splice(index, 1);\r\n\r\n                    if(current_certificate.issuer.isEqual(current_certificate.subject) === true)\r\n                    {\r\n                        // #region Check that the \"self-signed\" certificate there is in \"trusted_certs\" array \r\n                        var found = (_this.trusted_certs.length === 0); // If user did not set \"trusted_certs\" then we have an option to trust any self-signed certificate as root\r\n\r\n                        for(var i = 0; i < _this.trusted_certs.length; i++)\r\n                        {\r\n                            if((current_certificate.issuer.isEqual(_this.trusted_certs[i].issuer) === true) &&\r\n                               (current_certificate.subject.isEqual(_this.trusted_certs[i].subject) === true) &&\r\n                               (current_certificate.serialNumber.isEqual(_this.trusted_certs[i].serialNumber) === true))\r\n                            {\r\n                                found = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if(found === false)\r\n                            return new Promise(function(resolve, reject)\r\n                            {\r\n                                reject({\r\n                                    result: false,\r\n                                    result_code: 22,\r\n                                    result_message: \"Self-signed root certificate not in \\\"trusted certificates\\\" array\"\r\n                                });\r\n                            });\r\n                        // #endregion \r\n\r\n                        return (current_certificate.verify()).then( // Verifing last, self-signed certificate\r\n                            function(result)\r\n                            {\r\n                                if(result === true)\r\n                                    return basic(current_certificate, current_certificate).then(\r\n                                        function()\r\n                                        {\r\n                                            return new Promise(function(resolve, reject) { resolve(sorted_certs); });\r\n                                        },\r\n                                        function(error)\r\n                                        {\r\n                                            return new Promise(function(resolve, reject)\r\n                                            {\r\n                                                reject({\r\n                                                    result: false,\r\n                                                    result_code: 12,\r\n                                                    result_message: error\r\n                                                });\r\n                                            });\r\n                                        }\r\n                                        );\r\n                                else\r\n                                    return new Promise(function(resolve, reject)\r\n                                    {\r\n                                        reject({\r\n                                            result: false,\r\n                                            result_code: 13,\r\n                                            result_message: \"Unable to build certificate chain - signature of root certificate is invalid\"\r\n                                        });\r\n                                    });\r\n                            },\r\n                            function(error)\r\n                            {\r\n                                return new Promise(function(resolve, reject)\r\n                                {\r\n                                    reject({\r\n                                        result: false,\r\n                                        result_code: 14,\r\n                                        result_message: error\r\n                                    });\r\n                                });\r\n                            }\r\n                            );\r\n                    }\r\n                    else // In case if self-signed cert for the chain in the \"trusted_certs\" array\r\n                    {\r\n                        if(certs.length > 0)\r\n                            return outer();\r\n                        else\r\n                        {\r\n                            if(_this.trusted_certs.length !== 0)\r\n                            {\r\n                                certs = _this.trusted_certs.splice(0);\r\n                                return outer();\r\n                            }\r\n                            else\r\n                                return new Promise(function(resolve, reject)\r\n                                {\r\n                                    reject({\r\n                                        result: false,\r\n                                        result_code: 23,\r\n                                        result_message: \"Root certificate not found\"\r\n                                    });\r\n                                });\r\n                        }\r\n                    }\r\n                },\r\n                function(error)\r\n                {\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject(error);\r\n                    });\r\n                }\r\n                );\r\n        }\r\n\r\n        function inner(current_certificate, index)\r\n        {\r\n            if(certs[index].subject.isEqual(current_certificate.issuer) === true)\r\n            {\r\n                return current_certificate.verify({ issuerCertificate: certs[index] }).then(\r\n                    function(result)\r\n                    {\r\n                        if(result === true)\r\n                        {\r\n                            return basic(current_certificate, certs[index]).then(\r\n                                function()\r\n                                {\r\n                                    return new Promise(function(resolve, reject) { resolve(index); });\r\n                                },\r\n                                function(error)\r\n                                {\r\n                                    return new Promise(function(resolve, reject)\r\n                                    {\r\n                                        reject({\r\n                                            result: false,\r\n                                            result_code: 16,\r\n                                            result_message: error\r\n                                        });\r\n                                    });\r\n                                }\r\n                                );\r\n                        }\r\n                        else\r\n                        {\r\n                            if(index < (certs.length - 1))\r\n                                return inner(current_certificate, index + 1);\r\n                            else\r\n                                return new Promise(function(resolve, reject)\r\n                                {\r\n                                    reject({\r\n                                        result: false,\r\n                                        result_code: 17,\r\n                                        result_message: \"Unable to build certificate chain - incomplete certificate chain or signature of some certificate is invalid\"\r\n                                    });\r\n                                });\r\n                        }\r\n                    },\r\n                    function(error)\r\n                    {\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject({\r\n                                result: false,\r\n                                result_code: 18,\r\n                                result_message: \"Unable to build certificate chain - error during certificate signature verification\"\r\n                            });\r\n                        });\r\n                    }\r\n                    );\r\n            }\r\n            else\r\n            {\r\n                if(index < (certs.length - 1))\r\n                    return inner(current_certificate, index + 1);\r\n                else\r\n                    return new Promise(function(resolve, reject)\r\n                    {\r\n                        reject({\r\n                            result: false,\r\n                            result_code: 19,\r\n                            result_message: \"Unable to build certificate chain - incomplete certificate chain\"\r\n                        });\r\n                    });\r\n            }\r\n        }\r\n        // #endregion   \r\n\r\n        // #region Find certificates for all issuers \r\n        return outer();\r\n        // #endregion \r\n    };\r\n    //**************************************************************************************\r\n    in_window.org.pkijs.simpl.CERT_CHAIN.prototype.verify =\r\n    function()\r\n    {\r\n        // #region Initial checks \r\n        if(this.certs.length === 0)\r\n            return new Promise(function(resolve, reject) { reject(\"Empty certificate array\"); });\r\n        // #endregion \r\n\r\n        // #region Initial variables \r\n        var sequence = Promise.resolve();\r\n\r\n        var _this = this;\r\n        // #endregion \r\n\r\n        // #region Get input variables \r\n        var initial_policy_set = new Array();\r\n        initial_policy_set.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\r\n        var initial_explicit_policy = false;\r\n        var initial_policy_mapping_inhibit = false;\r\n        var initial_inhibit_policy = false;\r\n\r\n        var initial_permitted_subtrees_set = new Array(); // Array of \"simpl.x509.GeneralSubtree\"\r\n        var initial_excluded_subtrees_set = new Array();  // Array of \"simpl.x509.GeneralSubtree\"\r\n        var initial_required_name_forms = new Array();    // Array of \"simpl.x509.GeneralSubtree\"\r\n\r\n        var verification_time = new Date();\r\n\r\n        if(arguments[0] instanceof Object)\r\n        {\r\n            if(\"initial_policy_set\" in arguments[0])\r\n                initial_policy_set = arguments[0].initial_policy_set;\r\n\r\n            if(\"initial_explicit_policy\" in arguments[0])\r\n                initial_explicit_policy = arguments[0].initial_explicit_policy;\r\n\r\n            if(\"initial_policy_mapping_inhibit\" in arguments[0])\r\n                initial_policy_mapping_inhibit = arguments[0].initial_policy_mapping_inhibit;\r\n\r\n            if(\"initial_inhibit_policy\" in arguments[0])\r\n                initial_inhibit_policy = arguments[0].initial_inhibit_policy;\r\n\r\n            if(\"initial_permitted_subtrees_set\" in arguments[0])\r\n                initial_permitted_subtrees_set = arguments[0].initial_permitted_subtrees_set;\r\n\r\n            if(\"initial_excluded_subtrees_set\" in arguments[0])\r\n                initial_excluded_subtrees_set = arguments[0].initial_excluded_subtrees_set;\r\n\r\n            if(\"initial_required_name_forms\" in arguments[0])\r\n                initial_required_name_forms = arguments[0].initial_required_name_forms;\r\n        }\r\n\r\n        var explicit_policy_indicator = initial_explicit_policy;\r\n        var policy_mapping_inhibit_indicator = initial_policy_mapping_inhibit;\r\n        var inhibit_any_policy_indicator = initial_inhibit_policy;\r\n\r\n        var pending_constraints = new Array(3);\r\n        pending_constraints[0] = false; // For \"explicit_policy_pending\"\r\n        pending_constraints[1] = false; // For \"policy_mapping_inhibit_pending\"\r\n        pending_constraints[2] = false; // For \"inhibit_any_policy_pending\"\r\n\r\n        var explicit_policy_pending = 0;\r\n        var policy_mapping_inhibit_pending = 0;\r\n        var inhibit_any_policy_pending = 0;\r\n\r\n        var permitted_subtrees = initial_permitted_subtrees_set;\r\n        var excluded_subtrees = initial_excluded_subtrees_set;\r\n        var required_name_forms = initial_required_name_forms;\r\n\r\n        var path_depth = 1;\r\n        // #endregion \r\n\r\n        // #region Sorting certificates in the chain array \r\n        sequence = (in_window.org.pkijs.simpl.CERT_CHAIN.prototype.sort.call(this)).then(\r\n            function(sorted_certs)\r\n            {\r\n                _this.certs = sorted_certs;\r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        // #region Work with policies\r\n        sequence = sequence.then(\r\n            function()\r\n            {\r\n                // #region Support variables \r\n                var all_policies = new Array(); // Array of all policies (string values)\r\n                all_policies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\r\n                var policies_and_certs = new Array(); // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\r\n                var any_policy_array = new Array(_this.certs.length - 1); // Minus \"trusted anchor\"\r\n                for(var ii = 0; ii < (_this.certs.length - 1) ; ii++)\r\n                    any_policy_array[ii] = true;\r\n\r\n                policies_and_certs.push(any_policy_array);\r\n\r\n                var policy_mappings = new Array(_this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n                var cert_policies = new Array(_this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n                // #endregion \r\n\r\n                for(var i = (_this.certs.length - 2) ; i >= 0 ; i--, path_depth++)\r\n                {\r\n                    if(\"extensions\" in _this.certs[i])\r\n                    {\r\n                        for(var j = 0; j < _this.certs[i].extensions.length; j++)\r\n                        {\r\n                            // #region CertificatePolicies \r\n                            if(_this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n                            {\r\n                                cert_policies[i] = _this.certs[i].extensions[j].parsedValue;\r\n\r\n                                for(var k = 0; k < _this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n                                {\r\n                                    var policy_index = (-1);\r\n\r\n                                    // #region Try to find extension in \"all_policies\" array \r\n                                    for(var s = 0; s < all_policies.length; s++)\r\n                                    {\r\n                                        if(_this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === all_policies[s])\r\n                                        {\r\n                                            policy_index = s;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    // #endregion \r\n\r\n                                    if(policy_index === (-1))\r\n                                    {\r\n                                        all_policies.push(_this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\r\n                                        var cert_array = new Array(_this.certs.length - 1);\r\n                                        cert_array[i] = true;\r\n\r\n                                        policies_and_certs.push(cert_array);\r\n                                    }\r\n                                    else(policies_and_certs[policy_index])[i] = true;\r\n                                }\r\n                            }\r\n                            // #endregion \r\n\r\n                            // #region PolicyMappings \r\n                            if(_this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n                                policy_mappings[i] = _this.certs[i].extensions[j].parsedValue;\r\n                            // #endregion \r\n\r\n                            // #region PolicyConstraints \r\n                            if(_this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n                            {\r\n                                if(explicit_policy_indicator == false)\r\n                                {\r\n                                    // #region requireExplicitPolicy \r\n                                    if(_this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n                                        explicit_policy_indicator = true;\r\n                                    else\r\n                                    {\r\n                                        if(pending_constraints[0] === false)\r\n                                        {\r\n                                            pending_constraints[0] = true;\r\n                                            explicit_policy_pending = _this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            explicit_policy_pending = (explicit_policy_pending > _this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? _this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicit_policy_pending;\r\n                                        }\r\n                                    }\r\n                                    // #endregion \r\n\r\n                                    // #region inhibitPolicyMapping \r\n                                    if(_this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n                                        policy_mapping_inhibit_indicator = true;\r\n                                    else\r\n                                    {\r\n                                        if(pending_constraints[1] === false)\r\n                                        {\r\n                                            pending_constraints[1] = true;\r\n                                            policy_mapping_inhibit_pending = _this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            policy_mapping_inhibit_pending = (policy_mapping_inhibit_pending > _this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? _this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : policy_mapping_inhibit_pending;\r\n                                        }\r\n                                    }\r\n                                    // #endregion   \r\n                                }\r\n                            }\r\n                            // #endregion \r\n\r\n                            // #region InhibitAnyPolicy\r\n                            if(_this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n                            {\r\n                                if(inhibit_any_policy_indicator === false)\r\n                                {\r\n                                    if(_this.certs[i].extensions[j].parsedValue.value_block.value_dec === 0)\r\n                                        inhibit_any_policy_indicator = true;\r\n                                    else\r\n                                    {\r\n                                        if(pending_constraints[2] === false)\r\n                                        {\r\n                                            pending_constraints[2] = true;\r\n                                            inhibit_any_policy_pending = _this.certs[i].extensions[j].parsedValue.value_block.value_dec;\r\n                                        }\r\n                                        else\r\n                                        {\r\n                                            inhibit_any_policy_pending = (inhibit_any_policy_pending > _this.certs[i].extensions[j].parsedValue.value_block.value_dec) ? _this.certs[i].extensions[j].parsedValue.value_block.value_dec : inhibit_any_policy_pending;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            // #endregion \r\n                        }\r\n\r\n                        // #region Check \"inhibit_any_policy_indicator\" \r\n                        if(inhibit_any_policy_indicator === true)\r\n                            delete (policies_and_certs[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n                        // #endregion \r\n\r\n                        // #region Combine information from certificate policies and policy mappings \r\n                        if((typeof cert_policies[i] !== \"undefined\") &&\r\n                           (typeof policy_mappings[i] !== \"undefined\") &&\r\n                           (policy_mapping_inhibit_indicator === false))\r\n                        {\r\n                            for(var m = 0; m < cert_policies[i].certificatePolicies.length; m++)\r\n                            {\r\n                                var domainPolicy = \"\";\r\n\r\n                                // #region Find if current policy is in \"mappings\" array \r\n                                for(var n = 0; n < policy_mappings[i].mappings.length; n++)\r\n                                {\r\n                                    if(policy_mappings[i].mappings[n].subjectDomainPolicy === cert_policies[i].certificatePolicies[m].policyIdentifier)\r\n                                    {\r\n                                        domainPolicy = policy_mappings[i].mappings[n].issuerDomainPolicy;\r\n                                        break;\r\n                                    }\r\n\r\n                                    // #region Could be the case for some reasons \r\n                                    if(policy_mappings[i].mappings[n].issuerDomainPolicy === cert_policies[i].certificatePolicies[m].policyIdentifier)\r\n                                    {\r\n                                        domainPolicy = policy_mappings[i].mappings[n].subjectDomainPolicy;\r\n                                        break;\r\n                                    }\r\n                                    // #endregion \r\n                                }\r\n\r\n                                if(domainPolicy === \"\")\r\n                                    continue;\r\n                                // #endregion\r\n\r\n                                // #region Find the index of \"domainPolicy\"  \r\n                                var domainPolicy_index = (-1);\r\n\r\n                                for(var p = 0; p < all_policies.length; p++)\r\n                                {\r\n                                    if(all_policies[p] === domainPolicy)\r\n                                    {\r\n                                        domainPolicy_index = p;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                // #endregion \r\n\r\n                                // #region Change array value for \"domainPolicy\" \r\n                                if(domainPolicy_index !== (-1))\r\n                                    (policies_and_certs[domainPolicy_index])[i] = true; // Put \"set\" in \"domainPolicy\" cell for specific certificate\r\n                                // #endregion \r\n                            }\r\n                        }\r\n                        // #endregion \r\n\r\n                        // #region Process with \"pending constraints\" \r\n                        if(explicit_policy_indicator === false)\r\n                        {\r\n                            if(pending_constraints[0] === true)\r\n                            {\r\n                                explicit_policy_pending--;\r\n                                if(explicit_policy_pending === 0)\r\n                                {\r\n                                    explicit_policy_indicator = true;\r\n                                    pending_constraints[0] = false;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if(policy_mapping_inhibit_indicator === false)\r\n                        {\r\n                            if(pending_constraints[1] === true)\r\n                            {\r\n                                policy_mapping_inhibit_pending--;\r\n                                if(policy_mapping_inhibit_pending === 0)\r\n                                {\r\n                                    policy_mapping_inhibit_indicator = true;\r\n                                    pending_constraints[1] = false;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if(inhibit_any_policy_indicator === false)\r\n                        {\r\n                            if(pending_constraints[2] === true)\r\n                            {\r\n                                inhibit_any_policy_pending--;\r\n                                if(inhibit_any_policy_pending === 0)\r\n                                {\r\n                                    inhibit_any_policy_indicator = true;\r\n                                    pending_constraints[2] = false;\r\n                                }\r\n                            }\r\n                        }\r\n                        // #endregion \r\n                    }\r\n                }\r\n\r\n                // #region Create \"set of authorities-constrained policies\"\r\n                var auth_constr_policies = new Array();\r\n\r\n                for(var i = 0; i < policies_and_certs.length; i++)\r\n                {\r\n                    var found = true;\r\n\r\n                    for(var j = 0; j < (_this.certs.length - 1) ; j++)\r\n                    {\r\n                        if(typeof (policies_and_certs[i])[j] === \"undefined\")\r\n                        {\r\n                            found = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(found === true)\r\n                        auth_constr_policies.push(all_policies[i]);\r\n                }\r\n                // #endregion \r\n\r\n                // #region Create \"set of user-constrained policies\"\r\n                var user_constr_policies = new Array();\r\n\r\n                for(var i = 0; i < auth_constr_policies.length; i++)\r\n                {\r\n                    for(var j = 0; j < initial_policy_set.length; j++)\r\n                    {\r\n                        if(initial_policy_set[j] === auth_constr_policies[i])\r\n                        {\r\n                            user_constr_policies.push(initial_policy_set[j]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                // #endregion \r\n\r\n                // #region Combine output object \r\n                return {\r\n                    result: (user_constr_policies.length > 0),\r\n                    result_code: 0,\r\n                    result_message: (user_constr_policies.length > 0) ? \"\" : \"Zero \\\"user_constr_policies\\\" array, no intersections with \\\"auth_constr_policies\\\"\",\r\n                    auth_constr_policies: auth_constr_policies,\r\n                    user_constr_policies: user_constr_policies,\r\n                    explicit_policy_indicator: explicit_policy_indicator,\r\n                    policy_mappings: policy_mappings\r\n                };\r\n                // #endregion \r\n            }\r\n            );\r\n        // #endregion \r\n\r\n        // #region Work with name constraints\r\n        sequence = sequence.then(\r\n            function(policy_result)\r\n            {\r\n                // #region Auxiliary functions for name constraints checking\r\n                function compare_dNSName(name, constraint)\r\n                {\r\n                    /// <summary>Compare two dNSName values</summary>\r\n                    /// <param name=\"name\" type=\"String\">DNS from name</param>\r\n                    /// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n                    /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n                    // #region Make a \"string preparation\" for both name and constrain \r\n                    var name_prepared = in_window.org.pkijs.stringPrep(name);\r\n                    var constraint_prepared = in_window.org.pkijs.stringPrep(constraint);\r\n                    // #endregion \r\n\r\n                    // #region Make a \"splitted\" versions of \"constraint\" and \"name\" \r\n                    var name_splitted = name_prepared.split(\".\");\r\n                    var constraint_splitted = constraint_prepared.split(\".\");\r\n                    // #endregion \r\n\r\n                    // #region Length calculation and additional check \r\n                    var name_len = name_splitted.length;\r\n                    var constr_len = constraint_splitted.length;\r\n\r\n                    if((name_len === 0) || (constr_len === 0) || (name_len < constr_len))\r\n                        return false;\r\n                    // #endregion \r\n\r\n                    // #region Check that no part of \"name\" has zero length \r\n                    for(var i = 0; i < name_len; i++)\r\n                    {\r\n                        if(name_splitted[i].length === 0)\r\n                            return false;\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Check that no part of \"constraint\" has zero length\r\n                    for(var i = 0; i < constr_len; i++)\r\n                    {\r\n                        if(constraint_splitted[i].length === 0)\r\n                        {\r\n                            if(i === 0)\r\n                            {\r\n                                if(constr_len === 1)\r\n                                    return false;\r\n                                else\r\n                                    continue;\r\n                            }\r\n\r\n                            return false;\r\n                        }\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Check that \"name\" has a tail as \"constraint\" \r\n\r\n                    for(var i = 0; i < constr_len; i++)\r\n                    {\r\n                        if(constraint_splitted[constr_len - 1 - i].length === 0)\r\n                            continue;\r\n\r\n                        if(name_splitted[name_len - 1 - i].localeCompare(constraint_splitted[constr_len - 1 - i]) !== 0)\r\n                            return false;\r\n                    }\r\n                    // #endregion \r\n\r\n                    return true;\r\n                }\r\n\r\n                function compare_rfc822Name(name, constraint)\r\n                {\r\n                    /// <summary>Compare two rfc822Name values</summary>\r\n                    /// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n                    /// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n                    /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n                    // #region Make a \"string preparation\" for both name and constrain \r\n                    var name_prepared = in_window.org.pkijs.stringPrep(name);\r\n                    var constraint_prepared = in_window.org.pkijs.stringPrep(constraint);\r\n                    // #endregion \r\n\r\n                    // #region Make a \"splitted\" versions of \"constraint\" and \"name\" \r\n                    var name_splitted = name_prepared.split(\"@\");\r\n                    var constraint_splitted = constraint_prepared.split(\"@\");\r\n                    // #endregion \r\n\r\n                    // #region Splitted array length checking \r\n                    if((name_splitted.length === 0) || (constraint_splitted.length === 0) || (name_splitted.length < constraint_splitted.length))\r\n                        return false;\r\n                    // #endregion \r\n\r\n                    if(constraint_splitted.length === 1)\r\n                    {\r\n                        var result = compare_dNSName(name_splitted[1], constraint_splitted[0]);\r\n\r\n                        if(result)\r\n                        {\r\n                            // #region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\" \r\n                            var ns = name_splitted[1].split(\".\");\r\n                            var cs = constraint_splitted[0].split(\".\");\r\n                            // #endregion \r\n\r\n                            if(cs[0].length === 0)\r\n                                return true;\r\n\r\n                            return ns.length === cs.length;\r\n                        }\r\n                        else\r\n                            return false;\r\n                    }\r\n                    else\r\n                        return (name_prepared.localeCompare(constraint_prepared) === 0);\r\n\r\n                    return false;\r\n                }\r\n\r\n                function compare_uniformResourceIdentifier(name, constraint)\r\n                {\r\n                    /// <summary>Compare two uniformResourceIdentifier values</summary>\r\n                    /// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n                    /// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n                    /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n                    // #region Make a \"string preparation\" for both name and constrain \r\n                    var name_prepared = in_window.org.pkijs.stringPrep(name);\r\n                    var constraint_prepared = in_window.org.pkijs.stringPrep(constraint);\r\n                    // #endregion \r\n\r\n                    // #region Find out a major URI part to compare with\r\n                    var ns = name_prepared.split(\"/\");\r\n                    var cs = constraint_prepared.split(\"/\");\r\n\r\n                    if(cs.length > 1) // Malformed constraint\r\n                        return false;\r\n\r\n                    if(ns.length > 1) // Full URI string\r\n                    {\r\n                        for(var i = 0; i < ns.length; i++)\r\n                        {\r\n                            if((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== ':'))\r\n                            {\r\n                                var ns_port = ns[i].split(\":\");\r\n                                name_prepared = ns_port[0];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    // #endregion \r\n\r\n                    var result = compare_dNSName(name_prepared, constraint_prepared);\r\n\r\n                    if(result)\r\n                    {\r\n                        // #region Make a \"splitted\" versions of \"constraint\" and \"name\" \r\n                        var name_splitted = name_prepared.split(\".\");\r\n                        var constraint_splitted = constraint_prepared.split(\".\");\r\n                        // #endregion \r\n\r\n                        if(constraint_splitted[0].length === 0)\r\n                            return true;\r\n\r\n                        return name_splitted.length === constraint_splitted.length;\r\n                    }\r\n                    else\r\n                        return false;\r\n\r\n                    return false;\r\n                }\r\n\r\n                function compare_iPAddress(name, constraint)\r\n                {\r\n                    /// <summary>Compare two iPAddress values</summary>\r\n                    /// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n                    /// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n                    /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n                    // #region Common variables \r\n                    var name_view = new Uint8Array(name.value_block.value_hex);\r\n                    var constraint_view = new Uint8Array(constraint.value_block.value_hex);\r\n                    // #endregion \r\n\r\n                    // #region Work with IPv4 addresses \r\n                    if((name_view.length === 4) && (constraint_view.length === 8))\r\n                    {\r\n                        for(var i = 0; i < 4; i++)\r\n                        {\r\n                            if((name_view[i] ^ constraint_view[i]) & constraint_view[i + 4])\r\n                                return false;\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Work with IPv6 addresses \r\n                    if((name_view.length === 16) && (constraint_view.length === 32))\r\n                    {\r\n                        for(var i = 0; i < 16; i++)\r\n                        {\r\n                            if((name_view[i] ^ constraint_view[i]) & constraint_view[i + 16])\r\n                                return false;\r\n                        }\r\n\r\n                        return true;\r\n                    }\r\n                    // #endregion \r\n\r\n                    return false;\r\n                }\r\n\r\n                function compare_directoryName(name, constraint)\r\n                {\r\n                    /// <summary>Compare two directoryName values</summary>\r\n                    /// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n                    /// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n                    /// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n                    /// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\r\n                    // #region Initial check \r\n                    if((name.types_and_values.length === 0) || (constraint.types_and_values.length === 0))\r\n                        return true;\r\n\r\n                    if(name.types_and_values.length < constraint.types_and_values.length)\r\n                        return false;\r\n                    // #endregion \r\n\r\n                    // #region Initial variables \r\n                    var result = true;\r\n                    var name_start = 0;\r\n                    // #endregion \r\n\r\n                    for(var i = 0; i < constraint.types_and_values.length; i++)\r\n                    {\r\n                        var local_result = false;\r\n\r\n                        for(var j = name_start; j < name.types_and_values.length; j++)\r\n                        {\r\n                            local_result = name.types_and_values[j].isEqual(constraint.types_and_values[i]);\r\n\r\n                            if(name.types_and_values[j].type === constraint.types_and_values[i].type)\r\n                                result = result && local_result;\r\n\r\n                            if(local_result === true)\r\n                            {\r\n                                if((name_start === 0) || (name_start === j))\r\n                                {\r\n                                    name_start = j + 1;\r\n                                    break;\r\n                                }\r\n                                else // Structure of \"name\" must be the same with \"constraint\"\r\n                                    return false;\r\n                            }\r\n                        }\r\n\r\n                        if(local_result === false)\r\n                            return false;\r\n                    }\r\n\r\n                    return (name_start === 0) ? false : result;\r\n                }\r\n                // #endregion \r\n\r\n                // #region Check a result from \"policy checking\" part  \r\n                if(policy_result.result === false)\r\n                    return policy_result;\r\n                // #endregion \r\n\r\n                // #region Check all certificates, excluding \"trust anchor\" \r\n                path_depth = 1;\r\n\r\n                for(var i = (_this.certs.length - 2) ; i >= 0 ; i--, path_depth++)\r\n                {\r\n                    // #region Support variables \r\n                    var subject_alt_names = new Array();\r\n\r\n                    var cert_permitted_subtrees = new Array();\r\n                    var cert_excluded_subtrees = new Array();\r\n                    // #endregion \r\n\r\n                    if(\"extensions\" in _this.certs[i])\r\n                    {\r\n                        for(var j = 0; j < _this.certs[i].extensions.length; j++)\r\n                        {\r\n                            // #region NameConstraints \r\n                            if(_this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n                            {\r\n                                if(\"permittedSubtrees\" in _this.certs[i].extensions[j].parsedValue)\r\n                                    cert_permitted_subtrees = cert_permitted_subtrees.concat(_this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\r\n                                if(\"excludedSubtrees\" in _this.certs[i].extensions[j].parsedValue)\r\n                                    cert_excluded_subtrees = cert_excluded_subtrees.concat(_this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n                            }\r\n                            // #endregion   \r\n\r\n                            // #region SubjectAltName \r\n                            if(_this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n                                subject_alt_names = subject_alt_names.concat(_this.certs[i].extensions[j].parsedValue.altNames);\r\n                            // #endregion \r\n                        }\r\n                    }\r\n\r\n                    // #region Checking for \"required name forms\" \r\n                    var form_found = (required_name_forms.length <= 0);\r\n\r\n                    for(var j = 0; j < required_name_forms.length; j++)\r\n                    {\r\n                        switch(required_name_forms[j].base.NameType)\r\n                        {\r\n                            case 4: // directoryName\r\n                                {\r\n                                    if(required_name_forms[j].base.Name.types_and_values.length !== _this.certs[i].subject.types_and_values.length)\r\n                                        continue;\r\n\r\n                                    form_found = true;\r\n\r\n                                    for(var k = 0; k < _this.certs[i].subject.types_and_values.length; k++)\r\n                                    {\r\n                                        if(_this.certs[i].subject.types_and_values[k].type !== required_name_forms[j].base.Name.types_and_values[k].type)\r\n                                        {\r\n                                            form_found = false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n\r\n                                    if(form_found === true)\r\n                                        break;\r\n                                }\r\n                                break;\r\n                            default: // ??? Probably here we should reject the certificate ???\r\n                        }\r\n                    }\r\n\r\n                    if(form_found === false)\r\n                    {\r\n                        policy_result.result = false;\r\n                        policy_result.result_code = 21;\r\n                        policy_result.result_message = \"No neccessary name form found\";\r\n\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject(policy_result);\r\n                        });\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Checking for \"permited sub-trees\" \r\n                    // #region Make groups for all types of constraints \r\n                    var constr_groups = new Array(); // Array of array for groupped constraints\r\n                    constr_groups[0] = new Array(); // rfc822Name\r\n                    constr_groups[1] = new Array(); // dNSName\r\n                    constr_groups[2] = new Array(); // directoryName\r\n                    constr_groups[3] = new Array(); // uniformResourceIdentifier\r\n                    constr_groups[4] = new Array(); // iPAddress\r\n\r\n                    for(var j = 0; j < permitted_subtrees.length; j++)\r\n                    {\r\n                        switch(permitted_subtrees[j].base.NameType)\r\n                        {\r\n                            // #region rfc822Name \r\n                            case 1:\r\n                                constr_groups[0].push(permitted_subtrees[j]);\r\n                                break;\r\n                                // #endregion \r\n                                // #region dNSName \r\n                            case 2:\r\n                                constr_groups[1].push(permitted_subtrees[j]);\r\n                                break;\r\n                                // #endregion \r\n                                // #region directoryName \r\n                            case 4:\r\n                                constr_groups[2].push(permitted_subtrees[j]);\r\n                                break;\r\n                                // #endregion \r\n                                // #region uniformResourceIdentifier \r\n                            case 6:\r\n                                constr_groups[3].push(permitted_subtrees[j]);\r\n                                break;\r\n                                // #endregion \r\n                                // #region iPAddress \r\n                            case 7:\r\n                                constr_groups[4].push(permitted_subtrees[j]);\r\n                                break;\r\n                                // #endregion \r\n                                // #region default \r\n\r\n                            default:\r\n                                // #endregion\r\n                        }\r\n                    }\r\n                    // #endregion   \r\n\r\n                    // #region Check name constraints groupped by type, one-by-one \r\n                    for(var p = 0; p < 5; p++)\r\n                    {\r\n                        var group_permitted = false;\r\n                        var valueExists = false;\r\n                        var group = constr_groups[p];\r\n\r\n                        for(var j = 0; j < group.length; j++)\r\n                        {\r\n                            switch(p)\r\n                            {\r\n                                // #region rfc822Name \r\n                                case 0:\r\n                                    if(subject_alt_names.length > 0)\r\n                                    {\r\n                                        for(var k = 0; k < subject_alt_names.length; k++)\r\n                                        {\r\n                                            if(subject_alt_names[k].NameType === 1) // rfc822Name\r\n                                            {\r\n                                                valueExists = true;\r\n                                                group_permitted = group_permitted || compare_rfc822Name(subject_alt_names[k].Name, group[j].base.Name);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else // Try to find out \"emailAddress\" inside \"subject\"\r\n                                    {\r\n                                        for(var k = 0; k < _this.certs[i].subject.types_and_values.length; k++)\r\n                                        {\r\n                                            if((_this.certs[i].subject.types_and_values[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n                                               (_this.certs[i].subject.types_and_values[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n                                            {\r\n                                                valueExists = true;\r\n                                                group_permitted = group_permitted || compare_rfc822Name(_this.certs[i].subject.types_and_values[k].value.value_block.value, group[j].base.Name);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                    // #endregion \r\n                                    // #region dNSName \r\n                                case 1:\r\n                                    if(subject_alt_names.length > 0)\r\n                                    {\r\n                                        for(var k = 0; k < subject_alt_names.length; k++)\r\n                                        {\r\n                                            if(subject_alt_names[k].NameType === 2) // dNSName\r\n                                            {\r\n                                                valueExists = true;\r\n                                                group_permitted = group_permitted || compare_dNSName(subject_alt_names[k].Name, group[j].base.Name);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                    // #endregion \r\n                                    // #region directoryName \r\n                                case 2:\r\n                                    valueExists = true;\r\n                                    group_permitted = compare_directoryName(_this.certs[i].subject, group[j].base.Name);\r\n                                    break;\r\n                                    // #endregion \r\n                                    // #region uniformResourceIdentifier \r\n                                case 3:\r\n                                    if(subject_alt_names.length > 0)\r\n                                    {\r\n                                        for(var k = 0; k < subject_alt_names.length; k++)\r\n                                        {\r\n                                            if(subject_alt_names[k].NameType === 6) // uniformResourceIdentifier\r\n                                            {\r\n                                                valueExists = true;\r\n                                                group_permitted = group_permitted || compare_uniformResourceIdentifier(subject_alt_names[k].Name, group[j].base.Name);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                    // #endregion \r\n                                    // #region iPAddress \r\n                                case 4:\r\n                                    if(subject_alt_names.length > 0)\r\n                                    {\r\n                                        for(var k = 0; k < subject_alt_names.length; k++)\r\n                                        {\r\n                                            if(subject_alt_names[k].NameType === 7) // iPAddress\r\n                                            {\r\n                                                valueExists = true;\r\n                                                group_permitted = group_permitted || compare_iPAddress(subject_alt_names[k].Name, group[j].base.Name);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                    // #endregion \r\n                                    // #region default \r\n\r\n                                default:\r\n                                    // #endregion\r\n                            }\r\n\r\n                            if(group_permitted)\r\n                                break;\r\n                        }\r\n\r\n                        if((group_permitted === false) && (group.length > 0) && valueExists)\r\n                        {\r\n                            policy_result.result = false;\r\n                            policy_result.result_code = 41;\r\n                            policy_result.result_message = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\r\n                            return new Promise(function(resolve, reject)\r\n                            {\r\n                                reject(policy_result);\r\n                            });\r\n                        }\r\n                    }\r\n                    // #endregion \r\n                    // #endregion \r\n\r\n                    // #region Checking for \"excluded sub-trees\" \r\n                    var excluded = false;\r\n\r\n                    for(var j = 0; j < excluded_subtrees.length; j++)\r\n                    {\r\n                        switch(excluded_subtrees[j].base.NameType)\r\n                        {\r\n                            // #region rfc822Name \r\n                            case 1:\r\n                                if(subject_alt_names.length >= 0)\r\n                                {\r\n                                    for(var k = 0; k < subject_alt_names.length; k++)\r\n                                    {\r\n                                        if(subject_alt_names[k].NameType === 1) // rfc822Name\r\n                                            excluded = excluded || compare_rfc822Name(subject_alt_names[k].Name, excluded_subtrees[j].base.Name);\r\n                                    }\r\n                                }\r\n                                else // Try to find out \"emailAddress\" inside \"subject\"\r\n                                {\r\n                                    for(var k = 0; k < _this.subject.types_and_values.length; k++)\r\n                                    {\r\n                                        if((_this.subject.types_and_values[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n                                           (_this.subject.types_and_values[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n                                        {\r\n                                            excluded = excluded || compare_rfc822Name(_this.subject.types_and_values[k].value.value_block.value, excluded_subtrees[j].base.Name);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                                // #endregion \r\n                                // #region dNSName \r\n                            case 2:\r\n                                if(subject_alt_names.length > 0)\r\n                                {\r\n                                    for(var k = 0; k < subject_alt_names.length; k++)\r\n                                    {\r\n                                        if(subject_alt_names[k].NameType === 2) // dNSName\r\n                                            excluded = excluded || compare_dNSName(subject_alt_names[k].Name, excluded_subtrees[j].base.Name);\r\n                                    }\r\n                                }\r\n                                break;\r\n                                // #endregion \r\n                                // #region directoryName \r\n                            case 4:\r\n                                excluded = excluded || compare_directoryName(_this.certs[i].subject, excluded_subtrees[j].base.Name);\r\n                                break;\r\n                                // #endregion \r\n                                // #region uniformResourceIdentifier \r\n                            case 6:\r\n                                if(subject_alt_names.length > 0)\r\n                                {\r\n                                    for(var k = 0; k < subject_alt_names.length; k++)\r\n                                    {\r\n                                        if(subject_alt_names[k].NameType === 6) // uniformResourceIdentifier\r\n                                            excluded = excluded || compare_uniformResourceIdentifier(subject_alt_names[k].Name, excluded_subtrees[j].base.Name);\r\n                                    }\r\n                                }\r\n                                break;\r\n                                // #endregion \r\n                                // #region iPAddress \r\n                            case 7:\r\n                                if(subject_alt_names.length > 0)\r\n                                {\r\n                                    for(var k = 0; k < subject_alt_names.length; k++)\r\n                                    {\r\n                                        if(subject_alt_names[k].NameType === 7) // iPAddress\r\n                                            excluded = excluded || compare_iPAddress(subject_alt_names[k].Name, excluded_subtrees[j].base.Name);\r\n                                    }\r\n                                }\r\n                                break;\r\n                                // #endregion \r\n                                // #region default \r\n\r\n                            default: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n                                // #endregion\r\n                        }\r\n\r\n                        if(excluded)\r\n                            break;\r\n                    }\r\n\r\n                    if(excluded === true)\r\n                    {\r\n                        policy_result.result = false;\r\n                        policy_result.result_code = 42;\r\n                        policy_result.result_message = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\r\n                        return new Promise(function(resolve, reject)\r\n                        {\r\n                            reject(policy_result);\r\n                        });\r\n                    }\r\n                    // #endregion \r\n\r\n                    // #region Append \"cert_..._subtrees\" to \"..._subtrees\" \r\n                    permitted_subtrees = permitted_subtrees.concat(cert_permitted_subtrees);\r\n                    excluded_subtrees = excluded_subtrees.concat(cert_excluded_subtrees);\r\n                    // #endregion   \r\n                }\r\n                // #endregion \r\n\r\n                return policy_result;\r\n            }\r\n            );\r\n        // #endregion   \r\n\r\n        return sequence;\r\n    };\r\n    //**************************************************************************************\r\n    // #endregion \r\n    //**************************************************************************************\r\n}\r\n)(typeof exports !== \"undefined\" ? exports : window);","module.exports = dll_5d62d38be3592dca3a42;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;AAGA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAUA;AACA;AAFA;AACA;AAVA;AACA;AADA;AAiCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAjDA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AAIA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AA9BA;AAAA;AAAA;AAkDA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAhEA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAJA;AACA;AAgEA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;;;;;;;;;AClFA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AADA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;ACNA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1iBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAIA;;;;;;;;;;;;AC3BA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAIA;AACA;AACA;AACA;AASA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAeA;AAcA;AAIA;AACA;AACA;AAEA;AAOA;AAMA;AACA;AACA;AACA;AACA;AAaA;AAKA;AAQA;AAYA;AAIA;AAEA;AAIA;AAeA;AASA;AAIA;AACA;AAEA;AAYA;AAIA;AACA;AAEA;AASA;AAIA;AACA;AAEA;AAeA;AAcA;AAWA;AAIA;AACA;AAEA;AACA;AACA;AAKA;AAgBA;AAIA;AAEA;AACA;AAkCA;AACA;AAcA;AAGA;AAKA;AAMA;AAIA;AAEA;AA0BA;AAkDA;AA+CA;AAiCA;AA8CA;AAoEA;AAiCA;AAiIA;AAIA;AAEA;AAiDA;AAEA;AAGA;AAGA;AAGA;AA6GA;AAUA;AAMA;AAIA;AAEA;AA6OA;AAmBA;AAMA;AAIA;AAEA;AAKA;AAIA;AAIA;AAIA;AAIA;AA4BA;AAIA;AAIA;AACA;AAGA;AAeA;AACA;AAsBA;AACA;AAsBA;AACA;AAgBA;AAGA;AAIA;AAIA;AACA;AAaA;AACA;AAkCA;AAMA;AAIA;AAEA;AAwCA;AAIA;AAEA;AAoBA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAIA;AACA;AACA;AACA;AASA;AACA;AASA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAQA;AAGA;AACA;AACA;AAEA;AA2CA;AAGA;AAEA;AA+CA;AAGA;AAEA;AAYA;AAOA;AAGA;AACA;AAOA;AAGA;AAGA;AAGA;AAEA;AAcA;AAGA;AAEA;AAcA;AAGA;AACA;AAEA;AAeA;AAmCA;AAkBA;AACA;AACA;AACA;AACA;AAKA;AAgBA;AAIA;AAKA;AAGA;AAKA;AASA;AACA;AACA;AACA;AACA;AAKA;AAiBA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAOA;AACA;AAOA;AAKA;AAIA;AAEA;AAuBA;AAKA;AASA;AACA;AACA;AACA;AACA;AAKA;AAWA;AAIA;AAOA;AAGA;AAKA;AAGA;AAIA;AAEA;AASA;AAGA;AAGA;AAGA;AAsEA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAOA;AACA;AAMA;AAGA;AAGA;AAGA;AAOA;AACA;AAGA;AACA;AAKA;AAMA;AANA;AA2BA;AAcA;AAKA;AACA;AAUA;AACA;AAQA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AAEA;AAKA;AAUA;AACA;AACA;AACA;AACA;AAKA;AAiBA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAaA;AACA;AAGA;AACA;AAOA;AACA;AAGA;AACA;AAQA;AACA;AAGA;AA2BA;AACA;AAEA;AAIA;AAEA;AA6DA;AAKA;AAUA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAKA;AAgBA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAmBA;AAIA;AAEA;AAwCA;AAKA;AAiBA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAOA;AAIA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AACA;AAOA;AACA;AAOA;AAKA;AAIA;AAEA;AAGA;AAKA;AAGA;AAKA;AASA;AAKA;AAMA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAKA;AAcA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AAGA;AACA;AAOA;AACA;AASA;AAgCA;AAGA;AAGA;AAIA;AAEA;AAcA;AAKA;AAGA;AAKA;AAWA;AAKA;AAMA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAMA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAIA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAQA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAUA;AAaA;AAMA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AAQA;AAOA;AAKA;AAIA;AAEA;AAMA;AAKA;AAGA;AAKA;AAUA;AAQA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAcA;AAIA;AAEA;AAeA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAOA;AAMA;AAMA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AAEA;AA2CA;AAIA;AAEA;AAuBA;AAKA;AAGA;AAKA;AAUA;AAQA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AAEA;AAIA;AAYA;AAGA;AAMA;AAKA;AAOA;AAIA;AAEA;AACA;AAIA;AACA;AAIA;AAGA;AACA;AACA;AACA;AACA;AAWA;AASA;AAOA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AA8CA;AA9CA;AAkDA;AAIA;AAUA;AAMA;AAKA;AAEA;AAIA;AAEA;AA6BA;AAKA;AAGA;AAKA;AAWA;AAQA;AACA;AAEA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AAMA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAUA;AAMA;AAOA;AAMA;AAGA;AAGA;AAGA;AAIA;AACA;AACA;AAEA;AAKA;AAYA;AAIA;AAEA;AAoBA;AAKA;AAGA;AAKA;AAUA;AAQA;AACA;AAEA;AAGA;AAKA;AAGA;AAIA;AAEA;AAGA;AAoBA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAiBA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAIA;AAIA;AAgBA;AAUA;AAoBA;AAIA;AAEA;AA8CA;AAsCA;AAKA;AASA;AAWA;AAGA;AAIA;AACA;AACA;AAEA;AAyBA;AAIA;AAEA;AAoBA;AAKA;AAmCA;AAZA;AA4CA;AA+BA;AAKA;AAGA;AAKA;AAWA;AAQA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAGA;AAKA;AAGA;AAKA;AAQA;AAcA;AACA;AAEA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAIA;AAYA;AAKA;AAYA;AAKA;AAOA;AASA;AAGA;AAKA;AAGA;AAKA;AAQA;AAcA;AACA;AAEA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAKA;AAeA;AAKA;AAqBA;AAKA;AAOA;AASA;AAGA;AAKA;AAGA;AAKA;AAQA;AAcA;AACA;AAEA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAKA;AAeA;AAKA;AAqBA;AAKA;AAOA;AAMA;AAIA;AAGA;AAKA;AAGA;AAKA;AAQA;AAcA;AAGA;AAKA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAKA;AAGA;AAIA;AAWA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAaA;AAWA;AACA;AAOA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAMA;AAcA;AAKA;AAQA;AAMA;AAKA;AACA;AASA;AACA;AAYA;AAEA;AAgBA;AAKA;AAGA;AAKA;AAaA;AAcA;AAWA;AACA;AAOA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AAEA;AAqBA;AAMA;AAcA;AAKA;AASA;AAMA;AAKA;AACA;AAYA;AACA;AAOA;AAPA;AAmBA;AACA;AASA;AATA;AAkDA;AACA;AACA;AAEA;AAEA;AACA;AAeA;AACA;AAGA;AAGA;AAEA;AAeA;AAYA;AAaA;AACA;AAgCA;AACA;AAaA;AAEA;AAqBA;AAKA;AAGA;AAKA;AAcA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AAMA;AACA;AAEA;AAGA;AAKA;AAGA;AAKA;AAOA;AACA;AACA;AACA;AACA;AAMA;AAIA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AAeA;AACA;AAGA;AACA;AAUA;AACA;AAGA;AACA;AAUA;AACA;AAeA;AACA;AAeA;AACA;AAWA;AACA;AAKA;AAEA;AAWA;AAGA;AAEA;AAWA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAQA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AA1KA;AA+LA;AACA;AACA;AACA;AACA;AAnNA;AA8NA;AACA;AAIA;AACA;AAGA;AAMA;AAIA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAIA;AA+BA;AACA;AAGA;AAIA;AAOA;AACA;AAyBA;AACA;AACA;AACA;AA2BA;AACA;AAYA;AACA;AAYA;AACA;AAYA;AACA;AACA;AAWA;AACA;AAGA;AAwBA;AAEA;AACA;AAQA;AACA;AAcA;AAOA;AACA;AAkBA;AAQA;AAUA;AAGA;AAYA;AAWA;AAvBA;AA8BA;AAUA;AAQA;AAlBA;AAgDA;AAQA;AAQA;AAOA;AAWA;AASA;AAtLA;AA6LA;AASA;AAWA;AAIA;AASA;AAEA;AAIA;AAOA;AACA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAIA;AACA;AACA;AACA;AASA;AACA;AASA;AACA;AASA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAFA;AAIA;AA+CA;AAFA;AAKA;AAKA;AAFA;AAKA;AAIA;AAFA;AAnEA;AAiFA;AAIA;AACA;AACA;AAEA;AAgBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAyCA;AAFA;AA7CA;AA2DA;AAIA;AACA;AACA;AAEA;AAgBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAoBA;AAFA;AAOA;AASA;AAIA;AACA;AACA;AACA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AAFA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAFA;AAkBA;AAFA;AAkBA;AAFA;AAWA;AAFA;AAWA;AAFA;AAkBA;AAFA;AAYA;AAFA;AAWA;AAFA;AAQA;AAFA;AAUA;AAFA;AAUA;AAFA;AAUA;AAFA;AAaA;AAFA;AAcA;AAeA;AAaA;AAFA;AAUA;AAFA;AAUA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAFA;AAUA;AAFA;AAYA;AAFA;AASA;AAFA;AAQA;AAFA;AAcA;AAFA;AAUA;AAFA;AAUA;AAFA;AAmBA;AAFA;AAsBA;AAFA;AASA;AAFA;AASA;AAFA;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA2BA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAQA;AAFA;AAUA;AAFA;AAUA;AAFA;AAUA;AAFA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAmBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAoBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAeA;AACA;AACA;AACA;AACA;AAKA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAFA;AASA;AAFA;AAgBA;AAFA;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAFA;AAUA;AAFA;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAFA;AAUA;AAFA;AAUA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AASA;AAFA;AAeA;AAFA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAmBA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAFA;AAKA;AAKA;AAFA;AAZA;AAqBA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAFA;AAYA;AAFA;AAgBA;AAFA;AAeA;AAFA;AAKA;AAKA;AAFA;AAhDA;AA+DA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAFA;AAWA;AAFA;AAeA;AAFA;AAeA;AAFA;AAKA;AAKA;AAFA;AAKA;AAKA;AAFA;AAKA;AAKA;AAFA;AAKA;AAKA;AAFA;AAtEA;AA+EA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAIA;AACA;AACA;AACA;AASA;AACA;AASA;AACA;AASA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAWA;AAEA;AAIA;AASA;AAEA;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAGA;AAHA;AAcA;AAEA;AAIA;AA0BA;AACA;AAKA;AAGA;AAMA;AAEA;AAMA;AAGA;AAGA;AAGA;AAGA;AAIA;AAEA;AAGA;AAKA;AAEA;AAIA;AAQA;AAwBA;AA6BA;AAEA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AASA;AAGA;AAEA;AAIA;AAgBA;AACA;AAKA;AAEA;AAIA;AASA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAGA;AAHA;AAcA;AAEA;AAIA;AAcA;AACA;AAIA;AAEA;AAIA;AAOA;AACA;AAIA;AAEA;AAaA;AAIA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AAgBA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAGA;AAEA;AAIA;AAOA;AAEA;AASA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AAGA;AAHA;AAcA;AAEA;AAIA;AAeA;AACA;AAIA;AAEA;AAIA;AAQA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAIA;AAUA;AAEA;AACA;AAGA;AAHA;AAsBA;AAEA;AAIA;AAsBA;AACA;AAkBA;AAEA;AAIA;AAuBA;AACA;AAIA;AAEA;AA0BA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAsBA;AAEA;AAIA;AAwBA;AACA;AAYA;AAEA;AAIA;AAMA;AAFA;AAWA;AAFA;AAWA;AAFA;AAWA;AAFA;AAQA;AACA;AAIA;AAEA;AAoBA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAkBA;AACA;AAGA;AAEA;AAIA;AAOA;AAEA;AAKA;AACA;AAIA;AACA;AAIA;AACA;AAKA;AACA;AAQA;AACA;AAoBA;AAGA;AASA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAGA;AAEA;AAIA;AAOA;AAEA;AA4BA;AAWA;AAeA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAGA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AACA;AAQA;AAEA;AAIA;AACA;AAEA;AAMA;AAQA;AACA;AAEA;AAEA;AA2BA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAmBA;AAEA;AAIA;AAeA;AACA;AAGA;AAEA;AAeA;AAEA;AAGA;AAEA;AAIA;AAOA;AAEA;AAcA;AAFA;AAeA;AAEA;AAIA;AACA;AAIA;AAEA;AAsBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAgBA;AAEA;AAIA;AAcA;AACA;AAcA;AAEA;AAIA;AAMA;AAFA;AAWA;AAFA;AAQA;AACA;AAIA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AAYA;AAEA;AAIA;AAaA;AACA;AAQA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AASA;AAGA;AAEA;AAIA;AAaA;AACA;AAKA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAGA;AAEA;AAIA;AAOA;AAEA;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AAYA;AAEA;AAIA;AAaA;AACA;AAKA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAGA;AAHA;AAkBA;AAEA;AAIA;AAmBA;AACA;AAkBA;AAEA;AAIA;AAiBA;AAFA;AAqBA;AAFA;AASA;AACA;AAIA;AAEA;AA0BA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAgBA;AAEA;AAIA;AAcA;AACA;AAkBA;AAEA;AAIA;AAaA;AAFA;AAqBA;AAFA;AAWA;AACA;AAIA;AAEA;AAwBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAgBA;AAEA;AAIA;AAcA;AACA;AAMA;AAEA;AAIA;AASA;AACA;AAIA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAGA;AAEA;AAIA;AAOA;AAEA;AASA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAGA;AAHA;AAeA;AAEA;AAIA;AAcA;AACA;AAWA;AAEA;AAIA;AAiBA;AACA;AAIA;AAEA;AAkBA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AASA;AAGA;AAEA;AAIA;AAaA;AACA;AAKA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAKA;AAEA;AAWA;AAEA;AAMA;AAEA;AAIA;AAOA;AAEA;AAQA;AAEA;AAIA;AACA;AAIA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AASA;AAGA;AAEA;AAIA;AAaA;AACA;AAKA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AAmBA;AAEA;AAIA;AAiBA;AACA;AAGA;AASA;AAEA;AAEA;AAgBA;AAEA;AAIA;AAgBA;AAFA;AAYA;AAFA;AAWA;AAFA;AAaA;AAFA;AAaA;AAFA;AAaA;AACA;AAIA;AAEA;AAgCA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AASA;AAGA;AAEA;AAIA;AAaA;AACA;AAKA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAkBA;AACA;AAGA;AAEA;AAIA;AAOA;AAEA;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAHA;AASA;AAGA;AAEA;AAIA;AAaA;AACA;AAKA;AAEA;AAIA;AAMA;AACA;AAIA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAHA;AA4BA;AAEA;AAIA;AAmBA;AACA;AAGA;AASA;AAEA;AAEA;AAkCA;AAEA;AAIA;AAWA;AAFA;AAcA;AACA;AAeA;AAFA;AAkBA;AAFA;AAkBA;AAFA;AAkBA;AAFA;AAkBA;AAFA;AASA;AACA;AAIA;AAEA;AAoCA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AAGA;AAHA;AAoBA;AAEA;AAIA;AAeA;AACA;AAMA;AAOA;AAGA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAGA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AAIA;AAUA;AACA;AAIA;AAEA;AAeA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAGA;AAHA;AAUA;AAEA;AAIA;AAaA;AACA;AAGA;AAEA;AAIA;AASA;AAEA;AAaA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAHA;AASA;AAKA;AACA;AAaA;AACA;AACA;AAEA;AAGA;AAEA;AAIA;AAqBA;AACA;AA4BA;AAEA;AAKA;AACA;AAOA;AAFA;AAIA;AAwBA;AAFA;AAWA;AAFA;AAYA;AAFA;AAkBA;AAFA;AAWA;AACA;AAIA;AAEA;AAKA;AAMA;AAGA;AAOA;AAVA;AAeA;AACA;AAQA;AAEA;AAIA;AAEA;AACA;AAUA;AACA;AAGA;AAKA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AAWA;AAGA;AAQA;AAGA;AAEA;AASA;AACA;AAIA;AAKA;AACA;AASA;AACA;AAiCA;AAQA;AAGA;AAIA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAKA;AAIA;AAGA;AACA;AAIA;AACA;AAUA;AAeA;AACA;AAeA;AAUA;AACA;AAKA;AACA;AAOA;AACA;AAGA;AACA;AAKA;AACA;AAMA;AAIA;AAQA;AAEA;AAKA;AACA;AAGA;AACA;AAKA;AACA;AAUA;AAKA;AACA;AAWA;AAGA;AAQA;AAGA;AACA;AAGA;AACA;AAKA;AAGA;AAKA;AACA;AAKA;AAGA;AAoCA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAEA;AACA;AAGA;AAHA;AAeA;AAEA;AAIA;AAwBA;AACA;AAYA;AAEA;AAIA;AAeA;AACA;AAIA;AAEA;AAmBA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAHA;AASA;AAeA;AACA;AAGA;AAGA;AAEA;AAIA;AASA;AACA;AA6BA;AAEA;AAIA;AAmCA;AAFA;AAaA;AAKA;AAKA;AACA;AAIA;AACA;AAKA;AAKA;AARA;AAaA;AACA;AAQA;AAEA;AAIA;AAUA;AACA;AAGA;AAIA;AAKA;AAEA;AACA;AAMA;AACA;AAOA;AAOA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AAWA;AAGA;AAQA;AAGA;AAEA;AAaA;AACA;AAIA;AAKA;AACA;AASA;AACA;AAiCA;AAQA;AAGA;AAIA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAKA;AAIA;AAGA;AACA;AAIA;AACA;AAUA;AAeA;AACA;AAeA;AAUA;AACA;AAKA;AACA;AAOA;AACA;AAGA;AACA;AAKA;AACA;AAQA;AAIA;AAQA;AAEA;AAIA;AAYA;AACA;AAIA;AACA;AAIA;AACA;AAOA;AAGA;AAqCA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAGA;AAHA;AAaA;AAEA;AAIA;AAcA;AACA;AAGA;AAEA;AAIA;AASA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAIA;AAOA;AACA;AAGA;AACA;AAGA;AAHA;AAkBA;AAIA;AAEA;AAIA;AASA;AACA;AAiBA;AAEA;AAIA;AAgBA;AAFA;AASA;AAGA;AAKA;AACA;AAIA;AACA;AAKA;AAKA;AARA;AAaA;AACA;AAQA;AAEA;AAIA;AAEA;AACA;AAYA;AACA;AAKA;AACA;AAKA;AACA;AAIA;AAWA;AAGA;AAQA;AAGA;AAEA;AASA;AACA;AAIA;AAKA;AACA;AASA;AACA;AAiCA;AAQA;AAGA;AAIA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAKA;AAIA;AAGA;AACA;AAIA;AACA;AASA;AAeA;AACA;AAeA;AAUA;AACA;AAKA;AAOA;AACA;AAGA;AACA;AAKA;AACA;AAMA;AAIA;AAQA;AAEA;AAuBA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAEA;AACA;AAGA;AAHA;AAiBA;AAEA;AAIA;AAoBA;AACA;AAaA;AAEA;AAIA;AAiBA;AAFA;AASA;AACA;AAIA;AAEA;AAoBA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAGA;AACA;AAOA;AAEA;AAIA;AACA;AAGA;AAEA;AACA;AAKA;AACA;AAWA;AACA;AA4BA;AAMA;AAGA;AAIA;AA4DA;AACA;AAWA;AACA;AA0BA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AAmBA;AACA;AASA;AACA;AA8CA;AACA;AAKA;AAeA;AAKA;AAgBA;AAEA;AAsBA;AACA;AA4CA;AAwGA;AACA;AAEA;AAEA;AAIA;AAIA;AACA;AAKA;AACA;AAGA;AAKA;AACA;AAEA;AAgCA;AACA;AAEA;AAWA;AACA;AAQA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AAEA;AAOA;AASA;AAUA;AAcA;AACA;AAIA;AACA;AAKA;AAgBA;AACA;AAeA;AAIA;AACA;AAqBA;AAGA;AAEA;AAEA;AACA;AASA;AASA;AAMA;AAMA;AACA;AAYA;AACA;AAEA;AACA;AAIA;AACA;AAuCA;AAIA;AAoBA;AACA;AAeA;AACA;AAUA;AAIA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AAOA;AACA;AAOA;AACA;AAiBA;AAEA;AAUA;AAMA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAOA;AAIA;AAiBA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AAGA;AAaA;AAKA;AAIA;AAcA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAYA;AACA;AAYA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAIA;AAmBA;AAYA;AACA;AAIA;AACA;AAKA;AAMA;AAKA;AAUA;AACA;AAGA;AAIA;AAOA;AAHA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AAEA;AA7BA;AAmCA;AACA;AAWA;AAMA;AAOA;AAIA;AACA;AAQA;AACA;AAMA;AAQA;AACA;AAKA;AACA;AAMA;AAQA;AACA;AAMA;AAQA;AAEA;AAlFA;AAuGA;AAEA;AACA;AAOA;AAMA;AAIA;AAIA;AACA;AAOA;AACA;AAMA;AAKA;AACA;AAIA;AACA;AAMA;AAKA;AACA;AAMA;AAKA;AAEA;AACA;AArEA;AAyFA;AACA;AAGA;AAGA;AAKA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC51fA;;;;A","sourceRoot":""}